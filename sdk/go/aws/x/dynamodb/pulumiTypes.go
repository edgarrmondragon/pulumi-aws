// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type GlobalTableReplica struct {
	// AWS region name of replica DynamoDB TableE.g., `us-east-1`
	RegionName string `pulumi:"regionName"`
}

type GlobalTableReplicaArgs struct {
	// AWS region name of replica DynamoDB TableE.g., `us-east-1`
	RegionName pulumix.Input[string] `pulumi:"regionName"`
}

func (GlobalTableReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalTableReplica)(nil)).Elem()
}

func (i GlobalTableReplicaArgs) ToGlobalTableReplicaOutput() GlobalTableReplicaOutput {
	return i.ToGlobalTableReplicaOutputWithContext(context.Background())
}

func (i GlobalTableReplicaArgs) ToGlobalTableReplicaOutputWithContext(ctx context.Context) GlobalTableReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalTableReplicaOutput)
}

func (i *GlobalTableReplicaArgs) ToOutput(ctx context.Context) pulumix.Output[*GlobalTableReplicaArgs] {
	return pulumix.Val(i)
}

type GlobalTableReplicaOutput struct{ *pulumi.OutputState }

func (GlobalTableReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalTableReplica)(nil)).Elem()
}

func (o GlobalTableReplicaOutput) ToGlobalTableReplicaOutput() GlobalTableReplicaOutput {
	return o
}

func (o GlobalTableReplicaOutput) ToGlobalTableReplicaOutputWithContext(ctx context.Context) GlobalTableReplicaOutput {
	return o
}

func (o GlobalTableReplicaOutput) ToOutput(ctx context.Context) pulumix.Output[GlobalTableReplica] {
	return pulumix.Output[GlobalTableReplica]{
		OutputState: o.OutputState,
	}
}

// AWS region name of replica DynamoDB TableE.g., `us-east-1`
func (o GlobalTableReplicaOutput) RegionName() pulumix.Output[string] {
	return pulumix.Apply[GlobalTableReplica](o, func(v GlobalTableReplica) string { return v.RegionName })
}

type TableAttribute struct {
	// Name of the attribute
	Name string `pulumi:"name"`
	// Attribute type. Valid values are `S` (string), `N` (number), `B` (binary).
	Type string `pulumi:"type"`
}

type TableAttributeArgs struct {
	// Name of the attribute
	Name pulumix.Input[string] `pulumi:"name"`
	// Attribute type. Valid values are `S` (string), `N` (number), `B` (binary).
	Type pulumix.Input[string] `pulumi:"type"`
}

func (TableAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableAttribute)(nil)).Elem()
}

func (i TableAttributeArgs) ToTableAttributeOutput() TableAttributeOutput {
	return i.ToTableAttributeOutputWithContext(context.Background())
}

func (i TableAttributeArgs) ToTableAttributeOutputWithContext(ctx context.Context) TableAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAttributeOutput)
}

func (i *TableAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[*TableAttributeArgs] {
	return pulumix.Val(i)
}

type TableAttributeOutput struct{ *pulumi.OutputState }

func (TableAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableAttribute)(nil)).Elem()
}

func (o TableAttributeOutput) ToTableAttributeOutput() TableAttributeOutput {
	return o
}

func (o TableAttributeOutput) ToTableAttributeOutputWithContext(ctx context.Context) TableAttributeOutput {
	return o
}

func (o TableAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[TableAttribute] {
	return pulumix.Output[TableAttribute]{
		OutputState: o.OutputState,
	}
}

// Name of the attribute
func (o TableAttributeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[TableAttribute](o, func(v TableAttribute) string { return v.Name })
}

// Attribute type. Valid values are `S` (string), `N` (number), `B` (binary).
func (o TableAttributeOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[TableAttribute](o, func(v TableAttribute) string { return v.Type })
}

type TableGlobalSecondaryIndex struct {
	// Name of the hash key in the index; must be defined as an attribute in the resource.
	HashKey string `pulumi:"hashKey"`
	// Name of the index.
	Name string `pulumi:"name"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
	ProjectionType string `pulumi:"projectionType"`
	// Name of the range key; must be defined
	RangeKey *string `pulumi:"rangeKey"`
	// Number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity *int `pulumi:"readCapacity"`
	// Number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity *int `pulumi:"writeCapacity"`
}

type TableGlobalSecondaryIndexArgs struct {
	// Name of the hash key in the index; must be defined as an attribute in the resource.
	HashKey pulumix.Input[string] `pulumi:"hashKey"`
	// Name of the index.
	Name pulumix.Input[string] `pulumi:"name"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
	NonKeyAttributes pulumix.Input[[]string] `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
	ProjectionType pulumix.Input[string] `pulumi:"projectionType"`
	// Name of the range key; must be defined
	RangeKey pulumix.Input[*string] `pulumi:"rangeKey"`
	// Number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity pulumix.Input[*int] `pulumi:"readCapacity"`
	// Number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity pulumix.Input[*int] `pulumi:"writeCapacity"`
}

func (TableGlobalSecondaryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableGlobalSecondaryIndex)(nil)).Elem()
}

func (i TableGlobalSecondaryIndexArgs) ToTableGlobalSecondaryIndexOutput() TableGlobalSecondaryIndexOutput {
	return i.ToTableGlobalSecondaryIndexOutputWithContext(context.Background())
}

func (i TableGlobalSecondaryIndexArgs) ToTableGlobalSecondaryIndexOutputWithContext(ctx context.Context) TableGlobalSecondaryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGlobalSecondaryIndexOutput)
}

func (i *TableGlobalSecondaryIndexArgs) ToOutput(ctx context.Context) pulumix.Output[*TableGlobalSecondaryIndexArgs] {
	return pulumix.Val(i)
}

type TableGlobalSecondaryIndexOutput struct{ *pulumi.OutputState }

func (TableGlobalSecondaryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableGlobalSecondaryIndex)(nil)).Elem()
}

func (o TableGlobalSecondaryIndexOutput) ToTableGlobalSecondaryIndexOutput() TableGlobalSecondaryIndexOutput {
	return o
}

func (o TableGlobalSecondaryIndexOutput) ToTableGlobalSecondaryIndexOutputWithContext(ctx context.Context) TableGlobalSecondaryIndexOutput {
	return o
}

func (o TableGlobalSecondaryIndexOutput) ToOutput(ctx context.Context) pulumix.Output[TableGlobalSecondaryIndex] {
	return pulumix.Output[TableGlobalSecondaryIndex]{
		OutputState: o.OutputState,
	}
}

// Name of the hash key in the index; must be defined as an attribute in the resource.
func (o TableGlobalSecondaryIndexOutput) HashKey() pulumix.Output[string] {
	return pulumix.Apply[TableGlobalSecondaryIndex](o, func(v TableGlobalSecondaryIndex) string { return v.HashKey })
}

// Name of the index.
func (o TableGlobalSecondaryIndexOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[TableGlobalSecondaryIndex](o, func(v TableGlobalSecondaryIndex) string { return v.Name })
}

// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
func (o TableGlobalSecondaryIndexOutput) NonKeyAttributes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TableGlobalSecondaryIndex](o, func(v TableGlobalSecondaryIndex) []string { return v.NonKeyAttributes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
func (o TableGlobalSecondaryIndexOutput) ProjectionType() pulumix.Output[string] {
	return pulumix.Apply[TableGlobalSecondaryIndex](o, func(v TableGlobalSecondaryIndex) string { return v.ProjectionType })
}

// Name of the range key; must be defined
func (o TableGlobalSecondaryIndexOutput) RangeKey() pulumix.Output[*string] {
	return pulumix.Apply[TableGlobalSecondaryIndex](o, func(v TableGlobalSecondaryIndex) *string { return v.RangeKey })
}

// Number of read units for this index. Must be set if billingMode is set to PROVISIONED.
func (o TableGlobalSecondaryIndexOutput) ReadCapacity() pulumix.Output[*int] {
	return pulumix.Apply[TableGlobalSecondaryIndex](o, func(v TableGlobalSecondaryIndex) *int { return v.ReadCapacity })
}

// Number of write units for this index. Must be set if billingMode is set to PROVISIONED.
func (o TableGlobalSecondaryIndexOutput) WriteCapacity() pulumix.Output[*int] {
	return pulumix.Apply[TableGlobalSecondaryIndex](o, func(v TableGlobalSecondaryIndex) *int { return v.WriteCapacity })
}

type TableLocalSecondaryIndex struct {
	// Name of the index
	Name string `pulumi:"name"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
	ProjectionType string `pulumi:"projectionType"`
	// Name of the range key.
	RangeKey string `pulumi:"rangeKey"`
}

type TableLocalSecondaryIndexArgs struct {
	// Name of the index
	Name pulumix.Input[string] `pulumi:"name"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
	NonKeyAttributes pulumix.Input[[]string] `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
	ProjectionType pulumix.Input[string] `pulumi:"projectionType"`
	// Name of the range key.
	RangeKey pulumix.Input[string] `pulumi:"rangeKey"`
}

func (TableLocalSecondaryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableLocalSecondaryIndex)(nil)).Elem()
}

func (i TableLocalSecondaryIndexArgs) ToTableLocalSecondaryIndexOutput() TableLocalSecondaryIndexOutput {
	return i.ToTableLocalSecondaryIndexOutputWithContext(context.Background())
}

func (i TableLocalSecondaryIndexArgs) ToTableLocalSecondaryIndexOutputWithContext(ctx context.Context) TableLocalSecondaryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableLocalSecondaryIndexOutput)
}

func (i *TableLocalSecondaryIndexArgs) ToOutput(ctx context.Context) pulumix.Output[*TableLocalSecondaryIndexArgs] {
	return pulumix.Val(i)
}

type TableLocalSecondaryIndexOutput struct{ *pulumi.OutputState }

func (TableLocalSecondaryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableLocalSecondaryIndex)(nil)).Elem()
}

func (o TableLocalSecondaryIndexOutput) ToTableLocalSecondaryIndexOutput() TableLocalSecondaryIndexOutput {
	return o
}

func (o TableLocalSecondaryIndexOutput) ToTableLocalSecondaryIndexOutputWithContext(ctx context.Context) TableLocalSecondaryIndexOutput {
	return o
}

func (o TableLocalSecondaryIndexOutput) ToOutput(ctx context.Context) pulumix.Output[TableLocalSecondaryIndex] {
	return pulumix.Output[TableLocalSecondaryIndex]{
		OutputState: o.OutputState,
	}
}

// Name of the index
func (o TableLocalSecondaryIndexOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[TableLocalSecondaryIndex](o, func(v TableLocalSecondaryIndex) string { return v.Name })
}

// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
func (o TableLocalSecondaryIndexOutput) NonKeyAttributes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TableLocalSecondaryIndex](o, func(v TableLocalSecondaryIndex) []string { return v.NonKeyAttributes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
func (o TableLocalSecondaryIndexOutput) ProjectionType() pulumix.Output[string] {
	return pulumix.Apply[TableLocalSecondaryIndex](o, func(v TableLocalSecondaryIndex) string { return v.ProjectionType })
}

// Name of the range key.
func (o TableLocalSecondaryIndexOutput) RangeKey() pulumix.Output[string] {
	return pulumix.Apply[TableLocalSecondaryIndex](o, func(v TableLocalSecondaryIndex) string { return v.RangeKey })
}

type TablePointInTimeRecovery struct {
	// Whether to enable point-in-time recovery. It can take 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided, this defaults to `false`.
	Enabled bool `pulumi:"enabled"`
}

type TablePointInTimeRecoveryArgs struct {
	// Whether to enable point-in-time recovery. It can take 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided, this defaults to `false`.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (TablePointInTimeRecoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return i.ToTablePointInTimeRecoveryOutputWithContext(context.Background())
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryOutput)
}

func (i *TablePointInTimeRecoveryArgs) ToOutput(ctx context.Context) pulumix.Output[*TablePointInTimeRecoveryArgs] {
	return pulumix.Val(i)
}

type TablePointInTimeRecoveryOutput struct{ *pulumi.OutputState }

func (TablePointInTimeRecoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToOutput(ctx context.Context) pulumix.Output[TablePointInTimeRecovery] {
	return pulumix.Output[TablePointInTimeRecovery]{
		OutputState: o.OutputState,
	}
}

// Whether to enable point-in-time recovery. It can take 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided, this defaults to `false`.
func (o TablePointInTimeRecoveryOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[TablePointInTimeRecovery](o, func(v TablePointInTimeRecovery) bool { return v.Enabled })
}

type TableReplicaType struct {
	// ARN of the table
	Arn *string `pulumi:"arn"`
	// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Whether to enable Point In Time Recovery for the replica. Default is `false`.
	PointInTimeRecovery *bool `pulumi:"pointInTimeRecovery"`
	// Whether to propagate the global table's tags to a replica. Default is `false`. Changes to tags only move in one direction: from global (source) to replica. In other words, tag drift on a replica will not trigger an update. Tag or replica changes on the global table, whether from drift or configuration changes, are propagated to replicas. Changing from `true` to `false` on a subsequent `apply` means replica tags are left as they were, unmanaged, not deleted.
	PropagateTags *bool `pulumi:"propagateTags"`
	// Region name of the replica.
	RegionName string `pulumi:"regionName"`
	// ARN of the Table Stream. Only available when `streamEnabled = true`
	StreamArn *string `pulumi:"streamArn"`
	// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`.
	StreamLabel *string `pulumi:"streamLabel"`
}

type TableReplicaTypeArgs struct {
	// ARN of the table
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// Whether to enable Point In Time Recovery for the replica. Default is `false`.
	PointInTimeRecovery pulumix.Input[*bool] `pulumi:"pointInTimeRecovery"`
	// Whether to propagate the global table's tags to a replica. Default is `false`. Changes to tags only move in one direction: from global (source) to replica. In other words, tag drift on a replica will not trigger an update. Tag or replica changes on the global table, whether from drift or configuration changes, are propagated to replicas. Changing from `true` to `false` on a subsequent `apply` means replica tags are left as they were, unmanaged, not deleted.
	PropagateTags pulumix.Input[*bool] `pulumi:"propagateTags"`
	// Region name of the replica.
	RegionName pulumix.Input[string] `pulumi:"regionName"`
	// ARN of the Table Stream. Only available when `streamEnabled = true`
	StreamArn pulumix.Input[*string] `pulumi:"streamArn"`
	// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`.
	StreamLabel pulumix.Input[*string] `pulumi:"streamLabel"`
}

func (TableReplicaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplicaType)(nil)).Elem()
}

func (i TableReplicaTypeArgs) ToTableReplicaTypeOutput() TableReplicaTypeOutput {
	return i.ToTableReplicaTypeOutputWithContext(context.Background())
}

func (i TableReplicaTypeArgs) ToTableReplicaTypeOutputWithContext(ctx context.Context) TableReplicaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicaTypeOutput)
}

func (i *TableReplicaTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*TableReplicaTypeArgs] {
	return pulumix.Val(i)
}

type TableReplicaTypeOutput struct{ *pulumi.OutputState }

func (TableReplicaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplicaType)(nil)).Elem()
}

func (o TableReplicaTypeOutput) ToTableReplicaTypeOutput() TableReplicaTypeOutput {
	return o
}

func (o TableReplicaTypeOutput) ToTableReplicaTypeOutputWithContext(ctx context.Context) TableReplicaTypeOutput {
	return o
}

func (o TableReplicaTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TableReplicaType] {
	return pulumix.Output[TableReplicaType]{
		OutputState: o.OutputState,
	}
}

// ARN of the table
func (o TableReplicaTypeOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[TableReplicaType](o, func(v TableReplicaType) *string { return v.Arn })
}

// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
func (o TableReplicaTypeOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[TableReplicaType](o, func(v TableReplicaType) *string { return v.KmsKeyArn })
}

// Whether to enable Point In Time Recovery for the replica. Default is `false`.
func (o TableReplicaTypeOutput) PointInTimeRecovery() pulumix.Output[*bool] {
	return pulumix.Apply[TableReplicaType](o, func(v TableReplicaType) *bool { return v.PointInTimeRecovery })
}

// Whether to propagate the global table's tags to a replica. Default is `false`. Changes to tags only move in one direction: from global (source) to replica. In other words, tag drift on a replica will not trigger an update. Tag or replica changes on the global table, whether from drift or configuration changes, are propagated to replicas. Changing from `true` to `false` on a subsequent `apply` means replica tags are left as they were, unmanaged, not deleted.
func (o TableReplicaTypeOutput) PropagateTags() pulumix.Output[*bool] {
	return pulumix.Apply[TableReplicaType](o, func(v TableReplicaType) *bool { return v.PropagateTags })
}

// Region name of the replica.
func (o TableReplicaTypeOutput) RegionName() pulumix.Output[string] {
	return pulumix.Apply[TableReplicaType](o, func(v TableReplicaType) string { return v.RegionName })
}

// ARN of the Table Stream. Only available when `streamEnabled = true`
func (o TableReplicaTypeOutput) StreamArn() pulumix.Output[*string] {
	return pulumix.Apply[TableReplicaType](o, func(v TableReplicaType) *string { return v.StreamArn })
}

// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`.
func (o TableReplicaTypeOutput) StreamLabel() pulumix.Output[*string] {
	return pulumix.Apply[TableReplicaType](o, func(v TableReplicaType) *string { return v.StreamLabel })
}

type TableServerSideEncryption struct {
	// Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK). If `enabled` is `false` then server-side encryption is set to AWS-_owned_ key (shown as `DEFAULT` in the AWS console). Potentially confusingly, if `enabled` is `true` and no `kmsKeyArn` is specified then server-side encryption is set to the _default_ KMS-_managed_ key (shown as `KMS` in the AWS console). The [AWS KMS documentation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html) explains the difference between AWS-_owned_ and KMS-_managed_ keys.
	Enabled bool `pulumi:"enabled"`
	// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
}

type TableServerSideEncryptionArgs struct {
	// Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK). If `enabled` is `false` then server-side encryption is set to AWS-_owned_ key (shown as `DEFAULT` in the AWS console). Potentially confusingly, if `enabled` is `true` and no `kmsKeyArn` is specified then server-side encryption is set to the _default_ KMS-_managed_ key (shown as `KMS` in the AWS console). The [AWS KMS documentation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html) explains the difference between AWS-_owned_ and KMS-_managed_ keys.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
}

func (TableServerSideEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableServerSideEncryption)(nil)).Elem()
}

func (i TableServerSideEncryptionArgs) ToTableServerSideEncryptionOutput() TableServerSideEncryptionOutput {
	return i.ToTableServerSideEncryptionOutputWithContext(context.Background())
}

func (i TableServerSideEncryptionArgs) ToTableServerSideEncryptionOutputWithContext(ctx context.Context) TableServerSideEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableServerSideEncryptionOutput)
}

func (i *TableServerSideEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*TableServerSideEncryptionArgs] {
	return pulumix.Val(i)
}

type TableServerSideEncryptionOutput struct{ *pulumi.OutputState }

func (TableServerSideEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableServerSideEncryption)(nil)).Elem()
}

func (o TableServerSideEncryptionOutput) ToTableServerSideEncryptionOutput() TableServerSideEncryptionOutput {
	return o
}

func (o TableServerSideEncryptionOutput) ToTableServerSideEncryptionOutputWithContext(ctx context.Context) TableServerSideEncryptionOutput {
	return o
}

func (o TableServerSideEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[TableServerSideEncryption] {
	return pulumix.Output[TableServerSideEncryption]{
		OutputState: o.OutputState,
	}
}

// Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK). If `enabled` is `false` then server-side encryption is set to AWS-_owned_ key (shown as `DEFAULT` in the AWS console). Potentially confusingly, if `enabled` is `true` and no `kmsKeyArn` is specified then server-side encryption is set to the _default_ KMS-_managed_ key (shown as `KMS` in the AWS console). The [AWS KMS documentation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html) explains the difference between AWS-_owned_ and KMS-_managed_ keys.
func (o TableServerSideEncryptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[TableServerSideEncryption](o, func(v TableServerSideEncryption) bool { return v.Enabled })
}

// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
func (o TableServerSideEncryptionOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[TableServerSideEncryption](o, func(v TableServerSideEncryption) *string { return v.KmsKeyArn })
}

type TableTtl struct {
	// Name of the table attribute to store the TTL timestamp in.
	AttributeName string `pulumi:"attributeName"`
	// Whether TTL is enabled.
	Enabled *bool `pulumi:"enabled"`
}

type TableTtlArgs struct {
	// Name of the table attribute to store the TTL timestamp in.
	AttributeName pulumix.Input[string] `pulumi:"attributeName"`
	// Whether TTL is enabled.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
}

func (TableTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTtl)(nil)).Elem()
}

func (i TableTtlArgs) ToTableTtlOutput() TableTtlOutput {
	return i.ToTableTtlOutputWithContext(context.Background())
}

func (i TableTtlArgs) ToTableTtlOutputWithContext(ctx context.Context) TableTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlOutput)
}

func (i *TableTtlArgs) ToOutput(ctx context.Context) pulumix.Output[*TableTtlArgs] {
	return pulumix.Val(i)
}

type TableTtlOutput struct{ *pulumi.OutputState }

func (TableTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTtl)(nil)).Elem()
}

func (o TableTtlOutput) ToTableTtlOutput() TableTtlOutput {
	return o
}

func (o TableTtlOutput) ToTableTtlOutputWithContext(ctx context.Context) TableTtlOutput {
	return o
}

func (o TableTtlOutput) ToOutput(ctx context.Context) pulumix.Output[TableTtl] {
	return pulumix.Output[TableTtl]{
		OutputState: o.OutputState,
	}
}

// Name of the table attribute to store the TTL timestamp in.
func (o TableTtlOutput) AttributeName() pulumix.Output[string] {
	return pulumix.Apply[TableTtl](o, func(v TableTtl) string { return v.AttributeName })
}

// Whether TTL is enabled.
func (o TableTtlOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[TableTtl](o, func(v TableTtl) *bool { return v.Enabled })
}

type GetTableAttribute struct {
	// Name of the DynamoDB table.
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

type GetTableAttributeArgs struct {
	// Name of the DynamoDB table.
	Name pulumix.Input[string] `pulumi:"name"`
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetTableAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableAttribute)(nil)).Elem()
}

func (i GetTableAttributeArgs) ToGetTableAttributeOutput() GetTableAttributeOutput {
	return i.ToGetTableAttributeOutputWithContext(context.Background())
}

func (i GetTableAttributeArgs) ToGetTableAttributeOutputWithContext(ctx context.Context) GetTableAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableAttributeOutput)
}

func (i *GetTableAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTableAttributeArgs] {
	return pulumix.Val(i)
}

type GetTableAttributeOutput struct{ *pulumi.OutputState }

func (GetTableAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableAttribute)(nil)).Elem()
}

func (o GetTableAttributeOutput) ToGetTableAttributeOutput() GetTableAttributeOutput {
	return o
}

func (o GetTableAttributeOutput) ToGetTableAttributeOutputWithContext(ctx context.Context) GetTableAttributeOutput {
	return o
}

func (o GetTableAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[GetTableAttribute] {
	return pulumix.Output[GetTableAttribute]{
		OutputState: o.OutputState,
	}
}

// Name of the DynamoDB table.
func (o GetTableAttributeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetTableAttribute](o, func(v GetTableAttribute) string { return v.Name })
}

func (o GetTableAttributeOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetTableAttribute](o, func(v GetTableAttribute) string { return v.Type })
}

type GetTableGlobalSecondaryIndex struct {
	HashKey string `pulumi:"hashKey"`
	// Name of the DynamoDB table.
	Name             string   `pulumi:"name"`
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	ProjectionType   string   `pulumi:"projectionType"`
	RangeKey         string   `pulumi:"rangeKey"`
	ReadCapacity     int      `pulumi:"readCapacity"`
	WriteCapacity    int      `pulumi:"writeCapacity"`
}

type GetTableGlobalSecondaryIndexArgs struct {
	HashKey pulumix.Input[string] `pulumi:"hashKey"`
	// Name of the DynamoDB table.
	Name             pulumix.Input[string]   `pulumi:"name"`
	NonKeyAttributes pulumix.Input[[]string] `pulumi:"nonKeyAttributes"`
	ProjectionType   pulumix.Input[string]   `pulumi:"projectionType"`
	RangeKey         pulumix.Input[string]   `pulumi:"rangeKey"`
	ReadCapacity     pulumix.Input[int]      `pulumi:"readCapacity"`
	WriteCapacity    pulumix.Input[int]      `pulumi:"writeCapacity"`
}

func (GetTableGlobalSecondaryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableGlobalSecondaryIndex)(nil)).Elem()
}

func (i GetTableGlobalSecondaryIndexArgs) ToGetTableGlobalSecondaryIndexOutput() GetTableGlobalSecondaryIndexOutput {
	return i.ToGetTableGlobalSecondaryIndexOutputWithContext(context.Background())
}

func (i GetTableGlobalSecondaryIndexArgs) ToGetTableGlobalSecondaryIndexOutputWithContext(ctx context.Context) GetTableGlobalSecondaryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableGlobalSecondaryIndexOutput)
}

func (i *GetTableGlobalSecondaryIndexArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTableGlobalSecondaryIndexArgs] {
	return pulumix.Val(i)
}

type GetTableGlobalSecondaryIndexOutput struct{ *pulumi.OutputState }

func (GetTableGlobalSecondaryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableGlobalSecondaryIndex)(nil)).Elem()
}

func (o GetTableGlobalSecondaryIndexOutput) ToGetTableGlobalSecondaryIndexOutput() GetTableGlobalSecondaryIndexOutput {
	return o
}

func (o GetTableGlobalSecondaryIndexOutput) ToGetTableGlobalSecondaryIndexOutputWithContext(ctx context.Context) GetTableGlobalSecondaryIndexOutput {
	return o
}

func (o GetTableGlobalSecondaryIndexOutput) ToOutput(ctx context.Context) pulumix.Output[GetTableGlobalSecondaryIndex] {
	return pulumix.Output[GetTableGlobalSecondaryIndex]{
		OutputState: o.OutputState,
	}
}

func (o GetTableGlobalSecondaryIndexOutput) HashKey() pulumix.Output[string] {
	return pulumix.Apply[GetTableGlobalSecondaryIndex](o, func(v GetTableGlobalSecondaryIndex) string { return v.HashKey })
}

// Name of the DynamoDB table.
func (o GetTableGlobalSecondaryIndexOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetTableGlobalSecondaryIndex](o, func(v GetTableGlobalSecondaryIndex) string { return v.Name })
}

func (o GetTableGlobalSecondaryIndexOutput) NonKeyAttributes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTableGlobalSecondaryIndex](o, func(v GetTableGlobalSecondaryIndex) []string { return v.NonKeyAttributes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetTableGlobalSecondaryIndexOutput) ProjectionType() pulumix.Output[string] {
	return pulumix.Apply[GetTableGlobalSecondaryIndex](o, func(v GetTableGlobalSecondaryIndex) string { return v.ProjectionType })
}

func (o GetTableGlobalSecondaryIndexOutput) RangeKey() pulumix.Output[string] {
	return pulumix.Apply[GetTableGlobalSecondaryIndex](o, func(v GetTableGlobalSecondaryIndex) string { return v.RangeKey })
}

func (o GetTableGlobalSecondaryIndexOutput) ReadCapacity() pulumix.Output[int] {
	return pulumix.Apply[GetTableGlobalSecondaryIndex](o, func(v GetTableGlobalSecondaryIndex) int { return v.ReadCapacity })
}

func (o GetTableGlobalSecondaryIndexOutput) WriteCapacity() pulumix.Output[int] {
	return pulumix.Apply[GetTableGlobalSecondaryIndex](o, func(v GetTableGlobalSecondaryIndex) int { return v.WriteCapacity })
}

type GetTableLocalSecondaryIndex struct {
	// Name of the DynamoDB table.
	Name             string   `pulumi:"name"`
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	ProjectionType   string   `pulumi:"projectionType"`
	RangeKey         string   `pulumi:"rangeKey"`
}

type GetTableLocalSecondaryIndexArgs struct {
	// Name of the DynamoDB table.
	Name             pulumix.Input[string]   `pulumi:"name"`
	NonKeyAttributes pulumix.Input[[]string] `pulumi:"nonKeyAttributes"`
	ProjectionType   pulumix.Input[string]   `pulumi:"projectionType"`
	RangeKey         pulumix.Input[string]   `pulumi:"rangeKey"`
}

func (GetTableLocalSecondaryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableLocalSecondaryIndex)(nil)).Elem()
}

func (i GetTableLocalSecondaryIndexArgs) ToGetTableLocalSecondaryIndexOutput() GetTableLocalSecondaryIndexOutput {
	return i.ToGetTableLocalSecondaryIndexOutputWithContext(context.Background())
}

func (i GetTableLocalSecondaryIndexArgs) ToGetTableLocalSecondaryIndexOutputWithContext(ctx context.Context) GetTableLocalSecondaryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableLocalSecondaryIndexOutput)
}

func (i *GetTableLocalSecondaryIndexArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTableLocalSecondaryIndexArgs] {
	return pulumix.Val(i)
}

type GetTableLocalSecondaryIndexOutput struct{ *pulumi.OutputState }

func (GetTableLocalSecondaryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableLocalSecondaryIndex)(nil)).Elem()
}

func (o GetTableLocalSecondaryIndexOutput) ToGetTableLocalSecondaryIndexOutput() GetTableLocalSecondaryIndexOutput {
	return o
}

func (o GetTableLocalSecondaryIndexOutput) ToGetTableLocalSecondaryIndexOutputWithContext(ctx context.Context) GetTableLocalSecondaryIndexOutput {
	return o
}

func (o GetTableLocalSecondaryIndexOutput) ToOutput(ctx context.Context) pulumix.Output[GetTableLocalSecondaryIndex] {
	return pulumix.Output[GetTableLocalSecondaryIndex]{
		OutputState: o.OutputState,
	}
}

// Name of the DynamoDB table.
func (o GetTableLocalSecondaryIndexOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetTableLocalSecondaryIndex](o, func(v GetTableLocalSecondaryIndex) string { return v.Name })
}

func (o GetTableLocalSecondaryIndexOutput) NonKeyAttributes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTableLocalSecondaryIndex](o, func(v GetTableLocalSecondaryIndex) []string { return v.NonKeyAttributes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetTableLocalSecondaryIndexOutput) ProjectionType() pulumix.Output[string] {
	return pulumix.Apply[GetTableLocalSecondaryIndex](o, func(v GetTableLocalSecondaryIndex) string { return v.ProjectionType })
}

func (o GetTableLocalSecondaryIndexOutput) RangeKey() pulumix.Output[string] {
	return pulumix.Apply[GetTableLocalSecondaryIndex](o, func(v GetTableLocalSecondaryIndex) string { return v.RangeKey })
}

type GetTablePointInTimeRecovery struct {
	Enabled bool `pulumi:"enabled"`
}

type GetTablePointInTimeRecoveryArgs struct {
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (GetTablePointInTimeRecoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablePointInTimeRecovery)(nil)).Elem()
}

func (i GetTablePointInTimeRecoveryArgs) ToGetTablePointInTimeRecoveryOutput() GetTablePointInTimeRecoveryOutput {
	return i.ToGetTablePointInTimeRecoveryOutputWithContext(context.Background())
}

func (i GetTablePointInTimeRecoveryArgs) ToGetTablePointInTimeRecoveryOutputWithContext(ctx context.Context) GetTablePointInTimeRecoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablePointInTimeRecoveryOutput)
}

func (i *GetTablePointInTimeRecoveryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTablePointInTimeRecoveryArgs] {
	return pulumix.Val(i)
}

type GetTablePointInTimeRecoveryOutput struct{ *pulumi.OutputState }

func (GetTablePointInTimeRecoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablePointInTimeRecovery)(nil)).Elem()
}

func (o GetTablePointInTimeRecoveryOutput) ToGetTablePointInTimeRecoveryOutput() GetTablePointInTimeRecoveryOutput {
	return o
}

func (o GetTablePointInTimeRecoveryOutput) ToGetTablePointInTimeRecoveryOutputWithContext(ctx context.Context) GetTablePointInTimeRecoveryOutput {
	return o
}

func (o GetTablePointInTimeRecoveryOutput) ToOutput(ctx context.Context) pulumix.Output[GetTablePointInTimeRecovery] {
	return pulumix.Output[GetTablePointInTimeRecovery]{
		OutputState: o.OutputState,
	}
}

func (o GetTablePointInTimeRecoveryOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetTablePointInTimeRecovery](o, func(v GetTablePointInTimeRecovery) bool { return v.Enabled })
}

type GetTableReplicaType struct {
	KmsKeyArn  string `pulumi:"kmsKeyArn"`
	RegionName string `pulumi:"regionName"`
}

type GetTableReplicaTypeArgs struct {
	KmsKeyArn  pulumix.Input[string] `pulumi:"kmsKeyArn"`
	RegionName pulumix.Input[string] `pulumi:"regionName"`
}

func (GetTableReplicaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableReplicaType)(nil)).Elem()
}

func (i GetTableReplicaTypeArgs) ToGetTableReplicaTypeOutput() GetTableReplicaTypeOutput {
	return i.ToGetTableReplicaTypeOutputWithContext(context.Background())
}

func (i GetTableReplicaTypeArgs) ToGetTableReplicaTypeOutputWithContext(ctx context.Context) GetTableReplicaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableReplicaTypeOutput)
}

func (i *GetTableReplicaTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTableReplicaTypeArgs] {
	return pulumix.Val(i)
}

type GetTableReplicaTypeOutput struct{ *pulumi.OutputState }

func (GetTableReplicaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableReplicaType)(nil)).Elem()
}

func (o GetTableReplicaTypeOutput) ToGetTableReplicaTypeOutput() GetTableReplicaTypeOutput {
	return o
}

func (o GetTableReplicaTypeOutput) ToGetTableReplicaTypeOutputWithContext(ctx context.Context) GetTableReplicaTypeOutput {
	return o
}

func (o GetTableReplicaTypeOutput) ToOutput(ctx context.Context) pulumix.Output[GetTableReplicaType] {
	return pulumix.Output[GetTableReplicaType]{
		OutputState: o.OutputState,
	}
}

func (o GetTableReplicaTypeOutput) KmsKeyArn() pulumix.Output[string] {
	return pulumix.Apply[GetTableReplicaType](o, func(v GetTableReplicaType) string { return v.KmsKeyArn })
}

func (o GetTableReplicaTypeOutput) RegionName() pulumix.Output[string] {
	return pulumix.Apply[GetTableReplicaType](o, func(v GetTableReplicaType) string { return v.RegionName })
}

type GetTableServerSideEncryption struct {
	Enabled   bool   `pulumi:"enabled"`
	KmsKeyArn string `pulumi:"kmsKeyArn"`
}

type GetTableServerSideEncryptionArgs struct {
	Enabled   pulumix.Input[bool]   `pulumi:"enabled"`
	KmsKeyArn pulumix.Input[string] `pulumi:"kmsKeyArn"`
}

func (GetTableServerSideEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableServerSideEncryption)(nil)).Elem()
}

func (i GetTableServerSideEncryptionArgs) ToGetTableServerSideEncryptionOutput() GetTableServerSideEncryptionOutput {
	return i.ToGetTableServerSideEncryptionOutputWithContext(context.Background())
}

func (i GetTableServerSideEncryptionArgs) ToGetTableServerSideEncryptionOutputWithContext(ctx context.Context) GetTableServerSideEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableServerSideEncryptionOutput)
}

func (i *GetTableServerSideEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTableServerSideEncryptionArgs] {
	return pulumix.Val(i)
}

type GetTableServerSideEncryptionOutput struct{ *pulumi.OutputState }

func (GetTableServerSideEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableServerSideEncryption)(nil)).Elem()
}

func (o GetTableServerSideEncryptionOutput) ToGetTableServerSideEncryptionOutput() GetTableServerSideEncryptionOutput {
	return o
}

func (o GetTableServerSideEncryptionOutput) ToGetTableServerSideEncryptionOutputWithContext(ctx context.Context) GetTableServerSideEncryptionOutput {
	return o
}

func (o GetTableServerSideEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetTableServerSideEncryption] {
	return pulumix.Output[GetTableServerSideEncryption]{
		OutputState: o.OutputState,
	}
}

func (o GetTableServerSideEncryptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetTableServerSideEncryption](o, func(v GetTableServerSideEncryption) bool { return v.Enabled })
}

func (o GetTableServerSideEncryptionOutput) KmsKeyArn() pulumix.Output[string] {
	return pulumix.Apply[GetTableServerSideEncryption](o, func(v GetTableServerSideEncryption) string { return v.KmsKeyArn })
}

type GetTableTtl struct {
	AttributeName string `pulumi:"attributeName"`
	Enabled       bool   `pulumi:"enabled"`
}

type GetTableTtlArgs struct {
	AttributeName pulumix.Input[string] `pulumi:"attributeName"`
	Enabled       pulumix.Input[bool]   `pulumi:"enabled"`
}

func (GetTableTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableTtl)(nil)).Elem()
}

func (i GetTableTtlArgs) ToGetTableTtlOutput() GetTableTtlOutput {
	return i.ToGetTableTtlOutputWithContext(context.Background())
}

func (i GetTableTtlArgs) ToGetTableTtlOutputWithContext(ctx context.Context) GetTableTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableTtlOutput)
}

func (i *GetTableTtlArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTableTtlArgs] {
	return pulumix.Val(i)
}

type GetTableTtlOutput struct{ *pulumi.OutputState }

func (GetTableTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableTtl)(nil)).Elem()
}

func (o GetTableTtlOutput) ToGetTableTtlOutput() GetTableTtlOutput {
	return o
}

func (o GetTableTtlOutput) ToGetTableTtlOutputWithContext(ctx context.Context) GetTableTtlOutput {
	return o
}

func (o GetTableTtlOutput) ToOutput(ctx context.Context) pulumix.Output[GetTableTtl] {
	return pulumix.Output[GetTableTtl]{
		OutputState: o.OutputState,
	}
}

func (o GetTableTtlOutput) AttributeName() pulumix.Output[string] {
	return pulumix.Apply[GetTableTtl](o, func(v GetTableTtl) string { return v.AttributeName })
}

func (o GetTableTtlOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetTableTtl](o, func(v GetTableTtl) bool { return v.Enabled })
}

func init() {
	pulumi.RegisterOutputType(GlobalTableReplicaOutput{})
	pulumi.RegisterOutputType(TableAttributeOutput{})
	pulumi.RegisterOutputType(TableGlobalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(TableLocalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(TablePointInTimeRecoveryOutput{})
	pulumi.RegisterOutputType(TableReplicaTypeOutput{})
	pulumi.RegisterOutputType(TableServerSideEncryptionOutput{})
	pulumi.RegisterOutputType(TableTtlOutput{})
	pulumi.RegisterOutputType(GetTableAttributeOutput{})
	pulumi.RegisterOutputType(GetTableGlobalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(GetTableLocalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(GetTablePointInTimeRecoveryOutput{})
	pulumi.RegisterOutputType(GetTableReplicaTypeOutput{})
	pulumi.RegisterOutputType(GetTableServerSideEncryptionOutput{})
	pulumi.RegisterOutputType(GetTableTtlOutput{})
}
