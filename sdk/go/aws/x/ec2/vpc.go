// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a VPC resource.
type Vpc struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of VPC
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6IpamPoolId`
	AssignGeneratedIpv6CidrBlock pulumix.Output[*bool] `pulumi:"assignGeneratedIpv6CidrBlock"`
	// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4NetmaskLength`.
	CidrBlock pulumix.Output[string] `pulumi:"cidrBlock"`
	// The ID of the network ACL created by default on VPC creation
	DefaultNetworkAclId pulumix.Output[string] `pulumi:"defaultNetworkAclId"`
	// The ID of the route table created by default on VPC creation
	DefaultRouteTableId pulumix.Output[string] `pulumi:"defaultRouteTableId"`
	// The ID of the security group created by default on VPC creation
	DefaultSecurityGroupId pulumix.Output[string] `pulumi:"defaultSecurityGroupId"`
	DhcpOptionsId          pulumix.Output[string] `pulumi:"dhcpOptionsId"`
	// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
	EnableDnsHostnames pulumix.Output[bool] `pulumi:"enableDnsHostnames"`
	// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
	EnableDnsSupport pulumix.Output[*bool] `pulumi:"enableDnsSupport"`
	// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
	EnableNetworkAddressUsageMetrics pulumix.Output[bool] `pulumi:"enableNetworkAddressUsageMetrics"`
	// A tenancy option for instances launched into the VPC. Default is `default`, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is `dedicated`, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
	InstanceTenancy pulumix.Output[*string] `pulumi:"instanceTenancy"`
	// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
	Ipv4IpamPoolId pulumix.Output[*string] `pulumi:"ipv4IpamPoolId"`
	// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4IpamPoolId`.
	Ipv4NetmaskLength pulumix.Output[*int] `pulumi:"ipv4NetmaskLength"`
	// The association ID for the IPv6 CIDR block.
	Ipv6AssociationId pulumix.Output[string] `pulumi:"ipv6AssociationId"`
	// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6NetmaskLength`.
	Ipv6CidrBlock pulumix.Output[string] `pulumi:"ipv6CidrBlock"`
	// By default when an IPv6 CIDR is assigned to a VPC a default ipv6CidrBlockNetworkBorderGroup will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
	Ipv6CidrBlockNetworkBorderGroup pulumix.Output[string] `pulumi:"ipv6CidrBlockNetworkBorderGroup"`
	// IPAM Pool ID for a IPv6 pool. Conflicts with `assignGeneratedIpv6CidrBlock`.
	Ipv6IpamPoolId pulumix.Output[*string] `pulumi:"ipv6IpamPoolId"`
	// Netmask length to request from IPAM Pool. Conflicts with `ipv6CidrBlock`. This can be omitted if IPAM pool as a `allocationDefaultNetmaskLength` set. Valid values: `56`.
	Ipv6NetmaskLength pulumix.Output[*int] `pulumi:"ipv6NetmaskLength"`
	// The ID of the main route table associated with
	// this VPC. Note that you can change a VPC's main route table by using an
	// `ec2.MainRouteTableAssociation`.
	MainRouteTableId pulumix.Output[string] `pulumi:"mainRouteTableId"`
	// The ID of the AWS account that owns the VPC.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewVpc registers a new resource with the given unique name, arguments, and options.
func NewVpc(ctx *pulumi.Context,
	name string, args *VpcArgs, opts ...pulumi.ResourceOption) (*Vpc, error) {
	if args == nil {
		args = &VpcArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vpc
	err := ctx.RegisterResource("aws:ec2/vpc:Vpc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpc gets an existing Vpc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcState, opts ...pulumi.ResourceOption) (*Vpc, error) {
	var resource Vpc
	err := ctx.ReadResource("aws:ec2/vpc:Vpc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vpc resources.
type vpcState struct {
	// Amazon Resource Name (ARN) of VPC
	Arn *string `pulumi:"arn"`
	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6IpamPoolId`
	AssignGeneratedIpv6CidrBlock *bool `pulumi:"assignGeneratedIpv6CidrBlock"`
	// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4NetmaskLength`.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The ID of the network ACL created by default on VPC creation
	DefaultNetworkAclId *string `pulumi:"defaultNetworkAclId"`
	// The ID of the route table created by default on VPC creation
	DefaultRouteTableId *string `pulumi:"defaultRouteTableId"`
	// The ID of the security group created by default on VPC creation
	DefaultSecurityGroupId *string `pulumi:"defaultSecurityGroupId"`
	DhcpOptionsId          *string `pulumi:"dhcpOptionsId"`
	// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
	EnableDnsHostnames *bool `pulumi:"enableDnsHostnames"`
	// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
	EnableDnsSupport *bool `pulumi:"enableDnsSupport"`
	// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
	EnableNetworkAddressUsageMetrics *bool `pulumi:"enableNetworkAddressUsageMetrics"`
	// A tenancy option for instances launched into the VPC. Default is `default`, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is `dedicated`, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
	InstanceTenancy *string `pulumi:"instanceTenancy"`
	// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
	Ipv4IpamPoolId *string `pulumi:"ipv4IpamPoolId"`
	// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4IpamPoolId`.
	Ipv4NetmaskLength *int `pulumi:"ipv4NetmaskLength"`
	// The association ID for the IPv6 CIDR block.
	Ipv6AssociationId *string `pulumi:"ipv6AssociationId"`
	// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6NetmaskLength`.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// By default when an IPv6 CIDR is assigned to a VPC a default ipv6CidrBlockNetworkBorderGroup will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
	Ipv6CidrBlockNetworkBorderGroup *string `pulumi:"ipv6CidrBlockNetworkBorderGroup"`
	// IPAM Pool ID for a IPv6 pool. Conflicts with `assignGeneratedIpv6CidrBlock`.
	Ipv6IpamPoolId *string `pulumi:"ipv6IpamPoolId"`
	// Netmask length to request from IPAM Pool. Conflicts with `ipv6CidrBlock`. This can be omitted if IPAM pool as a `allocationDefaultNetmaskLength` set. Valid values: `56`.
	Ipv6NetmaskLength *int `pulumi:"ipv6NetmaskLength"`
	// The ID of the main route table associated with
	// this VPC. Note that you can change a VPC's main route table by using an
	// `ec2.MainRouteTableAssociation`.
	MainRouteTableId *string `pulumi:"mainRouteTableId"`
	// The ID of the AWS account that owns the VPC.
	OwnerId *string `pulumi:"ownerId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type VpcState struct {
	// Amazon Resource Name (ARN) of VPC
	Arn pulumix.Input[*string]
	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6IpamPoolId`
	AssignGeneratedIpv6CidrBlock pulumix.Input[*bool]
	// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4NetmaskLength`.
	CidrBlock pulumix.Input[*string]
	// The ID of the network ACL created by default on VPC creation
	DefaultNetworkAclId pulumix.Input[*string]
	// The ID of the route table created by default on VPC creation
	DefaultRouteTableId pulumix.Input[*string]
	// The ID of the security group created by default on VPC creation
	DefaultSecurityGroupId pulumix.Input[*string]
	DhcpOptionsId          pulumix.Input[*string]
	// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
	EnableDnsHostnames pulumix.Input[*bool]
	// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
	EnableDnsSupport pulumix.Input[*bool]
	// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
	EnableNetworkAddressUsageMetrics pulumix.Input[*bool]
	// A tenancy option for instances launched into the VPC. Default is `default`, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is `dedicated`, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
	InstanceTenancy pulumix.Input[*string]
	// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
	Ipv4IpamPoolId pulumix.Input[*string]
	// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4IpamPoolId`.
	Ipv4NetmaskLength pulumix.Input[*int]
	// The association ID for the IPv6 CIDR block.
	Ipv6AssociationId pulumix.Input[*string]
	// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6NetmaskLength`.
	Ipv6CidrBlock pulumix.Input[*string]
	// By default when an IPv6 CIDR is assigned to a VPC a default ipv6CidrBlockNetworkBorderGroup will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
	Ipv6CidrBlockNetworkBorderGroup pulumix.Input[*string]
	// IPAM Pool ID for a IPv6 pool. Conflicts with `assignGeneratedIpv6CidrBlock`.
	Ipv6IpamPoolId pulumix.Input[*string]
	// Netmask length to request from IPAM Pool. Conflicts with `ipv6CidrBlock`. This can be omitted if IPAM pool as a `allocationDefaultNetmaskLength` set. Valid values: `56`.
	Ipv6NetmaskLength pulumix.Input[*int]
	// The ID of the main route table associated with
	// this VPC. Note that you can change a VPC's main route table by using an
	// `ec2.MainRouteTableAssociation`.
	MainRouteTableId pulumix.Input[*string]
	// The ID of the AWS account that owns the VPC.
	OwnerId pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (VpcState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcState)(nil)).Elem()
}

type vpcArgs struct {
	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6IpamPoolId`
	AssignGeneratedIpv6CidrBlock *bool `pulumi:"assignGeneratedIpv6CidrBlock"`
	// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4NetmaskLength`.
	CidrBlock *string `pulumi:"cidrBlock"`
	// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
	EnableDnsHostnames *bool `pulumi:"enableDnsHostnames"`
	// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
	EnableDnsSupport *bool `pulumi:"enableDnsSupport"`
	// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
	EnableNetworkAddressUsageMetrics *bool `pulumi:"enableNetworkAddressUsageMetrics"`
	// A tenancy option for instances launched into the VPC. Default is `default`, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is `dedicated`, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
	InstanceTenancy *string `pulumi:"instanceTenancy"`
	// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
	Ipv4IpamPoolId *string `pulumi:"ipv4IpamPoolId"`
	// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4IpamPoolId`.
	Ipv4NetmaskLength *int `pulumi:"ipv4NetmaskLength"`
	// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6NetmaskLength`.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// By default when an IPv6 CIDR is assigned to a VPC a default ipv6CidrBlockNetworkBorderGroup will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
	Ipv6CidrBlockNetworkBorderGroup *string `pulumi:"ipv6CidrBlockNetworkBorderGroup"`
	// IPAM Pool ID for a IPv6 pool. Conflicts with `assignGeneratedIpv6CidrBlock`.
	Ipv6IpamPoolId *string `pulumi:"ipv6IpamPoolId"`
	// Netmask length to request from IPAM Pool. Conflicts with `ipv6CidrBlock`. This can be omitted if IPAM pool as a `allocationDefaultNetmaskLength` set. Valid values: `56`.
	Ipv6NetmaskLength *int `pulumi:"ipv6NetmaskLength"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Vpc resource.
type VpcArgs struct {
	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6IpamPoolId`
	AssignGeneratedIpv6CidrBlock pulumix.Input[*bool]
	// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4NetmaskLength`.
	CidrBlock pulumix.Input[*string]
	// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
	EnableDnsHostnames pulumix.Input[*bool]
	// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
	EnableDnsSupport pulumix.Input[*bool]
	// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
	EnableNetworkAddressUsageMetrics pulumix.Input[*bool]
	// A tenancy option for instances launched into the VPC. Default is `default`, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is `dedicated`, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
	InstanceTenancy pulumix.Input[*string]
	// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
	Ipv4IpamPoolId pulumix.Input[*string]
	// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4IpamPoolId`.
	Ipv4NetmaskLength pulumix.Input[*int]
	// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6NetmaskLength`.
	Ipv6CidrBlock pulumix.Input[*string]
	// By default when an IPv6 CIDR is assigned to a VPC a default ipv6CidrBlockNetworkBorderGroup will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
	Ipv6CidrBlockNetworkBorderGroup pulumix.Input[*string]
	// IPAM Pool ID for a IPv6 pool. Conflicts with `assignGeneratedIpv6CidrBlock`.
	Ipv6IpamPoolId pulumix.Input[*string]
	// Netmask length to request from IPAM Pool. Conflicts with `ipv6CidrBlock`. This can be omitted if IPAM pool as a `allocationDefaultNetmaskLength` set. Valid values: `56`.
	Ipv6NetmaskLength pulumix.Input[*int]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (VpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcArgs)(nil)).Elem()
}

type VpcOutput struct{ *pulumi.OutputState }

func (VpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vpc)(nil)).Elem()
}

func (o VpcOutput) ToVpcOutput() VpcOutput {
	return o
}

func (o VpcOutput) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return o
}

func (o VpcOutput) ToOutput(ctx context.Context) pulumix.Output[Vpc] {
	return pulumix.Output[Vpc]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of VPC
func (o VpcOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6IpamPoolId`
func (o VpcOutput) AssignGeneratedIpv6CidrBlock() pulumix.Output[*bool] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[*bool] { return v.AssignGeneratedIpv6CidrBlock })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4NetmaskLength`.
func (o VpcOutput) CidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.CidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the network ACL created by default on VPC creation
func (o VpcOutput) DefaultNetworkAclId() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.DefaultNetworkAclId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the route table created by default on VPC creation
func (o VpcOutput) DefaultRouteTableId() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.DefaultRouteTableId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the security group created by default on VPC creation
func (o VpcOutput) DefaultSecurityGroupId() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.DefaultSecurityGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o VpcOutput) DhcpOptionsId() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.DhcpOptionsId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
func (o VpcOutput) EnableDnsHostnames() pulumix.Output[bool] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[bool] { return v.EnableDnsHostnames })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
func (o VpcOutput) EnableDnsSupport() pulumix.Output[*bool] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[*bool] { return v.EnableDnsSupport })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
func (o VpcOutput) EnableNetworkAddressUsageMetrics() pulumix.Output[bool] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[bool] { return v.EnableNetworkAddressUsageMetrics })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// A tenancy option for instances launched into the VPC. Default is `default`, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is `dedicated`, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
func (o VpcOutput) InstanceTenancy() pulumix.Output[*string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[*string] { return v.InstanceTenancy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
func (o VpcOutput) Ipv4IpamPoolId() pulumix.Output[*string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[*string] { return v.Ipv4IpamPoolId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4IpamPoolId`.
func (o VpcOutput) Ipv4NetmaskLength() pulumix.Output[*int] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[*int] { return v.Ipv4NetmaskLength })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The association ID for the IPv6 CIDR block.
func (o VpcOutput) Ipv6AssociationId() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.Ipv6AssociationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6NetmaskLength`.
func (o VpcOutput) Ipv6CidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.Ipv6CidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// By default when an IPv6 CIDR is assigned to a VPC a default ipv6CidrBlockNetworkBorderGroup will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
func (o VpcOutput) Ipv6CidrBlockNetworkBorderGroup() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.Ipv6CidrBlockNetworkBorderGroup })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// IPAM Pool ID for a IPv6 pool. Conflicts with `assignGeneratedIpv6CidrBlock`.
func (o VpcOutput) Ipv6IpamPoolId() pulumix.Output[*string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[*string] { return v.Ipv6IpamPoolId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Netmask length to request from IPAM Pool. Conflicts with `ipv6CidrBlock`. This can be omitted if IPAM pool as a `allocationDefaultNetmaskLength` set. Valid values: `56`.
func (o VpcOutput) Ipv6NetmaskLength() pulumix.Output[*int] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[*int] { return v.Ipv6NetmaskLength })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The ID of the main route table associated with
// this VPC. Note that you can change a VPC's main route table by using an
// `ec2.MainRouteTableAssociation`.
func (o VpcOutput) MainRouteTableId() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.MainRouteTableId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the AWS account that owns the VPC.
func (o VpcOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Vpc](o, func(v Vpc) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VpcOutput{})
}
