// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about an RDS subnet group.
func LookupSubnetGroup(ctx *pulumi.Context, args *LookupSubnetGroupArgs, opts ...pulumi.InvokeOption) (*LookupSubnetGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubnetGroupResult
	err := ctx.Invoke("aws:rds/getSubnetGroup:getSubnetGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnetGroup.
type LookupSubnetGroupArgs struct {
	// Name of the RDS database subnet group.
	Name string `pulumi:"name"`
}

// A collection of values returned by getSubnetGroup.
type LookupSubnetGroupResult struct {
	// ARN for the DB subnet group.
	Arn string `pulumi:"arn"`
	// Provides the description of the DB subnet group.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Provides the status of the DB subnet group.
	Status string `pulumi:"status"`
	// Contains a list of subnet identifiers.
	SubnetIds []string `pulumi:"subnetIds"`
	// The network type of the DB subnet group.
	SupportedNetworkTypes []string `pulumi:"supportedNetworkTypes"`
	// Provides the VPC ID of the DB subnet group.
	VpcId string `pulumi:"vpcId"`
}

func LookupSubnetGroupOutput(ctx *pulumi.Context, args LookupSubnetGroupOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSubnetGroupArgs](args.ToOutput(), func(plainArgs *LookupSubnetGroupArgs) (*LookupSubnetGroupResult, error) {
		return LookupSubnetGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSubnetGroupResultOutput, *LookupSubnetGroupResult](outputResult)
}

// A collection of arguments for invoking getSubnetGroup.
type LookupSubnetGroupOutputArgs struct {
	// Name of the RDS database subnet group.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupSubnetGroupOutputArgs) ToOutput() pulumix.Output[*LookupSubnetGroupArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSubnetGroupArgs {
		return &LookupSubnetGroupArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupSubnetGroupResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetGroupResult)(nil)).Elem()
}

func (o LookupSubnetGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSubnetGroupResult] {
	return pulumix.Output[*LookupSubnetGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSubnetGroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetGroupResult](o, func(v *LookupSubnetGroupResult) string { return v.Arn })
}

func (o LookupSubnetGroupResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetGroupResult](o, func(v *LookupSubnetGroupResult) string { return v.Description })
}

func (o LookupSubnetGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetGroupResult](o, func(v *LookupSubnetGroupResult) string { return v.Id })
}

func (o LookupSubnetGroupResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetGroupResult](o, func(v *LookupSubnetGroupResult) string { return v.Name })
}

func (o LookupSubnetGroupResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetGroupResult](o, func(v *LookupSubnetGroupResult) string { return v.Status })
}

func (o LookupSubnetGroupResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupSubnetGroupResult](o, func(v *LookupSubnetGroupResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSubnetGroupResultOutput) SupportedNetworkTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupSubnetGroupResult](o, func(v *LookupSubnetGroupResult) []string { return v.SupportedNetworkTypes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSubnetGroupResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetGroupResult](o, func(v *LookupSubnetGroupResult) string { return v.VpcId })
}
