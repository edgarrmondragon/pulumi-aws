// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type SnapshotImportClientData struct {
	// A user-defined comment about the disk upload.
	Comment *string `pulumi:"comment"`
	// The time that the disk upload ends.
	UploadEnd *string `pulumi:"uploadEnd"`
	// The size of the uploaded disk image, in GiB.
	UploadSize *float64 `pulumi:"uploadSize"`
	// The time that the disk upload starts.
	UploadStart *string `pulumi:"uploadStart"`
}

type SnapshotImportClientDataArgs struct {
	// A user-defined comment about the disk upload.
	Comment pulumix.Input[*string] `pulumi:"comment"`
	// The time that the disk upload ends.
	UploadEnd pulumix.Input[*string] `pulumi:"uploadEnd"`
	// The size of the uploaded disk image, in GiB.
	UploadSize pulumix.Input[*float64] `pulumi:"uploadSize"`
	// The time that the disk upload starts.
	UploadStart pulumix.Input[*string] `pulumi:"uploadStart"`
}

func (SnapshotImportClientDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotImportClientData)(nil)).Elem()
}

func (i SnapshotImportClientDataArgs) ToSnapshotImportClientDataOutput() SnapshotImportClientDataOutput {
	return i.ToSnapshotImportClientDataOutputWithContext(context.Background())
}

func (i SnapshotImportClientDataArgs) ToSnapshotImportClientDataOutputWithContext(ctx context.Context) SnapshotImportClientDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotImportClientDataOutput)
}

func (i *SnapshotImportClientDataArgs) ToOutput(ctx context.Context) pulumix.Output[*SnapshotImportClientDataArgs] {
	return pulumix.Val(i)
}

type SnapshotImportClientDataOutput struct{ *pulumi.OutputState }

func (SnapshotImportClientDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotImportClientData)(nil)).Elem()
}

func (o SnapshotImportClientDataOutput) ToSnapshotImportClientDataOutput() SnapshotImportClientDataOutput {
	return o
}

func (o SnapshotImportClientDataOutput) ToSnapshotImportClientDataOutputWithContext(ctx context.Context) SnapshotImportClientDataOutput {
	return o
}

func (o SnapshotImportClientDataOutput) ToOutput(ctx context.Context) pulumix.Output[SnapshotImportClientData] {
	return pulumix.Output[SnapshotImportClientData]{
		OutputState: o.OutputState,
	}
}

// A user-defined comment about the disk upload.
func (o SnapshotImportClientDataOutput) Comment() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotImportClientData](o, func(v SnapshotImportClientData) *string { return v.Comment })
}

// The time that the disk upload ends.
func (o SnapshotImportClientDataOutput) UploadEnd() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotImportClientData](o, func(v SnapshotImportClientData) *string { return v.UploadEnd })
}

// The size of the uploaded disk image, in GiB.
func (o SnapshotImportClientDataOutput) UploadSize() pulumix.Output[*float64] {
	return pulumix.Apply[SnapshotImportClientData](o, func(v SnapshotImportClientData) *float64 { return v.UploadSize })
}

// The time that the disk upload starts.
func (o SnapshotImportClientDataOutput) UploadStart() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotImportClientData](o, func(v SnapshotImportClientData) *string { return v.UploadStart })
}

type SnapshotImportDiskContainer struct {
	// The description of the disk image being imported.
	Description *string `pulumi:"description"`
	// The format of the disk image being imported. One of `VHD` or `VMDK`.
	Format string `pulumi:"format"`
	// The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..). One of `url` or `userBucket` must be set.
	Url *string `pulumi:"url"`
	// The Amazon S3 bucket for the disk image. One of `url` or `userBucket` must be set. Detailed below.
	UserBucket *SnapshotImportDiskContainerUserBucket `pulumi:"userBucket"`
}

type SnapshotImportDiskContainerArgs struct {
	// The description of the disk image being imported.
	Description pulumix.Input[*string] `pulumi:"description"`
	// The format of the disk image being imported. One of `VHD` or `VMDK`.
	Format pulumix.Input[string] `pulumi:"format"`
	// The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..). One of `url` or `userBucket` must be set.
	Url pulumix.Input[*string] `pulumi:"url"`
	// The Amazon S3 bucket for the disk image. One of `url` or `userBucket` must be set. Detailed below.
	UserBucket pulumix.Input[*SnapshotImportDiskContainerUserBucketArgs] `pulumi:"userBucket"`
}

func (SnapshotImportDiskContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotImportDiskContainer)(nil)).Elem()
}

func (i SnapshotImportDiskContainerArgs) ToSnapshotImportDiskContainerOutput() SnapshotImportDiskContainerOutput {
	return i.ToSnapshotImportDiskContainerOutputWithContext(context.Background())
}

func (i SnapshotImportDiskContainerArgs) ToSnapshotImportDiskContainerOutputWithContext(ctx context.Context) SnapshotImportDiskContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotImportDiskContainerOutput)
}

func (i *SnapshotImportDiskContainerArgs) ToOutput(ctx context.Context) pulumix.Output[*SnapshotImportDiskContainerArgs] {
	return pulumix.Val(i)
}

type SnapshotImportDiskContainerOutput struct{ *pulumi.OutputState }

func (SnapshotImportDiskContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotImportDiskContainer)(nil)).Elem()
}

func (o SnapshotImportDiskContainerOutput) ToSnapshotImportDiskContainerOutput() SnapshotImportDiskContainerOutput {
	return o
}

func (o SnapshotImportDiskContainerOutput) ToSnapshotImportDiskContainerOutputWithContext(ctx context.Context) SnapshotImportDiskContainerOutput {
	return o
}

func (o SnapshotImportDiskContainerOutput) ToOutput(ctx context.Context) pulumix.Output[SnapshotImportDiskContainer] {
	return pulumix.Output[SnapshotImportDiskContainer]{
		OutputState: o.OutputState,
	}
}

// The description of the disk image being imported.
func (o SnapshotImportDiskContainerOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotImportDiskContainer](o, func(v SnapshotImportDiskContainer) *string { return v.Description })
}

// The format of the disk image being imported. One of `VHD` or `VMDK`.
func (o SnapshotImportDiskContainerOutput) Format() pulumix.Output[string] {
	return pulumix.Apply[SnapshotImportDiskContainer](o, func(v SnapshotImportDiskContainer) string { return v.Format })
}

// The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..). One of `url` or `userBucket` must be set.
func (o SnapshotImportDiskContainerOutput) Url() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotImportDiskContainer](o, func(v SnapshotImportDiskContainer) *string { return v.Url })
}

// The Amazon S3 bucket for the disk image. One of `url` or `userBucket` must be set. Detailed below.
func (o SnapshotImportDiskContainerOutput) UserBucket() pulumix.GPtrOutput[SnapshotImportDiskContainerUserBucket, SnapshotImportDiskContainerUserBucketOutput] {
	value := pulumix.Apply[SnapshotImportDiskContainer](o, func(v SnapshotImportDiskContainer) *SnapshotImportDiskContainerUserBucket { return v.UserBucket })
	return pulumix.GPtrOutput[SnapshotImportDiskContainerUserBucket, SnapshotImportDiskContainerUserBucketOutput]{OutputState: value.OutputState}
}

type SnapshotImportDiskContainerUserBucket struct {
	// The name of the Amazon S3 bucket where the disk image is located.
	S3Bucket string `pulumi:"s3Bucket"`
	// The file name of the disk image.
	S3Key string `pulumi:"s3Key"`
}

type SnapshotImportDiskContainerUserBucketArgs struct {
	// The name of the Amazon S3 bucket where the disk image is located.
	S3Bucket pulumix.Input[string] `pulumi:"s3Bucket"`
	// The file name of the disk image.
	S3Key pulumix.Input[string] `pulumi:"s3Key"`
}

func (SnapshotImportDiskContainerUserBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotImportDiskContainerUserBucket)(nil)).Elem()
}

func (i SnapshotImportDiskContainerUserBucketArgs) ToSnapshotImportDiskContainerUserBucketOutput() SnapshotImportDiskContainerUserBucketOutput {
	return i.ToSnapshotImportDiskContainerUserBucketOutputWithContext(context.Background())
}

func (i SnapshotImportDiskContainerUserBucketArgs) ToSnapshotImportDiskContainerUserBucketOutputWithContext(ctx context.Context) SnapshotImportDiskContainerUserBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotImportDiskContainerUserBucketOutput)
}

func (i *SnapshotImportDiskContainerUserBucketArgs) ToOutput(ctx context.Context) pulumix.Output[*SnapshotImportDiskContainerUserBucketArgs] {
	return pulumix.Val(i)
}

type SnapshotImportDiskContainerUserBucketOutput struct{ *pulumi.OutputState }

func (SnapshotImportDiskContainerUserBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotImportDiskContainerUserBucket)(nil)).Elem()
}

func (o SnapshotImportDiskContainerUserBucketOutput) ToSnapshotImportDiskContainerUserBucketOutput() SnapshotImportDiskContainerUserBucketOutput {
	return o
}

func (o SnapshotImportDiskContainerUserBucketOutput) ToSnapshotImportDiskContainerUserBucketOutputWithContext(ctx context.Context) SnapshotImportDiskContainerUserBucketOutput {
	return o
}

func (o SnapshotImportDiskContainerUserBucketOutput) ToOutput(ctx context.Context) pulumix.Output[SnapshotImportDiskContainerUserBucket] {
	return pulumix.Output[SnapshotImportDiskContainerUserBucket]{
		OutputState: o.OutputState,
	}
}

// The name of the Amazon S3 bucket where the disk image is located.
func (o SnapshotImportDiskContainerUserBucketOutput) S3Bucket() pulumix.Output[string] {
	return pulumix.Apply[SnapshotImportDiskContainerUserBucket](o, func(v SnapshotImportDiskContainerUserBucket) string { return v.S3Bucket })
}

// The file name of the disk image.
func (o SnapshotImportDiskContainerUserBucketOutput) S3Key() pulumix.Output[string] {
	return pulumix.Apply[SnapshotImportDiskContainerUserBucket](o, func(v SnapshotImportDiskContainerUserBucket) string { return v.S3Key })
}

type GetEbsVolumesFilter struct {
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumes.html).
	// For example, if matching against the `size` filter, use:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ebs"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := ebs.GetEbsVolumes(ctx, &ebs.GetEbsVolumesArgs{
	// 			Filters: []ebs.GetEbsVolumesFilter{
	// 				{
	// 					Name: "size",
	// 					Values: []string{
	// 						"10",
	// 						"20",
	// 					},
	// 				},
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given field.
	// EBS Volume IDs will be selected if any one of the given values match.
	Values []string `pulumi:"values"`
}

type GetEbsVolumesFilterArgs struct {
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumes.html).
	// For example, if matching against the `size` filter, use:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ebs"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := ebs.GetEbsVolumes(ctx, &ebs.GetEbsVolumesArgs{
	// 			Filters: []ebs.GetEbsVolumesFilter{
	// 				{
	// 					Name: "size",
	// 					Values: []string{
	// 						"10",
	// 						"20",
	// 					},
	// 				},
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given field.
	// EBS Volume IDs will be selected if any one of the given values match.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetEbsVolumesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEbsVolumesFilter)(nil)).Elem()
}

func (i GetEbsVolumesFilterArgs) ToGetEbsVolumesFilterOutput() GetEbsVolumesFilterOutput {
	return i.ToGetEbsVolumesFilterOutputWithContext(context.Background())
}

func (i GetEbsVolumesFilterArgs) ToGetEbsVolumesFilterOutputWithContext(ctx context.Context) GetEbsVolumesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEbsVolumesFilterOutput)
}

func (i *GetEbsVolumesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEbsVolumesFilterArgs] {
	return pulumix.Val(i)
}

type GetEbsVolumesFilterOutput struct{ *pulumi.OutputState }

func (GetEbsVolumesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEbsVolumesFilter)(nil)).Elem()
}

func (o GetEbsVolumesFilterOutput) ToGetEbsVolumesFilterOutput() GetEbsVolumesFilterOutput {
	return o
}

func (o GetEbsVolumesFilterOutput) ToGetEbsVolumesFilterOutputWithContext(ctx context.Context) GetEbsVolumesFilterOutput {
	return o
}

func (o GetEbsVolumesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetEbsVolumesFilter] {
	return pulumix.Output[GetEbsVolumesFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the field to filter by, as defined by
// [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumes.html).
// For example, if matching against the `size` filter, use:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ebs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ebs.GetEbsVolumes(ctx, &ebs.GetEbsVolumesArgs{
//				Filters: []ebs.GetEbsVolumesFilter{
//					{
//						Name: "size",
//						Values: []string{
//							"10",
//							"20",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func (o GetEbsVolumesFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetEbsVolumesFilter](o, func(v GetEbsVolumesFilter) string { return v.Name })
}

// Set of values that are accepted for the given field.
// EBS Volume IDs will be selected if any one of the given values match.
func (o GetEbsVolumesFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetEbsVolumesFilter](o, func(v GetEbsVolumesFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetSnapshotFilter struct {
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type GetSnapshotFilterArgs struct {
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetSnapshotFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotFilter)(nil)).Elem()
}

func (i GetSnapshotFilterArgs) ToGetSnapshotFilterOutput() GetSnapshotFilterOutput {
	return i.ToGetSnapshotFilterOutputWithContext(context.Background())
}

func (i GetSnapshotFilterArgs) ToGetSnapshotFilterOutputWithContext(ctx context.Context) GetSnapshotFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotFilterOutput)
}

func (i *GetSnapshotFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSnapshotFilterArgs] {
	return pulumix.Val(i)
}

type GetSnapshotFilterOutput struct{ *pulumi.OutputState }

func (GetSnapshotFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotFilter)(nil)).Elem()
}

func (o GetSnapshotFilterOutput) ToGetSnapshotFilterOutput() GetSnapshotFilterOutput {
	return o
}

func (o GetSnapshotFilterOutput) ToGetSnapshotFilterOutputWithContext(ctx context.Context) GetSnapshotFilterOutput {
	return o
}

func (o GetSnapshotFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSnapshotFilter] {
	return pulumix.Output[GetSnapshotFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetSnapshotFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotFilter](o, func(v GetSnapshotFilter) string { return v.Name })
}

func (o GetSnapshotFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetSnapshotFilter](o, func(v GetSnapshotFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetSnapshotIdsFilter struct {
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type GetSnapshotIdsFilterArgs struct {
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetSnapshotIdsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotIdsFilter)(nil)).Elem()
}

func (i GetSnapshotIdsFilterArgs) ToGetSnapshotIdsFilterOutput() GetSnapshotIdsFilterOutput {
	return i.ToGetSnapshotIdsFilterOutputWithContext(context.Background())
}

func (i GetSnapshotIdsFilterArgs) ToGetSnapshotIdsFilterOutputWithContext(ctx context.Context) GetSnapshotIdsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotIdsFilterOutput)
}

func (i *GetSnapshotIdsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSnapshotIdsFilterArgs] {
	return pulumix.Val(i)
}

type GetSnapshotIdsFilterOutput struct{ *pulumi.OutputState }

func (GetSnapshotIdsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotIdsFilter)(nil)).Elem()
}

func (o GetSnapshotIdsFilterOutput) ToGetSnapshotIdsFilterOutput() GetSnapshotIdsFilterOutput {
	return o
}

func (o GetSnapshotIdsFilterOutput) ToGetSnapshotIdsFilterOutputWithContext(ctx context.Context) GetSnapshotIdsFilterOutput {
	return o
}

func (o GetSnapshotIdsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSnapshotIdsFilter] {
	return pulumix.Output[GetSnapshotIdsFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetSnapshotIdsFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotIdsFilter](o, func(v GetSnapshotIdsFilter) string { return v.Name })
}

func (o GetSnapshotIdsFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetSnapshotIdsFilter](o, func(v GetSnapshotIdsFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetVolumeFilter struct {
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type GetVolumeFilterArgs struct {
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetVolumeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeFilter)(nil)).Elem()
}

func (i GetVolumeFilterArgs) ToGetVolumeFilterOutput() GetVolumeFilterOutput {
	return i.ToGetVolumeFilterOutputWithContext(context.Background())
}

func (i GetVolumeFilterArgs) ToGetVolumeFilterOutputWithContext(ctx context.Context) GetVolumeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeFilterOutput)
}

func (i *GetVolumeFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetVolumeFilterArgs] {
	return pulumix.Val(i)
}

type GetVolumeFilterOutput struct{ *pulumi.OutputState }

func (GetVolumeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeFilter)(nil)).Elem()
}

func (o GetVolumeFilterOutput) ToGetVolumeFilterOutput() GetVolumeFilterOutput {
	return o
}

func (o GetVolumeFilterOutput) ToGetVolumeFilterOutputWithContext(ctx context.Context) GetVolumeFilterOutput {
	return o
}

func (o GetVolumeFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetVolumeFilter] {
	return pulumix.Output[GetVolumeFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetVolumeFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetVolumeFilter](o, func(v GetVolumeFilter) string { return v.Name })
}

func (o GetVolumeFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetVolumeFilter](o, func(v GetVolumeFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SnapshotImportClientDataOutput{})
	pulumi.RegisterOutputType(SnapshotImportDiskContainerOutput{})
	pulumi.RegisterOutputType(SnapshotImportDiskContainerUserBucketOutput{})
	pulumi.RegisterOutputType(GetEbsVolumesFilterOutput{})
	pulumi.RegisterOutputType(GetSnapshotFilterOutput{})
	pulumi.RegisterOutputType(GetSnapshotIdsFilterOutput{})
	pulumi.RegisterOutputType(GetVolumeFilterOutput{})
}
