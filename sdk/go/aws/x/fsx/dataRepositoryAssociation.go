// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a FSx for Lustre Data Repository Association. See [Linking your file system to an S3 bucket](https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html) for more information.
//
// > **NOTE:** Data Repository Associations are only compatible with AWS FSx for Lustre File Systems and `PERSISTENT_2` deployment type.
type DataRepositoryAssociation struct {
	pulumi.CustomResourceState

	// Amazon Resource Name of the file system.
	Arn           pulumix.Output[string] `pulumi:"arn"`
	AssociationId pulumix.Output[string] `pulumi:"associationId"`
	// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
	BatchImportMetaDataOnCreate pulumix.Output[*bool] `pulumi:"batchImportMetaDataOnCreate"`
	// The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
	DataRepositoryPath pulumix.Output[string] `pulumi:"dataRepositoryPath"`
	// Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
	DeleteDataInFilesystem pulumix.Output[*bool] `pulumi:"deleteDataInFilesystem"`
	// The ID of the Amazon FSx file system to on which to create a data repository association.
	FileSystemId pulumix.Output[string] `pulumi:"fileSystemId"`
	// A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `dataRepositoryPath`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
	FileSystemPath pulumix.Output[string] `pulumi:"fileSystemPath"`
	// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
	ImportedFileChunkSize pulumix.Output[int] `pulumi:"importedFileChunkSize"`
	// See the `s3` configuration block. Max of 1.
	// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
	S3 pulumix.GPtrOutput[DataRepositoryAssociationS3, DataRepositoryAssociationS3Output] `pulumi:"s3"`
	// A map of tags to assign to the data repository association. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewDataRepositoryAssociation registers a new resource with the given unique name, arguments, and options.
func NewDataRepositoryAssociation(ctx *pulumi.Context,
	name string, args *DataRepositoryAssociationArgs, opts ...pulumi.ResourceOption) (*DataRepositoryAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataRepositoryPath == nil {
		return nil, errors.New("invalid value for required argument 'DataRepositoryPath'")
	}
	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	if args.FileSystemPath == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemPath'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataRepositoryAssociation
	err := ctx.RegisterResource("aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataRepositoryAssociation gets an existing DataRepositoryAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataRepositoryAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataRepositoryAssociationState, opts ...pulumi.ResourceOption) (*DataRepositoryAssociation, error) {
	var resource DataRepositoryAssociation
	err := ctx.ReadResource("aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataRepositoryAssociation resources.
type dataRepositoryAssociationState struct {
	// Amazon Resource Name of the file system.
	Arn           *string `pulumi:"arn"`
	AssociationId *string `pulumi:"associationId"`
	// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
	BatchImportMetaDataOnCreate *bool `pulumi:"batchImportMetaDataOnCreate"`
	// The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
	DataRepositoryPath *string `pulumi:"dataRepositoryPath"`
	// Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
	DeleteDataInFilesystem *bool `pulumi:"deleteDataInFilesystem"`
	// The ID of the Amazon FSx file system to on which to create a data repository association.
	FileSystemId *string `pulumi:"fileSystemId"`
	// A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `dataRepositoryPath`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
	FileSystemPath *string `pulumi:"fileSystemPath"`
	// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
	ImportedFileChunkSize *int `pulumi:"importedFileChunkSize"`
	// See the `s3` configuration block. Max of 1.
	// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
	S3 *DataRepositoryAssociationS3 `pulumi:"s3"`
	// A map of tags to assign to the data repository association. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type DataRepositoryAssociationState struct {
	// Amazon Resource Name of the file system.
	Arn           pulumix.Input[*string]
	AssociationId pulumix.Input[*string]
	// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
	BatchImportMetaDataOnCreate pulumix.Input[*bool]
	// The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
	DataRepositoryPath pulumix.Input[*string]
	// Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
	DeleteDataInFilesystem pulumix.Input[*bool]
	// The ID of the Amazon FSx file system to on which to create a data repository association.
	FileSystemId pulumix.Input[*string]
	// A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `dataRepositoryPath`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
	FileSystemPath pulumix.Input[*string]
	// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
	ImportedFileChunkSize pulumix.Input[*int]
	// See the `s3` configuration block. Max of 1.
	// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
	S3 pulumix.Input[*DataRepositoryAssociationS3Args]
	// A map of tags to assign to the data repository association. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (DataRepositoryAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataRepositoryAssociationState)(nil)).Elem()
}

type dataRepositoryAssociationArgs struct {
	// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
	BatchImportMetaDataOnCreate *bool `pulumi:"batchImportMetaDataOnCreate"`
	// The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
	DataRepositoryPath string `pulumi:"dataRepositoryPath"`
	// Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
	DeleteDataInFilesystem *bool `pulumi:"deleteDataInFilesystem"`
	// The ID of the Amazon FSx file system to on which to create a data repository association.
	FileSystemId string `pulumi:"fileSystemId"`
	// A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `dataRepositoryPath`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
	FileSystemPath string `pulumi:"fileSystemPath"`
	// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
	ImportedFileChunkSize *int `pulumi:"importedFileChunkSize"`
	// See the `s3` configuration block. Max of 1.
	// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
	S3 *DataRepositoryAssociationS3 `pulumi:"s3"`
	// A map of tags to assign to the data repository association. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DataRepositoryAssociation resource.
type DataRepositoryAssociationArgs struct {
	// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
	BatchImportMetaDataOnCreate pulumix.Input[*bool]
	// The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
	DataRepositoryPath pulumix.Input[string]
	// Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
	DeleteDataInFilesystem pulumix.Input[*bool]
	// The ID of the Amazon FSx file system to on which to create a data repository association.
	FileSystemId pulumix.Input[string]
	// A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `dataRepositoryPath`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
	FileSystemPath pulumix.Input[string]
	// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
	ImportedFileChunkSize pulumix.Input[*int]
	// See the `s3` configuration block. Max of 1.
	// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
	S3 pulumix.Input[*DataRepositoryAssociationS3Args]
	// A map of tags to assign to the data repository association. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (DataRepositoryAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataRepositoryAssociationArgs)(nil)).Elem()
}

type DataRepositoryAssociationOutput struct{ *pulumi.OutputState }

func (DataRepositoryAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataRepositoryAssociation)(nil)).Elem()
}

func (o DataRepositoryAssociationOutput) ToDataRepositoryAssociationOutput() DataRepositoryAssociationOutput {
	return o
}

func (o DataRepositoryAssociationOutput) ToDataRepositoryAssociationOutputWithContext(ctx context.Context) DataRepositoryAssociationOutput {
	return o
}

func (o DataRepositoryAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[DataRepositoryAssociation] {
	return pulumix.Output[DataRepositoryAssociation]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name of the file system.
func (o DataRepositoryAssociationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DataRepositoryAssociationOutput) AssociationId() pulumix.Output[string] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.Output[string] { return v.AssociationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
func (o DataRepositoryAssociationOutput) BatchImportMetaDataOnCreate() pulumix.Output[*bool] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.Output[*bool] { return v.BatchImportMetaDataOnCreate })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
func (o DataRepositoryAssociationOutput) DataRepositoryPath() pulumix.Output[string] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.Output[string] { return v.DataRepositoryPath })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
func (o DataRepositoryAssociationOutput) DeleteDataInFilesystem() pulumix.Output[*bool] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.Output[*bool] { return v.DeleteDataInFilesystem })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The ID of the Amazon FSx file system to on which to create a data repository association.
func (o DataRepositoryAssociationOutput) FileSystemId() pulumix.Output[string] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.Output[string] { return v.FileSystemId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `dataRepositoryPath`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
func (o DataRepositoryAssociationOutput) FileSystemPath() pulumix.Output[string] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.Output[string] { return v.FileSystemPath })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
func (o DataRepositoryAssociationOutput) ImportedFileChunkSize() pulumix.Output[int] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.Output[int] { return v.ImportedFileChunkSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// See the `s3` configuration block. Max of 1.
// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
func (o DataRepositoryAssociationOutput) S3() pulumix.GPtrOutput[DataRepositoryAssociationS3, DataRepositoryAssociationS3Output] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.GPtrOutput[DataRepositoryAssociationS3, DataRepositoryAssociationS3Output] {
		return v.S3
	})
	unwrapped := pulumix.Flatten[*DataRepositoryAssociationS3, pulumix.GPtrOutput[DataRepositoryAssociationS3, DataRepositoryAssociationS3Output]](value)
	return pulumix.GPtrOutput[DataRepositoryAssociationS3, DataRepositoryAssociationS3Output]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the data repository association. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DataRepositoryAssociationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DataRepositoryAssociationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[DataRepositoryAssociation](o, func(v DataRepositoryAssociation) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DataRepositoryAssociationOutput{})
}
