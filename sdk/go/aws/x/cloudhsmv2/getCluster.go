// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudhsmv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a CloudHSM v2 cluster
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("aws:cloudhsmv2/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// ID of Cloud HSM v2 cluster.
	ClusterId string `pulumi:"clusterId"`
	// State of the cluster to be found.
	ClusterState *string `pulumi:"clusterState"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// The list of cluster certificates.
	// * `cluster_certificates.0.cluster_certificate` - The cluster certificate issued (signed) by the issuing certificate authority (CA) of the cluster's owner.
	// * `cluster_certificates.0.cluster_csr` - The certificate signing request (CSR). Available only in UNINITIALIZED state.
	// * `cluster_certificates.0.aws_hardware_certificate` - The HSM hardware certificate issued (signed) by AWS CloudHSM.
	// * `cluster_certificates.0.hsm_certificate` - The HSM certificate issued (signed) by the HSM hardware.
	// * `cluster_certificates.0.manufacturer_hardware_certificate` - The HSM hardware certificate issued (signed) by the hardware manufacturer.
	//   The number of available cluster certificates may vary depending on state of the cluster.
	ClusterCertificates []GetClusterClusterCertificate `pulumi:"clusterCertificates"`
	ClusterId           string                         `pulumi:"clusterId"`
	ClusterState        string                         `pulumi:"clusterState"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of the security group associated with the CloudHSM cluster.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// IDs of subnets in which cluster operates.
	SubnetIds []string `pulumi:"subnetIds"`
	// ID of the VPC that the CloudHSM cluster resides in.
	VpcId string `pulumi:"vpcId"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	outputResult := pulumix.ApplyErr[*LookupClusterArgs](args.ToOutput(), func(plainArgs *LookupClusterArgs) (*LookupClusterResult, error) {
		return LookupCluster(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupClusterResultOutput, *LookupClusterResult](outputResult)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// ID of Cloud HSM v2 cluster.
	ClusterId pulumix.Input[string] `pulumi:"clusterId"`
	// State of the cluster to be found.
	ClusterState pulumix.Input[*string] `pulumi:"clusterState"`
}

func (args LookupClusterOutputArgs) ToOutput() pulumix.Output[*LookupClusterArgs] {
	allArgs := pulumix.All(
		args.ClusterId.ToOutput(context.Background()).AsAny(),
		args.ClusterState.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupClusterArgs {
		return &LookupClusterArgs{
			ClusterId:    resolvedArgs[0].(string),
			ClusterState: resolvedArgs[1].(*string),
		}
	})
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToOutput(context.Context) pulumix.Output[*LookupClusterResult] {
	return pulumix.Output[*LookupClusterResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupClusterResultOutput) ClusterCertificates() pulumix.GArrayOutput[GetClusterClusterCertificate, GetClusterClusterCertificateOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterClusterCertificate { return v.ClusterCertificates })
	return pulumix.GArrayOutput[GetClusterClusterCertificate, GetClusterClusterCertificateOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) ClusterId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterId })
}

func (o LookupClusterResultOutput) ClusterState() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterState })
}

func (o LookupClusterResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Id })
}

func (o LookupClusterResultOutput) SecurityGroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.SecurityGroupId })
}

func (o LookupClusterResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.VpcId })
}
