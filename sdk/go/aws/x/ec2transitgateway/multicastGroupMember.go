// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Registers members (network interfaces) with the transit gateway multicast group.
// A member is a network interface associated with a supported EC2 instance that receives multicast traffic.
type MulticastGroupMember struct {
	pulumi.CustomResourceState

	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress pulumix.Output[string] `pulumi:"groupIpAddress"`
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId pulumix.Output[string] `pulumi:"networkInterfaceId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumix.Output[string] `pulumi:"transitGatewayMulticastDomainId"`
}

// NewMulticastGroupMember registers a new resource with the given unique name, arguments, and options.
func NewMulticastGroupMember(ctx *pulumi.Context,
	name string, args *MulticastGroupMemberArgs, opts ...pulumi.ResourceOption) (*MulticastGroupMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'GroupIpAddress'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.TransitGatewayMulticastDomainId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayMulticastDomainId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MulticastGroupMember
	err := ctx.RegisterResource("aws:ec2transitgateway/multicastGroupMember:MulticastGroupMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMulticastGroupMember gets an existing MulticastGroupMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMulticastGroupMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MulticastGroupMemberState, opts ...pulumi.ResourceOption) (*MulticastGroupMember, error) {
	var resource MulticastGroupMember
	err := ctx.ReadResource("aws:ec2transitgateway/multicastGroupMember:MulticastGroupMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MulticastGroupMember resources.
type multicastGroupMemberState struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress *string `pulumi:"groupIpAddress"`
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId *string `pulumi:"transitGatewayMulticastDomainId"`
}

type MulticastGroupMemberState struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress pulumix.Input[*string]
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId pulumix.Input[*string]
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumix.Input[*string]
}

func (MulticastGroupMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastGroupMemberState)(nil)).Elem()
}

type multicastGroupMemberArgs struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress string `pulumi:"groupIpAddress"`
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId string `pulumi:"transitGatewayMulticastDomainId"`
}

// The set of arguments for constructing a MulticastGroupMember resource.
type MulticastGroupMemberArgs struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress pulumix.Input[string]
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId pulumix.Input[string]
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumix.Input[string]
}

func (MulticastGroupMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastGroupMemberArgs)(nil)).Elem()
}

type MulticastGroupMemberOutput struct{ *pulumi.OutputState }

func (MulticastGroupMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MulticastGroupMember)(nil)).Elem()
}

func (o MulticastGroupMemberOutput) ToMulticastGroupMemberOutput() MulticastGroupMemberOutput {
	return o
}

func (o MulticastGroupMemberOutput) ToMulticastGroupMemberOutputWithContext(ctx context.Context) MulticastGroupMemberOutput {
	return o
}

func (o MulticastGroupMemberOutput) ToOutput(ctx context.Context) pulumix.Output[MulticastGroupMember] {
	return pulumix.Output[MulticastGroupMember]{
		OutputState: o.OutputState,
	}
}

// The IP address assigned to the transit gateway multicast group.
func (o MulticastGroupMemberOutput) GroupIpAddress() pulumix.Output[string] {
	value := pulumix.Apply[MulticastGroupMember](o, func(v MulticastGroupMember) pulumix.Output[string] { return v.GroupIpAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The group members' network interface ID to register with the transit gateway multicast group.
func (o MulticastGroupMemberOutput) NetworkInterfaceId() pulumix.Output[string] {
	value := pulumix.Apply[MulticastGroupMember](o, func(v MulticastGroupMember) pulumix.Output[string] { return v.NetworkInterfaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the transit gateway multicast domain.
func (o MulticastGroupMemberOutput) TransitGatewayMulticastDomainId() pulumix.Output[string] {
	value := pulumix.Apply[MulticastGroupMember](o, func(v MulticastGroupMember) pulumix.Output[string] { return v.TransitGatewayMulticastDomainId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MulticastGroupMemberOutput{})
}
