// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sesv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS SESv2 (Simple Email V2) Dedicated IP Pool.
type DedicatedIpPool struct {
	pulumi.CustomResourceState

	// ARN of the Dedicated IP Pool.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name of the dedicated IP pool.
	//
	// The following arguments are optional:
	PoolName pulumix.Output[string] `pulumi:"poolName"`
	// IP pool scaling mode. Valid values: `STANDARD`, `MANAGED`. If omitted, the AWS API will default to a standard pool.
	ScalingMode pulumix.Output[string] `pulumi:"scalingMode"`
	// A map of tags to assign to the pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewDedicatedIpPool registers a new resource with the given unique name, arguments, and options.
func NewDedicatedIpPool(ctx *pulumi.Context,
	name string, args *DedicatedIpPoolArgs, opts ...pulumi.ResourceOption) (*DedicatedIpPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PoolName == nil {
		return nil, errors.New("invalid value for required argument 'PoolName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DedicatedIpPool
	err := ctx.RegisterResource("aws:sesv2/dedicatedIpPool:DedicatedIpPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedIpPool gets an existing DedicatedIpPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedIpPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedIpPoolState, opts ...pulumi.ResourceOption) (*DedicatedIpPool, error) {
	var resource DedicatedIpPool
	err := ctx.ReadResource("aws:sesv2/dedicatedIpPool:DedicatedIpPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedIpPool resources.
type dedicatedIpPoolState struct {
	// ARN of the Dedicated IP Pool.
	Arn *string `pulumi:"arn"`
	// Name of the dedicated IP pool.
	//
	// The following arguments are optional:
	PoolName *string `pulumi:"poolName"`
	// IP pool scaling mode. Valid values: `STANDARD`, `MANAGED`. If omitted, the AWS API will default to a standard pool.
	ScalingMode *string `pulumi:"scalingMode"`
	// A map of tags to assign to the pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type DedicatedIpPoolState struct {
	// ARN of the Dedicated IP Pool.
	Arn pulumix.Input[*string]
	// Name of the dedicated IP pool.
	//
	// The following arguments are optional:
	PoolName pulumix.Input[*string]
	// IP pool scaling mode. Valid values: `STANDARD`, `MANAGED`. If omitted, the AWS API will default to a standard pool.
	ScalingMode pulumix.Input[*string]
	// A map of tags to assign to the pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (DedicatedIpPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedIpPoolState)(nil)).Elem()
}

type dedicatedIpPoolArgs struct {
	// Name of the dedicated IP pool.
	//
	// The following arguments are optional:
	PoolName string `pulumi:"poolName"`
	// IP pool scaling mode. Valid values: `STANDARD`, `MANAGED`. If omitted, the AWS API will default to a standard pool.
	ScalingMode *string `pulumi:"scalingMode"`
	// A map of tags to assign to the pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DedicatedIpPool resource.
type DedicatedIpPoolArgs struct {
	// Name of the dedicated IP pool.
	//
	// The following arguments are optional:
	PoolName pulumix.Input[string]
	// IP pool scaling mode. Valid values: `STANDARD`, `MANAGED`. If omitted, the AWS API will default to a standard pool.
	ScalingMode pulumix.Input[*string]
	// A map of tags to assign to the pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (DedicatedIpPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedIpPoolArgs)(nil)).Elem()
}

type DedicatedIpPoolOutput struct{ *pulumi.OutputState }

func (DedicatedIpPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedIpPool)(nil)).Elem()
}

func (o DedicatedIpPoolOutput) ToDedicatedIpPoolOutput() DedicatedIpPoolOutput {
	return o
}

func (o DedicatedIpPoolOutput) ToDedicatedIpPoolOutputWithContext(ctx context.Context) DedicatedIpPoolOutput {
	return o
}

func (o DedicatedIpPoolOutput) ToOutput(ctx context.Context) pulumix.Output[DedicatedIpPool] {
	return pulumix.Output[DedicatedIpPool]{
		OutputState: o.OutputState,
	}
}

// ARN of the Dedicated IP Pool.
func (o DedicatedIpPoolOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DedicatedIpPool](o, func(v DedicatedIpPool) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the dedicated IP pool.
//
// The following arguments are optional:
func (o DedicatedIpPoolOutput) PoolName() pulumix.Output[string] {
	value := pulumix.Apply[DedicatedIpPool](o, func(v DedicatedIpPool) pulumix.Output[string] { return v.PoolName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// IP pool scaling mode. Valid values: `STANDARD`, `MANAGED`. If omitted, the AWS API will default to a standard pool.
func (o DedicatedIpPoolOutput) ScalingMode() pulumix.Output[string] {
	value := pulumix.Apply[DedicatedIpPool](o, func(v DedicatedIpPool) pulumix.Output[string] { return v.ScalingMode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DedicatedIpPoolOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DedicatedIpPool](o, func(v DedicatedIpPool) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o DedicatedIpPoolOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[DedicatedIpPool](o, func(v DedicatedIpPool) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DedicatedIpPoolOutput{})
}
