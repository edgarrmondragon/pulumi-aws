// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates and manages an AWS IoT Thing.
type Thing struct {
	pulumi.CustomResourceState

	// The ARN of the thing.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Map of attributes of the thing.
	Attributes pulumix.MapOutput[string] `pulumi:"attributes"`
	// The default client ID.
	DefaultClientId pulumix.Output[string] `pulumi:"defaultClientId"`
	// The name of the thing.
	Name pulumix.Output[string] `pulumi:"name"`
	// The thing type name.
	ThingTypeName pulumix.Output[*string] `pulumi:"thingTypeName"`
	// The current version of the thing record in the registry.
	Version pulumix.Output[int] `pulumi:"version"`
}

// NewThing registers a new resource with the given unique name, arguments, and options.
func NewThing(ctx *pulumi.Context,
	name string, args *ThingArgs, opts ...pulumi.ResourceOption) (*Thing, error) {
	if args == nil {
		args = &ThingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Thing
	err := ctx.RegisterResource("aws:iot/thing:Thing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThing gets an existing Thing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThingState, opts ...pulumi.ResourceOption) (*Thing, error) {
	var resource Thing
	err := ctx.ReadResource("aws:iot/thing:Thing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Thing resources.
type thingState struct {
	// The ARN of the thing.
	Arn *string `pulumi:"arn"`
	// Map of attributes of the thing.
	Attributes map[string]string `pulumi:"attributes"`
	// The default client ID.
	DefaultClientId *string `pulumi:"defaultClientId"`
	// The name of the thing.
	Name *string `pulumi:"name"`
	// The thing type name.
	ThingTypeName *string `pulumi:"thingTypeName"`
	// The current version of the thing record in the registry.
	Version *int `pulumi:"version"`
}

type ThingState struct {
	// The ARN of the thing.
	Arn pulumix.Input[*string]
	// Map of attributes of the thing.
	Attributes pulumix.Input[map[string]string]
	// The default client ID.
	DefaultClientId pulumix.Input[*string]
	// The name of the thing.
	Name pulumix.Input[*string]
	// The thing type name.
	ThingTypeName pulumix.Input[*string]
	// The current version of the thing record in the registry.
	Version pulumix.Input[*int]
}

func (ThingState) ElementType() reflect.Type {
	return reflect.TypeOf((*thingState)(nil)).Elem()
}

type thingArgs struct {
	// Map of attributes of the thing.
	Attributes map[string]string `pulumi:"attributes"`
	// The name of the thing.
	Name *string `pulumi:"name"`
	// The thing type name.
	ThingTypeName *string `pulumi:"thingTypeName"`
}

// The set of arguments for constructing a Thing resource.
type ThingArgs struct {
	// Map of attributes of the thing.
	Attributes pulumix.Input[map[string]string]
	// The name of the thing.
	Name pulumix.Input[*string]
	// The thing type name.
	ThingTypeName pulumix.Input[*string]
}

func (ThingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*thingArgs)(nil)).Elem()
}

type ThingOutput struct{ *pulumi.OutputState }

func (ThingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Thing)(nil)).Elem()
}

func (o ThingOutput) ToThingOutput() ThingOutput {
	return o
}

func (o ThingOutput) ToThingOutputWithContext(ctx context.Context) ThingOutput {
	return o
}

func (o ThingOutput) ToOutput(ctx context.Context) pulumix.Output[Thing] {
	return pulumix.Output[Thing]{
		OutputState: o.OutputState,
	}
}

// The ARN of the thing.
func (o ThingOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Thing](o, func(v Thing) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of attributes of the thing.
func (o ThingOutput) Attributes() pulumix.MapOutput[string] {
	value := pulumix.Apply[Thing](o, func(v Thing) pulumix.MapOutput[string] { return v.Attributes })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The default client ID.
func (o ThingOutput) DefaultClientId() pulumix.Output[string] {
	value := pulumix.Apply[Thing](o, func(v Thing) pulumix.Output[string] { return v.DefaultClientId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the thing.
func (o ThingOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Thing](o, func(v Thing) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The thing type name.
func (o ThingOutput) ThingTypeName() pulumix.Output[*string] {
	value := pulumix.Apply[Thing](o, func(v Thing) pulumix.Output[*string] { return v.ThingTypeName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The current version of the thing record in the registry.
func (o ThingOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[Thing](o, func(v Thing) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(ThingOutput{})
}
