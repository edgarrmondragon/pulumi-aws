// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a Secrets Manager secret rotation. To retrieve secret metadata, see the `secretsmanager.Secret` data source. To retrieve a secret value, see the `secretsmanager.SecretVersion` data source.
func LookupSecretRotation(ctx *pulumi.Context, args *LookupSecretRotationArgs, opts ...pulumi.InvokeOption) (*LookupSecretRotationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecretRotationResult
	err := ctx.Invoke("aws:secretsmanager/getSecretRotation:getSecretRotation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecretRotation.
type LookupSecretRotationArgs struct {
	// Specifies the secret containing the version that you want to retrieve. You can specify either the ARN or the friendly name of the secret.
	SecretId string `pulumi:"secretId"`
}

// A collection of values returned by getSecretRotation.
type LookupSecretRotationResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN of the secret.
	RotationEnabled bool `pulumi:"rotationEnabled"`
	// Decrypted part of the protected secret information that was originally provided as a string.
	RotationLambdaArn string `pulumi:"rotationLambdaArn"`
	// Decrypted part of the protected secret information that was originally provided as a binary. Base64 encoded.
	RotationRules []GetSecretRotationRotationRule `pulumi:"rotationRules"`
	SecretId      string                          `pulumi:"secretId"`
}

func LookupSecretRotationOutput(ctx *pulumi.Context, args LookupSecretRotationOutputArgs, opts ...pulumi.InvokeOption) LookupSecretRotationResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSecretRotationArgs](args.ToOutput(), func(plainArgs *LookupSecretRotationArgs) (*LookupSecretRotationResult, error) {
		return LookupSecretRotation(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSecretRotationResultOutput, *LookupSecretRotationResult](outputResult)
}

// A collection of arguments for invoking getSecretRotation.
type LookupSecretRotationOutputArgs struct {
	// Specifies the secret containing the version that you want to retrieve. You can specify either the ARN or the friendly name of the secret.
	SecretId pulumix.Input[string] `pulumi:"secretId"`
}

func (args LookupSecretRotationOutputArgs) ToOutput() pulumix.Output[*LookupSecretRotationArgs] {
	allArgs := pulumix.All(
		args.SecretId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSecretRotationArgs {
		return &LookupSecretRotationArgs{
			SecretId: resolvedArgs[0].(string),
		}
	})
}

type LookupSecretRotationResultOutput struct{ *pulumi.OutputState }

func (LookupSecretRotationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretRotationResult)(nil)).Elem()
}

func (o LookupSecretRotationResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSecretRotationResult] {
	return pulumix.Output[*LookupSecretRotationResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSecretRotationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretRotationResult](o, func(v *LookupSecretRotationResult) string { return v.Id })
}

func (o LookupSecretRotationResultOutput) RotationEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSecretRotationResult](o, func(v *LookupSecretRotationResult) bool { return v.RotationEnabled })
}

func (o LookupSecretRotationResultOutput) RotationLambdaArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretRotationResult](o, func(v *LookupSecretRotationResult) string { return v.RotationLambdaArn })
}

func (o LookupSecretRotationResultOutput) RotationRules() pulumix.GArrayOutput[GetSecretRotationRotationRule, GetSecretRotationRotationRuleOutput] {
	value := pulumix.Apply[*LookupSecretRotationResult](o, func(v *LookupSecretRotationResult) []GetSecretRotationRotationRule { return v.RotationRules })
	return pulumix.GArrayOutput[GetSecretRotationRotationRule, GetSecretRotationRotationRuleOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupSecretRotationResultOutput) SecretId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretRotationResult](o, func(v *LookupSecretRotationResult) string { return v.SecretId })
}
