// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS SFN (Step Functions) State Machine Versions.
func GetStateMachineVersions(ctx *pulumi.Context, args *GetStateMachineVersionsArgs, opts ...pulumi.InvokeOption) (*GetStateMachineVersionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetStateMachineVersionsResult
	err := ctx.Invoke("aws:sfn/getStateMachineVersions:getStateMachineVersions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStateMachineVersions.
type GetStateMachineVersionsArgs struct {
	// ARN of the State Machine.
	StatemachineArn string `pulumi:"statemachineArn"`
}

// A collection of values returned by getStateMachineVersions.
type GetStateMachineVersionsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id              string `pulumi:"id"`
	StatemachineArn string `pulumi:"statemachineArn"`
	// ARN List identifying the statemachine versions.
	StatemachineVersions []string `pulumi:"statemachineVersions"`
}

func GetStateMachineVersionsOutput(ctx *pulumi.Context, args GetStateMachineVersionsOutputArgs, opts ...pulumi.InvokeOption) GetStateMachineVersionsResultOutput {
	outputResult := pulumix.ApplyErr[*GetStateMachineVersionsArgs](args.ToOutput(), func(plainArgs *GetStateMachineVersionsArgs) (*GetStateMachineVersionsResult, error) {
		return GetStateMachineVersions(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetStateMachineVersionsResultOutput, *GetStateMachineVersionsResult](outputResult)
}

// A collection of arguments for invoking getStateMachineVersions.
type GetStateMachineVersionsOutputArgs struct {
	// ARN of the State Machine.
	StatemachineArn pulumix.Input[string] `pulumi:"statemachineArn"`
}

func (args GetStateMachineVersionsOutputArgs) ToOutput() pulumix.Output[*GetStateMachineVersionsArgs] {
	allArgs := pulumix.All(
		args.StatemachineArn.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetStateMachineVersionsArgs {
		return &GetStateMachineVersionsArgs{
			StatemachineArn: resolvedArgs[0].(string),
		}
	})
}

type GetStateMachineVersionsResultOutput struct{ *pulumi.OutputState }

func (GetStateMachineVersionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStateMachineVersionsResult)(nil)).Elem()
}

func (o GetStateMachineVersionsResultOutput) ToOutput(context.Context) pulumix.Output[*GetStateMachineVersionsResult] {
	return pulumix.Output[*GetStateMachineVersionsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetStateMachineVersionsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetStateMachineVersionsResult](o, func(v *GetStateMachineVersionsResult) string { return v.Id })
}

func (o GetStateMachineVersionsResultOutput) StatemachineArn() pulumix.Output[string] {
	return pulumix.Apply[*GetStateMachineVersionsResult](o, func(v *GetStateMachineVersionsResult) string { return v.StatemachineArn })
}

func (o GetStateMachineVersionsResultOutput) StatemachineVersions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetStateMachineVersionsResult](o, func(v *GetStateMachineVersionsResult) []string { return v.StatemachineVersions })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
