// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Cognito Identity Pool Roles Attachment.
//
// ## Import
//
// Using `pulumi import`, import Cognito Identity Pool Roles Attachment using the Identity Pool ID. For example:
//
// ```sh
//
//	$ pulumi import aws:cognito/identityPoolRoleAttachment:IdentityPoolRoleAttachment example us-west-2:b64805ad-cb56-40ba-9ffc-f5d8207e6d42
//
// ```
type IdentityPoolRoleAttachment struct {
	pulumi.CustomResourceState

	// An identity pool ID in the format `REGION_GUID`.
	IdentityPoolId pulumix.Output[string] `pulumi:"identityPoolId"`
	// A List of Role Mapping.
	RoleMappings pulumix.GArrayOutput[IdentityPoolRoleAttachmentRoleMapping, IdentityPoolRoleAttachmentRoleMappingOutput] `pulumi:"roleMappings"`
	// The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
	Roles pulumix.MapOutput[string] `pulumi:"roles"`
}

// NewIdentityPoolRoleAttachment registers a new resource with the given unique name, arguments, and options.
func NewIdentityPoolRoleAttachment(ctx *pulumi.Context,
	name string, args *IdentityPoolRoleAttachmentArgs, opts ...pulumi.ResourceOption) (*IdentityPoolRoleAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityPoolId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityPoolId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityPoolRoleAttachment
	err := ctx.RegisterResource("aws:cognito/identityPoolRoleAttachment:IdentityPoolRoleAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityPoolRoleAttachment gets an existing IdentityPoolRoleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityPoolRoleAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityPoolRoleAttachmentState, opts ...pulumi.ResourceOption) (*IdentityPoolRoleAttachment, error) {
	var resource IdentityPoolRoleAttachment
	err := ctx.ReadResource("aws:cognito/identityPoolRoleAttachment:IdentityPoolRoleAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityPoolRoleAttachment resources.
type identityPoolRoleAttachmentState struct {
	// An identity pool ID in the format `REGION_GUID`.
	IdentityPoolId *string `pulumi:"identityPoolId"`
	// A List of Role Mapping.
	RoleMappings []IdentityPoolRoleAttachmentRoleMapping `pulumi:"roleMappings"`
	// The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
	Roles map[string]string `pulumi:"roles"`
}

type IdentityPoolRoleAttachmentState struct {
	// An identity pool ID in the format `REGION_GUID`.
	IdentityPoolId pulumix.Input[*string]
	// A List of Role Mapping.
	RoleMappings pulumix.Input[[]*IdentityPoolRoleAttachmentRoleMappingArgs]
	// The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
	Roles pulumix.Input[map[string]string]
}

func (IdentityPoolRoleAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPoolRoleAttachmentState)(nil)).Elem()
}

type identityPoolRoleAttachmentArgs struct {
	// An identity pool ID in the format `REGION_GUID`.
	IdentityPoolId string `pulumi:"identityPoolId"`
	// A List of Role Mapping.
	RoleMappings []IdentityPoolRoleAttachmentRoleMapping `pulumi:"roleMappings"`
	// The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
	Roles map[string]string `pulumi:"roles"`
}

// The set of arguments for constructing a IdentityPoolRoleAttachment resource.
type IdentityPoolRoleAttachmentArgs struct {
	// An identity pool ID in the format `REGION_GUID`.
	IdentityPoolId pulumix.Input[string]
	// A List of Role Mapping.
	RoleMappings pulumix.Input[[]*IdentityPoolRoleAttachmentRoleMappingArgs]
	// The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
	Roles pulumix.Input[map[string]string]
}

func (IdentityPoolRoleAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPoolRoleAttachmentArgs)(nil)).Elem()
}

type IdentityPoolRoleAttachmentOutput struct{ *pulumi.OutputState }

func (IdentityPoolRoleAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPoolRoleAttachment)(nil)).Elem()
}

func (o IdentityPoolRoleAttachmentOutput) ToIdentityPoolRoleAttachmentOutput() IdentityPoolRoleAttachmentOutput {
	return o
}

func (o IdentityPoolRoleAttachmentOutput) ToIdentityPoolRoleAttachmentOutputWithContext(ctx context.Context) IdentityPoolRoleAttachmentOutput {
	return o
}

func (o IdentityPoolRoleAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityPoolRoleAttachment] {
	return pulumix.Output[IdentityPoolRoleAttachment]{
		OutputState: o.OutputState,
	}
}

// An identity pool ID in the format `REGION_GUID`.
func (o IdentityPoolRoleAttachmentOutput) IdentityPoolId() pulumix.Output[string] {
	value := pulumix.Apply[IdentityPoolRoleAttachment](o, func(v IdentityPoolRoleAttachment) pulumix.Output[string] { return v.IdentityPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A List of Role Mapping.
func (o IdentityPoolRoleAttachmentOutput) RoleMappings() pulumix.GArrayOutput[IdentityPoolRoleAttachmentRoleMapping, IdentityPoolRoleAttachmentRoleMappingOutput] {
	value := pulumix.Apply[IdentityPoolRoleAttachment](o, func(v IdentityPoolRoleAttachment) pulumix.GArrayOutput[IdentityPoolRoleAttachmentRoleMapping, IdentityPoolRoleAttachmentRoleMappingOutput] {
		return v.RoleMappings
	})
	unwrapped := pulumix.Flatten[[]IdentityPoolRoleAttachmentRoleMapping, pulumix.GArrayOutput[IdentityPoolRoleAttachmentRoleMapping, IdentityPoolRoleAttachmentRoleMappingOutput]](value)
	return pulumix.GArrayOutput[IdentityPoolRoleAttachmentRoleMapping, IdentityPoolRoleAttachmentRoleMappingOutput]{OutputState: unwrapped.OutputState}
}

// The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
func (o IdentityPoolRoleAttachmentOutput) Roles() pulumix.MapOutput[string] {
	value := pulumix.Apply[IdentityPoolRoleAttachment](o, func(v IdentityPoolRoleAttachment) pulumix.MapOutput[string] { return v.Roles })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(IdentityPoolRoleAttachmentOutput{})
}
