// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage an [AWS Organizations Delegated Administrator](https://docs.aws.amazon.com/organizations/latest/APIReference/API_RegisterDelegatedAdministrator.html).
type DelegatedAdministrator struct {
	pulumi.CustomResourceState

	// The account ID number of the member account in the organization to register as a delegated administrator.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// The Amazon Resource Name (ARN) of the delegated administrator's account.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The date when the account was made a delegated administrator.
	DelegationEnabledDate pulumix.Output[string] `pulumi:"delegationEnabledDate"`
	// The email address that is associated with the delegated administrator's AWS account.
	Email pulumix.Output[string] `pulumi:"email"`
	// The method by which the delegated administrator's account joined the organization.
	JoinedMethod pulumix.Output[string] `pulumi:"joinedMethod"`
	// The date when the delegated administrator's account became a part of the organization.
	JoinedTimestamp pulumix.Output[string] `pulumi:"joinedTimestamp"`
	// The friendly name of the delegated administrator's account.
	Name pulumix.Output[string] `pulumi:"name"`
	// The service principal of the AWS service for which you want to make the member account a delegated administrator.
	ServicePrincipal pulumix.Output[string] `pulumi:"servicePrincipal"`
	// The status of the delegated administrator's account in the organization.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewDelegatedAdministrator registers a new resource with the given unique name, arguments, and options.
func NewDelegatedAdministrator(ctx *pulumi.Context,
	name string, args *DelegatedAdministratorArgs, opts ...pulumi.ResourceOption) (*DelegatedAdministrator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.ServicePrincipal == nil {
		return nil, errors.New("invalid value for required argument 'ServicePrincipal'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DelegatedAdministrator
	err := ctx.RegisterResource("aws:organizations/delegatedAdministrator:DelegatedAdministrator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDelegatedAdministrator gets an existing DelegatedAdministrator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDelegatedAdministrator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DelegatedAdministratorState, opts ...pulumi.ResourceOption) (*DelegatedAdministrator, error) {
	var resource DelegatedAdministrator
	err := ctx.ReadResource("aws:organizations/delegatedAdministrator:DelegatedAdministrator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DelegatedAdministrator resources.
type delegatedAdministratorState struct {
	// The account ID number of the member account in the organization to register as a delegated administrator.
	AccountId *string `pulumi:"accountId"`
	// The Amazon Resource Name (ARN) of the delegated administrator's account.
	Arn *string `pulumi:"arn"`
	// The date when the account was made a delegated administrator.
	DelegationEnabledDate *string `pulumi:"delegationEnabledDate"`
	// The email address that is associated with the delegated administrator's AWS account.
	Email *string `pulumi:"email"`
	// The method by which the delegated administrator's account joined the organization.
	JoinedMethod *string `pulumi:"joinedMethod"`
	// The date when the delegated administrator's account became a part of the organization.
	JoinedTimestamp *string `pulumi:"joinedTimestamp"`
	// The friendly name of the delegated administrator's account.
	Name *string `pulumi:"name"`
	// The service principal of the AWS service for which you want to make the member account a delegated administrator.
	ServicePrincipal *string `pulumi:"servicePrincipal"`
	// The status of the delegated administrator's account in the organization.
	Status *string `pulumi:"status"`
}

type DelegatedAdministratorState struct {
	// The account ID number of the member account in the organization to register as a delegated administrator.
	AccountId pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the delegated administrator's account.
	Arn pulumix.Input[*string]
	// The date when the account was made a delegated administrator.
	DelegationEnabledDate pulumix.Input[*string]
	// The email address that is associated with the delegated administrator's AWS account.
	Email pulumix.Input[*string]
	// The method by which the delegated administrator's account joined the organization.
	JoinedMethod pulumix.Input[*string]
	// The date when the delegated administrator's account became a part of the organization.
	JoinedTimestamp pulumix.Input[*string]
	// The friendly name of the delegated administrator's account.
	Name pulumix.Input[*string]
	// The service principal of the AWS service for which you want to make the member account a delegated administrator.
	ServicePrincipal pulumix.Input[*string]
	// The status of the delegated administrator's account in the organization.
	Status pulumix.Input[*string]
}

func (DelegatedAdministratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*delegatedAdministratorState)(nil)).Elem()
}

type delegatedAdministratorArgs struct {
	// The account ID number of the member account in the organization to register as a delegated administrator.
	AccountId string `pulumi:"accountId"`
	// The service principal of the AWS service for which you want to make the member account a delegated administrator.
	ServicePrincipal string `pulumi:"servicePrincipal"`
}

// The set of arguments for constructing a DelegatedAdministrator resource.
type DelegatedAdministratorArgs struct {
	// The account ID number of the member account in the organization to register as a delegated administrator.
	AccountId pulumix.Input[string]
	// The service principal of the AWS service for which you want to make the member account a delegated administrator.
	ServicePrincipal pulumix.Input[string]
}

func (DelegatedAdministratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*delegatedAdministratorArgs)(nil)).Elem()
}

type DelegatedAdministratorOutput struct{ *pulumi.OutputState }

func (DelegatedAdministratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedAdministrator)(nil)).Elem()
}

func (o DelegatedAdministratorOutput) ToDelegatedAdministratorOutput() DelegatedAdministratorOutput {
	return o
}

func (o DelegatedAdministratorOutput) ToDelegatedAdministratorOutputWithContext(ctx context.Context) DelegatedAdministratorOutput {
	return o
}

func (o DelegatedAdministratorOutput) ToOutput(ctx context.Context) pulumix.Output[DelegatedAdministrator] {
	return pulumix.Output[DelegatedAdministrator]{
		OutputState: o.OutputState,
	}
}

// The account ID number of the member account in the organization to register as a delegated administrator.
func (o DelegatedAdministratorOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdministrator](o, func(v DelegatedAdministrator) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the delegated administrator's account.
func (o DelegatedAdministratorOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdministrator](o, func(v DelegatedAdministrator) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date when the account was made a delegated administrator.
func (o DelegatedAdministratorOutput) DelegationEnabledDate() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdministrator](o, func(v DelegatedAdministrator) pulumix.Output[string] { return v.DelegationEnabledDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The email address that is associated with the delegated administrator's AWS account.
func (o DelegatedAdministratorOutput) Email() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdministrator](o, func(v DelegatedAdministrator) pulumix.Output[string] { return v.Email })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The method by which the delegated administrator's account joined the organization.
func (o DelegatedAdministratorOutput) JoinedMethod() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdministrator](o, func(v DelegatedAdministrator) pulumix.Output[string] { return v.JoinedMethod })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date when the delegated administrator's account became a part of the organization.
func (o DelegatedAdministratorOutput) JoinedTimestamp() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdministrator](o, func(v DelegatedAdministrator) pulumix.Output[string] { return v.JoinedTimestamp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The friendly name of the delegated administrator's account.
func (o DelegatedAdministratorOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdministrator](o, func(v DelegatedAdministrator) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The service principal of the AWS service for which you want to make the member account a delegated administrator.
func (o DelegatedAdministratorOutput) ServicePrincipal() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdministrator](o, func(v DelegatedAdministrator) pulumix.Output[string] { return v.ServicePrincipal })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status of the delegated administrator's account in the organization.
func (o DelegatedAdministratorOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdministrator](o, func(v DelegatedAdministrator) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DelegatedAdministratorOutput{})
}
