// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ClusterBrokerNodeGroupInfo struct {
	// The distribution of broker nodes across availability zones ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-model-brokerazdistribution)). Currently the only valid value is `DEFAULT`.
	AzDistribution *string `pulumi:"azDistribution"`
	// A list of subnets to connect to in client VPC ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-prop-brokernodegroupinfo-clientsubnets)).
	ClientSubnets []string `pulumi:"clientSubnets"`
	// Information about the cluster access configuration. See below. For security reasons, you can't turn on public access while creating an MSK cluster. However, you can update an existing cluster to make it publicly accessible. You can also create a new cluster and then update it to make it publicly accessible ([documentation](https://docs.aws.amazon.com/msk/latest/developerguide/public-access.html)).
	ConnectivityInfo *ClusterBrokerNodeGroupInfoConnectivityInfo `pulumi:"connectivityInfo"`
	// Specify the instance type to use for the kafka brokersE.g., kafka.m5.large. ([Pricing info](https://aws.amazon.com/msk/pricing/))
	InstanceType string `pulumi:"instanceType"`
	// A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.
	SecurityGroups []string `pulumi:"securityGroups"`
	// A block that contains information about storage volumes attached to MSK broker nodes. See below.
	StorageInfo *ClusterBrokerNodeGroupInfoStorageInfo `pulumi:"storageInfo"`
}

type ClusterBrokerNodeGroupInfoArgs struct {
	// The distribution of broker nodes across availability zones ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-model-brokerazdistribution)). Currently the only valid value is `DEFAULT`.
	AzDistribution pulumix.Input[*string] `pulumi:"azDistribution"`
	// A list of subnets to connect to in client VPC ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-prop-brokernodegroupinfo-clientsubnets)).
	ClientSubnets pulumix.Input[[]string] `pulumi:"clientSubnets"`
	// Information about the cluster access configuration. See below. For security reasons, you can't turn on public access while creating an MSK cluster. However, you can update an existing cluster to make it publicly accessible. You can also create a new cluster and then update it to make it publicly accessible ([documentation](https://docs.aws.amazon.com/msk/latest/developerguide/public-access.html)).
	ConnectivityInfo pulumix.Input[*ClusterBrokerNodeGroupInfoConnectivityInfoArgs] `pulumi:"connectivityInfo"`
	// Specify the instance type to use for the kafka brokersE.g., kafka.m5.large. ([Pricing info](https://aws.amazon.com/msk/pricing/))
	InstanceType pulumix.Input[string] `pulumi:"instanceType"`
	// A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.
	SecurityGroups pulumix.Input[[]string] `pulumi:"securityGroups"`
	// A block that contains information about storage volumes attached to MSK broker nodes. See below.
	StorageInfo pulumix.Input[*ClusterBrokerNodeGroupInfoStorageInfoArgs] `pulumi:"storageInfo"`
}

func (ClusterBrokerNodeGroupInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfo)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoArgs) ToClusterBrokerNodeGroupInfoOutput() ClusterBrokerNodeGroupInfoOutput {
	return i.ToClusterBrokerNodeGroupInfoOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoArgs) ToClusterBrokerNodeGroupInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoOutput)
}

func (i *ClusterBrokerNodeGroupInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerNodeGroupInfoArgs] {
	return pulumix.Val(i)
}

type ClusterBrokerNodeGroupInfoOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfo)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoOutput) ToClusterBrokerNodeGroupInfoOutput() ClusterBrokerNodeGroupInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoOutput) ToClusterBrokerNodeGroupInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfo] {
	return pulumix.Output[ClusterBrokerNodeGroupInfo]{
		OutputState: o.OutputState,
	}
}

// The distribution of broker nodes across availability zones ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-model-brokerazdistribution)). Currently the only valid value is `DEFAULT`.
func (o ClusterBrokerNodeGroupInfoOutput) AzDistribution() pulumix.Output[*string] {
	return pulumix.Apply[ClusterBrokerNodeGroupInfo](o, func(v ClusterBrokerNodeGroupInfo) *string { return v.AzDistribution })
}

// A list of subnets to connect to in client VPC ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-prop-brokernodegroupinfo-clientsubnets)).
func (o ClusterBrokerNodeGroupInfoOutput) ClientSubnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterBrokerNodeGroupInfo](o, func(v ClusterBrokerNodeGroupInfo) []string { return v.ClientSubnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Information about the cluster access configuration. See below. For security reasons, you can't turn on public access while creating an MSK cluster. However, you can update an existing cluster to make it publicly accessible. You can also create a new cluster and then update it to make it publicly accessible ([documentation](https://docs.aws.amazon.com/msk/latest/developerguide/public-access.html)).
func (o ClusterBrokerNodeGroupInfoOutput) ConnectivityInfo() pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoConnectivityInfo, ClusterBrokerNodeGroupInfoConnectivityInfoOutput] {
	value := pulumix.Apply[ClusterBrokerNodeGroupInfo](o, func(v ClusterBrokerNodeGroupInfo) *ClusterBrokerNodeGroupInfoConnectivityInfo {
		return v.ConnectivityInfo
	})
	return pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoConnectivityInfo, ClusterBrokerNodeGroupInfoConnectivityInfoOutput]{OutputState: value.OutputState}
}

// Specify the instance type to use for the kafka brokersE.g., kafka.m5.large. ([Pricing info](https://aws.amazon.com/msk/pricing/))
func (o ClusterBrokerNodeGroupInfoOutput) InstanceType() pulumix.Output[string] {
	return pulumix.Apply[ClusterBrokerNodeGroupInfo](o, func(v ClusterBrokerNodeGroupInfo) string { return v.InstanceType })
}

// A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.
func (o ClusterBrokerNodeGroupInfoOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterBrokerNodeGroupInfo](o, func(v ClusterBrokerNodeGroupInfo) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A block that contains information about storage volumes attached to MSK broker nodes. See below.
func (o ClusterBrokerNodeGroupInfoOutput) StorageInfo() pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoStorageInfo, ClusterBrokerNodeGroupInfoStorageInfoOutput] {
	value := pulumix.Apply[ClusterBrokerNodeGroupInfo](o, func(v ClusterBrokerNodeGroupInfo) *ClusterBrokerNodeGroupInfoStorageInfo { return v.StorageInfo })
	return pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoStorageInfo, ClusterBrokerNodeGroupInfoStorageInfoOutput]{OutputState: value.OutputState}
}

type ClusterBrokerNodeGroupInfoConnectivityInfo struct {
	// Access control settings for brokers. See below.
	PublicAccess *ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess `pulumi:"publicAccess"`
	// VPC connectivity access control for brokers. See below.
	VpcConnectivity *ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity `pulumi:"vpcConnectivity"`
}

type ClusterBrokerNodeGroupInfoConnectivityInfoArgs struct {
	// Access control settings for brokers. See below.
	PublicAccess pulumix.Input[*ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessArgs] `pulumi:"publicAccess"`
	// VPC connectivity access control for brokers. See below.
	VpcConnectivity pulumix.Input[*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityArgs] `pulumi:"vpcConnectivity"`
}

func (ClusterBrokerNodeGroupInfoConnectivityInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoConnectivityInfo)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoConnectivityInfoArgs) ToClusterBrokerNodeGroupInfoConnectivityInfoOutput() ClusterBrokerNodeGroupInfoConnectivityInfoOutput {
	return i.ToClusterBrokerNodeGroupInfoConnectivityInfoOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoConnectivityInfoArgs) ToClusterBrokerNodeGroupInfoConnectivityInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoConnectivityInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoConnectivityInfoOutput)
}

func (i *ClusterBrokerNodeGroupInfoConnectivityInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerNodeGroupInfoConnectivityInfoArgs] {
	return pulumix.Val(i)
}

type ClusterBrokerNodeGroupInfoConnectivityInfoOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoConnectivityInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoConnectivityInfo)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoOutput) ToClusterBrokerNodeGroupInfoConnectivityInfoOutput() ClusterBrokerNodeGroupInfoConnectivityInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoOutput) ToClusterBrokerNodeGroupInfoConnectivityInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoConnectivityInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfoConnectivityInfo] {
	return pulumix.Output[ClusterBrokerNodeGroupInfoConnectivityInfo]{
		OutputState: o.OutputState,
	}
}

// Access control settings for brokers. See below.
func (o ClusterBrokerNodeGroupInfoConnectivityInfoOutput) PublicAccess() pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess, ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput] {
	value := pulumix.Apply[ClusterBrokerNodeGroupInfoConnectivityInfo](o, func(v ClusterBrokerNodeGroupInfoConnectivityInfo) *ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess {
		return v.PublicAccess
	})
	return pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess, ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput]{OutputState: value.OutputState}
}

// VPC connectivity access control for brokers. See below.
func (o ClusterBrokerNodeGroupInfoConnectivityInfoOutput) VpcConnectivity() pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity, ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput] {
	value := pulumix.Apply[ClusterBrokerNodeGroupInfoConnectivityInfo](o, func(v ClusterBrokerNodeGroupInfoConnectivityInfo) *ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity {
		return v.VpcConnectivity
	})
	return pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity, ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput]{OutputState: value.OutputState}
}

type ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess struct {
	// Public access type. Valid values: `DISABLED`, `SERVICE_PROVIDED_EIPS`.
	Type *string `pulumi:"type"`
}

type ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessArgs struct {
	// Public access type. Valid values: `DISABLED`, `SERVICE_PROVIDED_EIPS`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessArgs) ToClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput() ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput {
	return i.ToClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessArgs) ToClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput)
}

func (i *ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessArgs] {
	return pulumix.Val(i)
}

type ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput) ToClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput() ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput) ToClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess] {
	return pulumix.Output[ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess]{
		OutputState: o.OutputState,
	}
}

// Public access type. Valid values: `DISABLED`, `SERVICE_PROVIDED_EIPS`.
func (o ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess](o, func(v ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccess) *string { return v.Type })
}

type ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity struct {
	// Configuration block for specifying a client authentication. See below.
	ClientAuthentication *ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication `pulumi:"clientAuthentication"`
}

type ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityArgs struct {
	// Configuration block for specifying a client authentication. See below.
	ClientAuthentication pulumix.Input[*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationArgs] `pulumi:"clientAuthentication"`
}

func (ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityArgs) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput() ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput {
	return i.ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityArgs) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput)
}

func (i *ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityArgs] {
	return pulumix.Val(i)
}

type ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput() ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity] {
	return pulumix.Output[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity]{
		OutputState: o.OutputState,
	}
}

// Configuration block for specifying a client authentication. See below.
func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput) ClientAuthentication() pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication, ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput] {
	value := pulumix.Apply[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity](o, func(v ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivity) *ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication {
		return v.ClientAuthentication
	})
	return pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication, ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput]{OutputState: value.OutputState}
}

type ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication struct {
	// Configuration block for specifying SASL client authentication. See below.
	Sasl *ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl `pulumi:"sasl"`
	// Configuration block for specifying TLS client authentication. See below.
	Tls *bool `pulumi:"tls"`
}

type ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationArgs struct {
	// Configuration block for specifying SASL client authentication. See below.
	Sasl pulumix.Input[*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslArgs] `pulumi:"sasl"`
	// Configuration block for specifying TLS client authentication. See below.
	Tls pulumix.Input[*bool] `pulumi:"tls"`
}

func (ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationArgs) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput() ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput {
	return i.ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationArgs) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput)
}

func (i *ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationArgs] {
	return pulumix.Val(i)
}

type ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput() ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication] {
	return pulumix.Output[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication]{
		OutputState: o.OutputState,
	}
}

// Configuration block for specifying SASL client authentication. See below.
func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput) Sasl() pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl, ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput] {
	value := pulumix.Apply[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication](o, func(v ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication) *ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl {
		return v.Sasl
	})
	return pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl, ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput]{OutputState: value.OutputState}
}

// Configuration block for specifying TLS client authentication. See below.
func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput) Tls() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication](o, func(v ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthentication) *bool {
		return v.Tls
	})
}

type ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl struct {
	// Enables SASL/IAM authentication for VPC connectivity.
	Iam *bool `pulumi:"iam"`
	// Enables SASL/SCRAM authentication for VPC connectivity.
	Scram *bool `pulumi:"scram"`
}

type ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslArgs struct {
	// Enables SASL/IAM authentication for VPC connectivity.
	Iam pulumix.Input[*bool] `pulumi:"iam"`
	// Enables SASL/SCRAM authentication for VPC connectivity.
	Scram pulumix.Input[*bool] `pulumi:"scram"`
}

func (ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslArgs) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput() ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput {
	return i.ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslArgs) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput)
}

func (i *ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslArgs] {
	return pulumix.Val(i)
}

type ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput() ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput) ToClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl] {
	return pulumix.Output[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl]{
		OutputState: o.OutputState,
	}
}

// Enables SASL/IAM authentication for VPC connectivity.
func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput) Iam() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl](o, func(v ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl) *bool {
		return v.Iam
	})
}

// Enables SASL/SCRAM authentication for VPC connectivity.
func (o ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput) Scram() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl](o, func(v ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSasl) *bool {
		return v.Scram
	})
}

type ClusterBrokerNodeGroupInfoStorageInfo struct {
	// A block that contains EBS volume information. See below.
	EbsStorageInfo *ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo `pulumi:"ebsStorageInfo"`
}

type ClusterBrokerNodeGroupInfoStorageInfoArgs struct {
	// A block that contains EBS volume information. See below.
	EbsStorageInfo pulumix.Input[*ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs] `pulumi:"ebsStorageInfo"`
}

func (ClusterBrokerNodeGroupInfoStorageInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoStorageInfo)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoStorageInfoArgs) ToClusterBrokerNodeGroupInfoStorageInfoOutput() ClusterBrokerNodeGroupInfoStorageInfoOutput {
	return i.ToClusterBrokerNodeGroupInfoStorageInfoOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoStorageInfoArgs) ToClusterBrokerNodeGroupInfoStorageInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoStorageInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoStorageInfoOutput)
}

func (i *ClusterBrokerNodeGroupInfoStorageInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerNodeGroupInfoStorageInfoArgs] {
	return pulumix.Val(i)
}

type ClusterBrokerNodeGroupInfoStorageInfoOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoStorageInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoStorageInfo)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoStorageInfoOutput) ToClusterBrokerNodeGroupInfoStorageInfoOutput() ClusterBrokerNodeGroupInfoStorageInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoStorageInfoOutput) ToClusterBrokerNodeGroupInfoStorageInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoStorageInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoStorageInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfoStorageInfo] {
	return pulumix.Output[ClusterBrokerNodeGroupInfoStorageInfo]{
		OutputState: o.OutputState,
	}
}

// A block that contains EBS volume information. See below.
func (o ClusterBrokerNodeGroupInfoStorageInfoOutput) EbsStorageInfo() pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo, ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput] {
	value := pulumix.Apply[ClusterBrokerNodeGroupInfoStorageInfo](o, func(v ClusterBrokerNodeGroupInfoStorageInfo) *ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo {
		return v.EbsStorageInfo
	})
	return pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo, ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput]{OutputState: value.OutputState}
}

type ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo struct {
	// A block that contains EBS volume provisioned throughput information. To provision storage throughput, you must choose broker type kafka.m5.4xlarge or larger. See below.
	ProvisionedThroughput *ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput `pulumi:"provisionedThroughput"`
	// The size in GiB of the EBS volume for the data drive on each broker node. Minimum value of `1` and maximum value of `16384`.
	VolumeSize *int `pulumi:"volumeSize"`
}

type ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs struct {
	// A block that contains EBS volume provisioned throughput information. To provision storage throughput, you must choose broker type kafka.m5.4xlarge or larger. See below.
	ProvisionedThroughput pulumix.Input[*ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs] `pulumi:"provisionedThroughput"`
	// The size in GiB of the EBS volume for the data drive on each broker node. Minimum value of `1` and maximum value of `16384`.
	VolumeSize pulumix.Input[*int] `pulumi:"volumeSize"`
}

func (ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs) ToClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput() ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput {
	return i.ToClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs) ToClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput)
}

func (i *ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoArgs] {
	return pulumix.Val(i)
}

type ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput) ToClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput() ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput) ToClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo] {
	return pulumix.Output[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo]{
		OutputState: o.OutputState,
	}
}

// A block that contains EBS volume provisioned throughput information. To provision storage throughput, you must choose broker type kafka.m5.4xlarge or larger. See below.
func (o ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput) ProvisionedThroughput() pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput, ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput] {
	value := pulumix.Apply[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo](o, func(v ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo) *ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput {
		return v.ProvisionedThroughput
	})
	return pulumix.GPtrOutput[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput, ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput]{OutputState: value.OutputState}
}

// The size in GiB of the EBS volume for the data drive on each broker node. Minimum value of `1` and maximum value of `16384`.
func (o ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput) VolumeSize() pulumix.Output[*int] {
	return pulumix.Apply[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo](o, func(v ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfo) *int { return v.VolumeSize })
}

type ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput struct {
	// Controls whether provisioned throughput is enabled or not. Default value: `false`.
	Enabled *bool `pulumi:"enabled"`
	// Throughput value of the EBS volumes for the data drive on each kafka broker node in MiB per second. The minimum value is `250`. The maximum value varies between broker type. You can refer to the valid values for the maximum volume throughput at the following [documentation on throughput bottlenecks](https://docs.aws.amazon.com/msk/latest/developerguide/msk-provision-throughput.html#throughput-bottlenecks)
	VolumeThroughput *int `pulumi:"volumeThroughput"`
}

type ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs struct {
	// Controls whether provisioned throughput is enabled or not. Default value: `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Throughput value of the EBS volumes for the data drive on each kafka broker node in MiB per second. The minimum value is `250`. The maximum value varies between broker type. You can refer to the valid values for the maximum volume throughput at the following [documentation on throughput bottlenecks](https://docs.aws.amazon.com/msk/latest/developerguide/msk-provision-throughput.html#throughput-bottlenecks)
	VolumeThroughput pulumix.Input[*int] `pulumi:"volumeThroughput"`
}

func (ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs) ToClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput() ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput {
	return i.ToClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs) ToClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput)
}

func (i *ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputArgs] {
	return pulumix.Val(i)
}

type ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput) ToClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput() ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput) ToClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput] {
	return pulumix.Output[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput]{
		OutputState: o.OutputState,
	}
}

// Controls whether provisioned throughput is enabled or not. Default value: `false`.
func (o ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput](o, func(v ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput) *bool {
		return v.Enabled
	})
}

// Throughput value of the EBS volumes for the data drive on each kafka broker node in MiB per second. The minimum value is `250`. The maximum value varies between broker type. You can refer to the valid values for the maximum volume throughput at the following [documentation on throughput bottlenecks](https://docs.aws.amazon.com/msk/latest/developerguide/msk-provision-throughput.html#throughput-bottlenecks)
func (o ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput) VolumeThroughput() pulumix.Output[*int] {
	return pulumix.Apply[ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput](o, func(v ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput) *int {
		return v.VolumeThroughput
	})
}

type ClusterClientAuthentication struct {
	// Configuration block for specifying SASL client authentication. See below.
	Sasl *ClusterClientAuthenticationSasl `pulumi:"sasl"`
	// Configuration block for specifying TLS client authentication. See below.
	Tls *ClusterClientAuthenticationTls `pulumi:"tls"`
	// Enables unauthenticated access.
	Unauthenticated *bool `pulumi:"unauthenticated"`
}

type ClusterClientAuthenticationArgs struct {
	// Configuration block for specifying SASL client authentication. See below.
	Sasl pulumix.Input[*ClusterClientAuthenticationSaslArgs] `pulumi:"sasl"`
	// Configuration block for specifying TLS client authentication. See below.
	Tls pulumix.Input[*ClusterClientAuthenticationTlsArgs] `pulumi:"tls"`
	// Enables unauthenticated access.
	Unauthenticated pulumix.Input[*bool] `pulumi:"unauthenticated"`
}

func (ClusterClientAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthentication)(nil)).Elem()
}

func (i ClusterClientAuthenticationArgs) ToClusterClientAuthenticationOutput() ClusterClientAuthenticationOutput {
	return i.ToClusterClientAuthenticationOutputWithContext(context.Background())
}

func (i ClusterClientAuthenticationArgs) ToClusterClientAuthenticationOutputWithContext(ctx context.Context) ClusterClientAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationOutput)
}

func (i *ClusterClientAuthenticationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterClientAuthenticationArgs] {
	return pulumix.Val(i)
}

type ClusterClientAuthenticationOutput struct{ *pulumi.OutputState }

func (ClusterClientAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthentication)(nil)).Elem()
}

func (o ClusterClientAuthenticationOutput) ToClusterClientAuthenticationOutput() ClusterClientAuthenticationOutput {
	return o
}

func (o ClusterClientAuthenticationOutput) ToClusterClientAuthenticationOutputWithContext(ctx context.Context) ClusterClientAuthenticationOutput {
	return o
}

func (o ClusterClientAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterClientAuthentication] {
	return pulumix.Output[ClusterClientAuthentication]{
		OutputState: o.OutputState,
	}
}

// Configuration block for specifying SASL client authentication. See below.
func (o ClusterClientAuthenticationOutput) Sasl() pulumix.GPtrOutput[ClusterClientAuthenticationSasl, ClusterClientAuthenticationSaslOutput] {
	value := pulumix.Apply[ClusterClientAuthentication](o, func(v ClusterClientAuthentication) *ClusterClientAuthenticationSasl { return v.Sasl })
	return pulumix.GPtrOutput[ClusterClientAuthenticationSasl, ClusterClientAuthenticationSaslOutput]{OutputState: value.OutputState}
}

// Configuration block for specifying TLS client authentication. See below.
func (o ClusterClientAuthenticationOutput) Tls() pulumix.GPtrOutput[ClusterClientAuthenticationTls, ClusterClientAuthenticationTlsOutput] {
	value := pulumix.Apply[ClusterClientAuthentication](o, func(v ClusterClientAuthentication) *ClusterClientAuthenticationTls { return v.Tls })
	return pulumix.GPtrOutput[ClusterClientAuthenticationTls, ClusterClientAuthenticationTlsOutput]{OutputState: value.OutputState}
}

// Enables unauthenticated access.
func (o ClusterClientAuthenticationOutput) Unauthenticated() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterClientAuthentication](o, func(v ClusterClientAuthentication) *bool { return v.Unauthenticated })
}

type ClusterClientAuthenticationSasl struct {
	// Enables SASL/IAM authentication for VPC connectivity.
	Iam *bool `pulumi:"iam"`
	// Enables SASL/SCRAM authentication for VPC connectivity.
	Scram *bool `pulumi:"scram"`
}

type ClusterClientAuthenticationSaslArgs struct {
	// Enables SASL/IAM authentication for VPC connectivity.
	Iam pulumix.Input[*bool] `pulumi:"iam"`
	// Enables SASL/SCRAM authentication for VPC connectivity.
	Scram pulumix.Input[*bool] `pulumi:"scram"`
}

func (ClusterClientAuthenticationSaslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthenticationSasl)(nil)).Elem()
}

func (i ClusterClientAuthenticationSaslArgs) ToClusterClientAuthenticationSaslOutput() ClusterClientAuthenticationSaslOutput {
	return i.ToClusterClientAuthenticationSaslOutputWithContext(context.Background())
}

func (i ClusterClientAuthenticationSaslArgs) ToClusterClientAuthenticationSaslOutputWithContext(ctx context.Context) ClusterClientAuthenticationSaslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationSaslOutput)
}

func (i *ClusterClientAuthenticationSaslArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterClientAuthenticationSaslArgs] {
	return pulumix.Val(i)
}

type ClusterClientAuthenticationSaslOutput struct{ *pulumi.OutputState }

func (ClusterClientAuthenticationSaslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthenticationSasl)(nil)).Elem()
}

func (o ClusterClientAuthenticationSaslOutput) ToClusterClientAuthenticationSaslOutput() ClusterClientAuthenticationSaslOutput {
	return o
}

func (o ClusterClientAuthenticationSaslOutput) ToClusterClientAuthenticationSaslOutputWithContext(ctx context.Context) ClusterClientAuthenticationSaslOutput {
	return o
}

func (o ClusterClientAuthenticationSaslOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterClientAuthenticationSasl] {
	return pulumix.Output[ClusterClientAuthenticationSasl]{
		OutputState: o.OutputState,
	}
}

// Enables SASL/IAM authentication for VPC connectivity.
func (o ClusterClientAuthenticationSaslOutput) Iam() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterClientAuthenticationSasl](o, func(v ClusterClientAuthenticationSasl) *bool { return v.Iam })
}

// Enables SASL/SCRAM authentication for VPC connectivity.
func (o ClusterClientAuthenticationSaslOutput) Scram() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterClientAuthenticationSasl](o, func(v ClusterClientAuthenticationSasl) *bool { return v.Scram })
}

type ClusterClientAuthenticationTls struct {
	// List of ACM Certificate Authority Amazon Resource Names (ARNs).
	CertificateAuthorityArns []string `pulumi:"certificateAuthorityArns"`
}

type ClusterClientAuthenticationTlsArgs struct {
	// List of ACM Certificate Authority Amazon Resource Names (ARNs).
	CertificateAuthorityArns pulumix.Input[[]string] `pulumi:"certificateAuthorityArns"`
}

func (ClusterClientAuthenticationTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthenticationTls)(nil)).Elem()
}

func (i ClusterClientAuthenticationTlsArgs) ToClusterClientAuthenticationTlsOutput() ClusterClientAuthenticationTlsOutput {
	return i.ToClusterClientAuthenticationTlsOutputWithContext(context.Background())
}

func (i ClusterClientAuthenticationTlsArgs) ToClusterClientAuthenticationTlsOutputWithContext(ctx context.Context) ClusterClientAuthenticationTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationTlsOutput)
}

func (i *ClusterClientAuthenticationTlsArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterClientAuthenticationTlsArgs] {
	return pulumix.Val(i)
}

type ClusterClientAuthenticationTlsOutput struct{ *pulumi.OutputState }

func (ClusterClientAuthenticationTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthenticationTls)(nil)).Elem()
}

func (o ClusterClientAuthenticationTlsOutput) ToClusterClientAuthenticationTlsOutput() ClusterClientAuthenticationTlsOutput {
	return o
}

func (o ClusterClientAuthenticationTlsOutput) ToClusterClientAuthenticationTlsOutputWithContext(ctx context.Context) ClusterClientAuthenticationTlsOutput {
	return o
}

func (o ClusterClientAuthenticationTlsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterClientAuthenticationTls] {
	return pulumix.Output[ClusterClientAuthenticationTls]{
		OutputState: o.OutputState,
	}
}

// List of ACM Certificate Authority Amazon Resource Names (ARNs).
func (o ClusterClientAuthenticationTlsOutput) CertificateAuthorityArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterClientAuthenticationTls](o, func(v ClusterClientAuthenticationTls) []string { return v.CertificateAuthorityArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ClusterConfigurationInfo struct {
	// Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
	Arn string `pulumi:"arn"`
	// Revision of the MSK Configuration to use in the cluster.
	Revision int `pulumi:"revision"`
}

type ClusterConfigurationInfoArgs struct {
	// Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Revision of the MSK Configuration to use in the cluster.
	Revision pulumix.Input[int] `pulumi:"revision"`
}

func (ClusterConfigurationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationInfo)(nil)).Elem()
}

func (i ClusterConfigurationInfoArgs) ToClusterConfigurationInfoOutput() ClusterConfigurationInfoOutput {
	return i.ToClusterConfigurationInfoOutputWithContext(context.Background())
}

func (i ClusterConfigurationInfoArgs) ToClusterConfigurationInfoOutputWithContext(ctx context.Context) ClusterConfigurationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationInfoOutput)
}

func (i *ClusterConfigurationInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterConfigurationInfoArgs] {
	return pulumix.Val(i)
}

type ClusterConfigurationInfoOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationInfo)(nil)).Elem()
}

func (o ClusterConfigurationInfoOutput) ToClusterConfigurationInfoOutput() ClusterConfigurationInfoOutput {
	return o
}

func (o ClusterConfigurationInfoOutput) ToClusterConfigurationInfoOutputWithContext(ctx context.Context) ClusterConfigurationInfoOutput {
	return o
}

func (o ClusterConfigurationInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterConfigurationInfo] {
	return pulumix.Output[ClusterConfigurationInfo]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
func (o ClusterConfigurationInfoOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[ClusterConfigurationInfo](o, func(v ClusterConfigurationInfo) string { return v.Arn })
}

// Revision of the MSK Configuration to use in the cluster.
func (o ClusterConfigurationInfoOutput) Revision() pulumix.Output[int] {
	return pulumix.Apply[ClusterConfigurationInfo](o, func(v ClusterConfigurationInfo) int { return v.Revision })
}

type ClusterEncryptionInfo struct {
	// You may specify a KMS key short ID or ARN (it will always output an ARN) to use for encrypting your data at rest.  If no key is specified, an AWS managed KMS ('aws/msk' managed service) key will be used for encrypting the data at rest.
	EncryptionAtRestKmsKeyArn *string `pulumi:"encryptionAtRestKmsKeyArn"`
	// Configuration block to specify encryption in transit. See below.
	EncryptionInTransit *ClusterEncryptionInfoEncryptionInTransit `pulumi:"encryptionInTransit"`
}

type ClusterEncryptionInfoArgs struct {
	// You may specify a KMS key short ID or ARN (it will always output an ARN) to use for encrypting your data at rest.  If no key is specified, an AWS managed KMS ('aws/msk' managed service) key will be used for encrypting the data at rest.
	EncryptionAtRestKmsKeyArn pulumix.Input[*string] `pulumi:"encryptionAtRestKmsKeyArn"`
	// Configuration block to specify encryption in transit. See below.
	EncryptionInTransit pulumix.Input[*ClusterEncryptionInfoEncryptionInTransitArgs] `pulumi:"encryptionInTransit"`
}

func (ClusterEncryptionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInfo)(nil)).Elem()
}

func (i ClusterEncryptionInfoArgs) ToClusterEncryptionInfoOutput() ClusterEncryptionInfoOutput {
	return i.ToClusterEncryptionInfoOutputWithContext(context.Background())
}

func (i ClusterEncryptionInfoArgs) ToClusterEncryptionInfoOutputWithContext(ctx context.Context) ClusterEncryptionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoOutput)
}

func (i *ClusterEncryptionInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionInfoArgs] {
	return pulumix.Val(i)
}

type ClusterEncryptionInfoOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInfo)(nil)).Elem()
}

func (o ClusterEncryptionInfoOutput) ToClusterEncryptionInfoOutput() ClusterEncryptionInfoOutput {
	return o
}

func (o ClusterEncryptionInfoOutput) ToClusterEncryptionInfoOutputWithContext(ctx context.Context) ClusterEncryptionInfoOutput {
	return o
}

func (o ClusterEncryptionInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionInfo] {
	return pulumix.Output[ClusterEncryptionInfo]{
		OutputState: o.OutputState,
	}
}

// You may specify a KMS key short ID or ARN (it will always output an ARN) to use for encrypting your data at rest.  If no key is specified, an AWS managed KMS ('aws/msk' managed service) key will be used for encrypting the data at rest.
func (o ClusterEncryptionInfoOutput) EncryptionAtRestKmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[ClusterEncryptionInfo](o, func(v ClusterEncryptionInfo) *string { return v.EncryptionAtRestKmsKeyArn })
}

// Configuration block to specify encryption in transit. See below.
func (o ClusterEncryptionInfoOutput) EncryptionInTransit() pulumix.GPtrOutput[ClusterEncryptionInfoEncryptionInTransit, ClusterEncryptionInfoEncryptionInTransitOutput] {
	value := pulumix.Apply[ClusterEncryptionInfo](o, func(v ClusterEncryptionInfo) *ClusterEncryptionInfoEncryptionInTransit { return v.EncryptionInTransit })
	return pulumix.GPtrOutput[ClusterEncryptionInfoEncryptionInTransit, ClusterEncryptionInfoEncryptionInTransitOutput]{OutputState: value.OutputState}
}

type ClusterEncryptionInfoEncryptionInTransit struct {
	// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`. Default value is `TLS`.
	ClientBroker *string `pulumi:"clientBroker"`
	// Whether data communication among broker nodes is encrypted. Default value: `true`.
	InCluster *bool `pulumi:"inCluster"`
}

type ClusterEncryptionInfoEncryptionInTransitArgs struct {
	// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`. Default value is `TLS`.
	ClientBroker pulumix.Input[*string] `pulumi:"clientBroker"`
	// Whether data communication among broker nodes is encrypted. Default value: `true`.
	InCluster pulumix.Input[*bool] `pulumi:"inCluster"`
}

func (ClusterEncryptionInfoEncryptionInTransitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInfoEncryptionInTransit)(nil)).Elem()
}

func (i ClusterEncryptionInfoEncryptionInTransitArgs) ToClusterEncryptionInfoEncryptionInTransitOutput() ClusterEncryptionInfoEncryptionInTransitOutput {
	return i.ToClusterEncryptionInfoEncryptionInTransitOutputWithContext(context.Background())
}

func (i ClusterEncryptionInfoEncryptionInTransitArgs) ToClusterEncryptionInfoEncryptionInTransitOutputWithContext(ctx context.Context) ClusterEncryptionInfoEncryptionInTransitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoEncryptionInTransitOutput)
}

func (i *ClusterEncryptionInfoEncryptionInTransitArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionInfoEncryptionInTransitArgs] {
	return pulumix.Val(i)
}

type ClusterEncryptionInfoEncryptionInTransitOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionInfoEncryptionInTransitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInfoEncryptionInTransit)(nil)).Elem()
}

func (o ClusterEncryptionInfoEncryptionInTransitOutput) ToClusterEncryptionInfoEncryptionInTransitOutput() ClusterEncryptionInfoEncryptionInTransitOutput {
	return o
}

func (o ClusterEncryptionInfoEncryptionInTransitOutput) ToClusterEncryptionInfoEncryptionInTransitOutputWithContext(ctx context.Context) ClusterEncryptionInfoEncryptionInTransitOutput {
	return o
}

func (o ClusterEncryptionInfoEncryptionInTransitOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionInfoEncryptionInTransit] {
	return pulumix.Output[ClusterEncryptionInfoEncryptionInTransit]{
		OutputState: o.OutputState,
	}
}

// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`. Default value is `TLS`.
func (o ClusterEncryptionInfoEncryptionInTransitOutput) ClientBroker() pulumix.Output[*string] {
	return pulumix.Apply[ClusterEncryptionInfoEncryptionInTransit](o, func(v ClusterEncryptionInfoEncryptionInTransit) *string { return v.ClientBroker })
}

// Whether data communication among broker nodes is encrypted. Default value: `true`.
func (o ClusterEncryptionInfoEncryptionInTransitOutput) InCluster() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterEncryptionInfoEncryptionInTransit](o, func(v ClusterEncryptionInfoEncryptionInTransit) *bool { return v.InCluster })
}

type ClusterLoggingInfo struct {
	// Configuration block for Broker Logs settings for logging info. See below.
	BrokerLogs ClusterLoggingInfoBrokerLogs `pulumi:"brokerLogs"`
}

type ClusterLoggingInfoArgs struct {
	// Configuration block for Broker Logs settings for logging info. See below.
	BrokerLogs pulumix.Input[*ClusterLoggingInfoBrokerLogsArgs] `pulumi:"brokerLogs"`
}

func (ClusterLoggingInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfo)(nil)).Elem()
}

func (i ClusterLoggingInfoArgs) ToClusterLoggingInfoOutput() ClusterLoggingInfoOutput {
	return i.ToClusterLoggingInfoOutputWithContext(context.Background())
}

func (i ClusterLoggingInfoArgs) ToClusterLoggingInfoOutputWithContext(ctx context.Context) ClusterLoggingInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingInfoOutput)
}

func (i *ClusterLoggingInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterLoggingInfoArgs] {
	return pulumix.Val(i)
}

type ClusterLoggingInfoOutput struct{ *pulumi.OutputState }

func (ClusterLoggingInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfo)(nil)).Elem()
}

func (o ClusterLoggingInfoOutput) ToClusterLoggingInfoOutput() ClusterLoggingInfoOutput {
	return o
}

func (o ClusterLoggingInfoOutput) ToClusterLoggingInfoOutputWithContext(ctx context.Context) ClusterLoggingInfoOutput {
	return o
}

func (o ClusterLoggingInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLoggingInfo] {
	return pulumix.Output[ClusterLoggingInfo]{
		OutputState: o.OutputState,
	}
}

// Configuration block for Broker Logs settings for logging info. See below.
func (o ClusterLoggingInfoOutput) BrokerLogs() pulumix.GPtrOutput[ClusterLoggingInfoBrokerLogs, ClusterLoggingInfoBrokerLogsOutput] {
	value := pulumix.Apply[ClusterLoggingInfo](o, func(v ClusterLoggingInfo) ClusterLoggingInfoBrokerLogs { return v.BrokerLogs })
	return pulumix.GPtrOutput[ClusterLoggingInfoBrokerLogs, ClusterLoggingInfoBrokerLogsOutput]{OutputState: value.OutputState}
}

type ClusterLoggingInfoBrokerLogs struct {
	CloudwatchLogs *ClusterLoggingInfoBrokerLogsCloudwatchLogs `pulumi:"cloudwatchLogs"`
	Firehose       *ClusterLoggingInfoBrokerLogsFirehose       `pulumi:"firehose"`
	S3             *ClusterLoggingInfoBrokerLogsS3             `pulumi:"s3"`
}

type ClusterLoggingInfoBrokerLogsArgs struct {
	CloudwatchLogs pulumix.Input[*ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs] `pulumi:"cloudwatchLogs"`
	Firehose       pulumix.Input[*ClusterLoggingInfoBrokerLogsFirehoseArgs]       `pulumi:"firehose"`
	S3             pulumix.Input[*ClusterLoggingInfoBrokerLogsS3Args]             `pulumi:"s3"`
}

func (ClusterLoggingInfoBrokerLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfoBrokerLogs)(nil)).Elem()
}

func (i ClusterLoggingInfoBrokerLogsArgs) ToClusterLoggingInfoBrokerLogsOutput() ClusterLoggingInfoBrokerLogsOutput {
	return i.ToClusterLoggingInfoBrokerLogsOutputWithContext(context.Background())
}

func (i ClusterLoggingInfoBrokerLogsArgs) ToClusterLoggingInfoBrokerLogsOutputWithContext(ctx context.Context) ClusterLoggingInfoBrokerLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingInfoBrokerLogsOutput)
}

func (i *ClusterLoggingInfoBrokerLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterLoggingInfoBrokerLogsArgs] {
	return pulumix.Val(i)
}

type ClusterLoggingInfoBrokerLogsOutput struct{ *pulumi.OutputState }

func (ClusterLoggingInfoBrokerLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfoBrokerLogs)(nil)).Elem()
}

func (o ClusterLoggingInfoBrokerLogsOutput) ToClusterLoggingInfoBrokerLogsOutput() ClusterLoggingInfoBrokerLogsOutput {
	return o
}

func (o ClusterLoggingInfoBrokerLogsOutput) ToClusterLoggingInfoBrokerLogsOutputWithContext(ctx context.Context) ClusterLoggingInfoBrokerLogsOutput {
	return o
}

func (o ClusterLoggingInfoBrokerLogsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLoggingInfoBrokerLogs] {
	return pulumix.Output[ClusterLoggingInfoBrokerLogs]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLoggingInfoBrokerLogsOutput) CloudwatchLogs() pulumix.GPtrOutput[ClusterLoggingInfoBrokerLogsCloudwatchLogs, ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput] {
	value := pulumix.Apply[ClusterLoggingInfoBrokerLogs](o, func(v ClusterLoggingInfoBrokerLogs) *ClusterLoggingInfoBrokerLogsCloudwatchLogs {
		return v.CloudwatchLogs
	})
	return pulumix.GPtrOutput[ClusterLoggingInfoBrokerLogsCloudwatchLogs, ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput]{OutputState: value.OutputState}
}

func (o ClusterLoggingInfoBrokerLogsOutput) Firehose() pulumix.GPtrOutput[ClusterLoggingInfoBrokerLogsFirehose, ClusterLoggingInfoBrokerLogsFirehoseOutput] {
	value := pulumix.Apply[ClusterLoggingInfoBrokerLogs](o, func(v ClusterLoggingInfoBrokerLogs) *ClusterLoggingInfoBrokerLogsFirehose { return v.Firehose })
	return pulumix.GPtrOutput[ClusterLoggingInfoBrokerLogsFirehose, ClusterLoggingInfoBrokerLogsFirehoseOutput]{OutputState: value.OutputState}
}

func (o ClusterLoggingInfoBrokerLogsOutput) S3() pulumix.GPtrOutput[ClusterLoggingInfoBrokerLogsS3, ClusterLoggingInfoBrokerLogsS3Output] {
	value := pulumix.Apply[ClusterLoggingInfoBrokerLogs](o, func(v ClusterLoggingInfoBrokerLogs) *ClusterLoggingInfoBrokerLogsS3 { return v.S3 })
	return pulumix.GPtrOutput[ClusterLoggingInfoBrokerLogsS3, ClusterLoggingInfoBrokerLogsS3Output]{OutputState: value.OutputState}
}

type ClusterLoggingInfoBrokerLogsCloudwatchLogs struct {
	// Controls whether provisioned throughput is enabled or not. Default value: `false`.
	Enabled bool `pulumi:"enabled"`
	// Name of the Cloudwatch Log Group to deliver logs to.
	LogGroup *string `pulumi:"logGroup"`
}

type ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs struct {
	// Controls whether provisioned throughput is enabled or not. Default value: `false`.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// Name of the Cloudwatch Log Group to deliver logs to.
	LogGroup pulumix.Input[*string] `pulumi:"logGroup"`
}

func (ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfoBrokerLogsCloudwatchLogs)(nil)).Elem()
}

func (i ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs) ToClusterLoggingInfoBrokerLogsCloudwatchLogsOutput() ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput {
	return i.ToClusterLoggingInfoBrokerLogsCloudwatchLogsOutputWithContext(context.Background())
}

func (i ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs) ToClusterLoggingInfoBrokerLogsCloudwatchLogsOutputWithContext(ctx context.Context) ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput)
}

func (i *ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs] {
	return pulumix.Val(i)
}

type ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput struct{ *pulumi.OutputState }

func (ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfoBrokerLogsCloudwatchLogs)(nil)).Elem()
}

func (o ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput) ToClusterLoggingInfoBrokerLogsCloudwatchLogsOutput() ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput {
	return o
}

func (o ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput) ToClusterLoggingInfoBrokerLogsCloudwatchLogsOutputWithContext(ctx context.Context) ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput {
	return o
}

func (o ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLoggingInfoBrokerLogsCloudwatchLogs] {
	return pulumix.Output[ClusterLoggingInfoBrokerLogsCloudwatchLogs]{
		OutputState: o.OutputState,
	}
}

// Controls whether provisioned throughput is enabled or not. Default value: `false`.
func (o ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[ClusterLoggingInfoBrokerLogsCloudwatchLogs](o, func(v ClusterLoggingInfoBrokerLogsCloudwatchLogs) bool { return v.Enabled })
}

// Name of the Cloudwatch Log Group to deliver logs to.
func (o ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput) LogGroup() pulumix.Output[*string] {
	return pulumix.Apply[ClusterLoggingInfoBrokerLogsCloudwatchLogs](o, func(v ClusterLoggingInfoBrokerLogsCloudwatchLogs) *string { return v.LogGroup })
}

type ClusterLoggingInfoBrokerLogsFirehose struct {
	// Name of the Kinesis Data Firehose delivery stream to deliver logs to.
	DeliveryStream *string `pulumi:"deliveryStream"`
	// Controls whether provisioned throughput is enabled or not. Default value: `false`.
	Enabled bool `pulumi:"enabled"`
}

type ClusterLoggingInfoBrokerLogsFirehoseArgs struct {
	// Name of the Kinesis Data Firehose delivery stream to deliver logs to.
	DeliveryStream pulumix.Input[*string] `pulumi:"deliveryStream"`
	// Controls whether provisioned throughput is enabled or not. Default value: `false`.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (ClusterLoggingInfoBrokerLogsFirehoseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfoBrokerLogsFirehose)(nil)).Elem()
}

func (i ClusterLoggingInfoBrokerLogsFirehoseArgs) ToClusterLoggingInfoBrokerLogsFirehoseOutput() ClusterLoggingInfoBrokerLogsFirehoseOutput {
	return i.ToClusterLoggingInfoBrokerLogsFirehoseOutputWithContext(context.Background())
}

func (i ClusterLoggingInfoBrokerLogsFirehoseArgs) ToClusterLoggingInfoBrokerLogsFirehoseOutputWithContext(ctx context.Context) ClusterLoggingInfoBrokerLogsFirehoseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingInfoBrokerLogsFirehoseOutput)
}

func (i *ClusterLoggingInfoBrokerLogsFirehoseArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterLoggingInfoBrokerLogsFirehoseArgs] {
	return pulumix.Val(i)
}

type ClusterLoggingInfoBrokerLogsFirehoseOutput struct{ *pulumi.OutputState }

func (ClusterLoggingInfoBrokerLogsFirehoseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfoBrokerLogsFirehose)(nil)).Elem()
}

func (o ClusterLoggingInfoBrokerLogsFirehoseOutput) ToClusterLoggingInfoBrokerLogsFirehoseOutput() ClusterLoggingInfoBrokerLogsFirehoseOutput {
	return o
}

func (o ClusterLoggingInfoBrokerLogsFirehoseOutput) ToClusterLoggingInfoBrokerLogsFirehoseOutputWithContext(ctx context.Context) ClusterLoggingInfoBrokerLogsFirehoseOutput {
	return o
}

func (o ClusterLoggingInfoBrokerLogsFirehoseOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLoggingInfoBrokerLogsFirehose] {
	return pulumix.Output[ClusterLoggingInfoBrokerLogsFirehose]{
		OutputState: o.OutputState,
	}
}

// Name of the Kinesis Data Firehose delivery stream to deliver logs to.
func (o ClusterLoggingInfoBrokerLogsFirehoseOutput) DeliveryStream() pulumix.Output[*string] {
	return pulumix.Apply[ClusterLoggingInfoBrokerLogsFirehose](o, func(v ClusterLoggingInfoBrokerLogsFirehose) *string { return v.DeliveryStream })
}

// Controls whether provisioned throughput is enabled or not. Default value: `false`.
func (o ClusterLoggingInfoBrokerLogsFirehoseOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[ClusterLoggingInfoBrokerLogsFirehose](o, func(v ClusterLoggingInfoBrokerLogsFirehose) bool { return v.Enabled })
}

type ClusterLoggingInfoBrokerLogsS3 struct {
	// Name of the S3 bucket to deliver logs to.
	Bucket *string `pulumi:"bucket"`
	// Controls whether provisioned throughput is enabled or not. Default value: `false`.
	Enabled bool `pulumi:"enabled"`
	// Prefix to append to the folder name.
	Prefix *string `pulumi:"prefix"`
}

type ClusterLoggingInfoBrokerLogsS3Args struct {
	// Name of the S3 bucket to deliver logs to.
	Bucket pulumix.Input[*string] `pulumi:"bucket"`
	// Controls whether provisioned throughput is enabled or not. Default value: `false`.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// Prefix to append to the folder name.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (ClusterLoggingInfoBrokerLogsS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfoBrokerLogsS3)(nil)).Elem()
}

func (i ClusterLoggingInfoBrokerLogsS3Args) ToClusterLoggingInfoBrokerLogsS3Output() ClusterLoggingInfoBrokerLogsS3Output {
	return i.ToClusterLoggingInfoBrokerLogsS3OutputWithContext(context.Background())
}

func (i ClusterLoggingInfoBrokerLogsS3Args) ToClusterLoggingInfoBrokerLogsS3OutputWithContext(ctx context.Context) ClusterLoggingInfoBrokerLogsS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingInfoBrokerLogsS3Output)
}

func (i *ClusterLoggingInfoBrokerLogsS3Args) ToOutput(ctx context.Context) pulumix.Output[*ClusterLoggingInfoBrokerLogsS3Args] {
	return pulumix.Val(i)
}

type ClusterLoggingInfoBrokerLogsS3Output struct{ *pulumi.OutputState }

func (ClusterLoggingInfoBrokerLogsS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfoBrokerLogsS3)(nil)).Elem()
}

func (o ClusterLoggingInfoBrokerLogsS3Output) ToClusterLoggingInfoBrokerLogsS3Output() ClusterLoggingInfoBrokerLogsS3Output {
	return o
}

func (o ClusterLoggingInfoBrokerLogsS3Output) ToClusterLoggingInfoBrokerLogsS3OutputWithContext(ctx context.Context) ClusterLoggingInfoBrokerLogsS3Output {
	return o
}

func (o ClusterLoggingInfoBrokerLogsS3Output) ToOutput(ctx context.Context) pulumix.Output[ClusterLoggingInfoBrokerLogsS3] {
	return pulumix.Output[ClusterLoggingInfoBrokerLogsS3]{
		OutputState: o.OutputState,
	}
}

// Name of the S3 bucket to deliver logs to.
func (o ClusterLoggingInfoBrokerLogsS3Output) Bucket() pulumix.Output[*string] {
	return pulumix.Apply[ClusterLoggingInfoBrokerLogsS3](o, func(v ClusterLoggingInfoBrokerLogsS3) *string { return v.Bucket })
}

// Controls whether provisioned throughput is enabled or not. Default value: `false`.
func (o ClusterLoggingInfoBrokerLogsS3Output) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[ClusterLoggingInfoBrokerLogsS3](o, func(v ClusterLoggingInfoBrokerLogsS3) bool { return v.Enabled })
}

// Prefix to append to the folder name.
func (o ClusterLoggingInfoBrokerLogsS3Output) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[ClusterLoggingInfoBrokerLogsS3](o, func(v ClusterLoggingInfoBrokerLogsS3) *string { return v.Prefix })
}

type ClusterOpenMonitoring struct {
	// Configuration block for Prometheus settings for open monitoring. See below.
	Prometheus ClusterOpenMonitoringPrometheus `pulumi:"prometheus"`
}

type ClusterOpenMonitoringArgs struct {
	// Configuration block for Prometheus settings for open monitoring. See below.
	Prometheus pulumix.Input[*ClusterOpenMonitoringPrometheusArgs] `pulumi:"prometheus"`
}

func (ClusterOpenMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOpenMonitoring)(nil)).Elem()
}

func (i ClusterOpenMonitoringArgs) ToClusterOpenMonitoringOutput() ClusterOpenMonitoringOutput {
	return i.ToClusterOpenMonitoringOutputWithContext(context.Background())
}

func (i ClusterOpenMonitoringArgs) ToClusterOpenMonitoringOutputWithContext(ctx context.Context) ClusterOpenMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOpenMonitoringOutput)
}

func (i *ClusterOpenMonitoringArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterOpenMonitoringArgs] {
	return pulumix.Val(i)
}

type ClusterOpenMonitoringOutput struct{ *pulumi.OutputState }

func (ClusterOpenMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOpenMonitoring)(nil)).Elem()
}

func (o ClusterOpenMonitoringOutput) ToClusterOpenMonitoringOutput() ClusterOpenMonitoringOutput {
	return o
}

func (o ClusterOpenMonitoringOutput) ToClusterOpenMonitoringOutputWithContext(ctx context.Context) ClusterOpenMonitoringOutput {
	return o
}

func (o ClusterOpenMonitoringOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterOpenMonitoring] {
	return pulumix.Output[ClusterOpenMonitoring]{
		OutputState: o.OutputState,
	}
}

// Configuration block for Prometheus settings for open monitoring. See below.
func (o ClusterOpenMonitoringOutput) Prometheus() pulumix.GPtrOutput[ClusterOpenMonitoringPrometheus, ClusterOpenMonitoringPrometheusOutput] {
	value := pulumix.Apply[ClusterOpenMonitoring](o, func(v ClusterOpenMonitoring) ClusterOpenMonitoringPrometheus { return v.Prometheus })
	return pulumix.GPtrOutput[ClusterOpenMonitoringPrometheus, ClusterOpenMonitoringPrometheusOutput]{OutputState: value.OutputState}
}

type ClusterOpenMonitoringPrometheus struct {
	// Configuration block for JMX Exporter. See below.
	JmxExporter *ClusterOpenMonitoringPrometheusJmxExporter `pulumi:"jmxExporter"`
	// Configuration block for Node Exporter. See below.
	NodeExporter *ClusterOpenMonitoringPrometheusNodeExporter `pulumi:"nodeExporter"`
}

type ClusterOpenMonitoringPrometheusArgs struct {
	// Configuration block for JMX Exporter. See below.
	JmxExporter pulumix.Input[*ClusterOpenMonitoringPrometheusJmxExporterArgs] `pulumi:"jmxExporter"`
	// Configuration block for Node Exporter. See below.
	NodeExporter pulumix.Input[*ClusterOpenMonitoringPrometheusNodeExporterArgs] `pulumi:"nodeExporter"`
}

func (ClusterOpenMonitoringPrometheusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOpenMonitoringPrometheus)(nil)).Elem()
}

func (i ClusterOpenMonitoringPrometheusArgs) ToClusterOpenMonitoringPrometheusOutput() ClusterOpenMonitoringPrometheusOutput {
	return i.ToClusterOpenMonitoringPrometheusOutputWithContext(context.Background())
}

func (i ClusterOpenMonitoringPrometheusArgs) ToClusterOpenMonitoringPrometheusOutputWithContext(ctx context.Context) ClusterOpenMonitoringPrometheusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOpenMonitoringPrometheusOutput)
}

func (i *ClusterOpenMonitoringPrometheusArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterOpenMonitoringPrometheusArgs] {
	return pulumix.Val(i)
}

type ClusterOpenMonitoringPrometheusOutput struct{ *pulumi.OutputState }

func (ClusterOpenMonitoringPrometheusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOpenMonitoringPrometheus)(nil)).Elem()
}

func (o ClusterOpenMonitoringPrometheusOutput) ToClusterOpenMonitoringPrometheusOutput() ClusterOpenMonitoringPrometheusOutput {
	return o
}

func (o ClusterOpenMonitoringPrometheusOutput) ToClusterOpenMonitoringPrometheusOutputWithContext(ctx context.Context) ClusterOpenMonitoringPrometheusOutput {
	return o
}

func (o ClusterOpenMonitoringPrometheusOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterOpenMonitoringPrometheus] {
	return pulumix.Output[ClusterOpenMonitoringPrometheus]{
		OutputState: o.OutputState,
	}
}

// Configuration block for JMX Exporter. See below.
func (o ClusterOpenMonitoringPrometheusOutput) JmxExporter() pulumix.GPtrOutput[ClusterOpenMonitoringPrometheusJmxExporter, ClusterOpenMonitoringPrometheusJmxExporterOutput] {
	value := pulumix.Apply[ClusterOpenMonitoringPrometheus](o, func(v ClusterOpenMonitoringPrometheus) *ClusterOpenMonitoringPrometheusJmxExporter {
		return v.JmxExporter
	})
	return pulumix.GPtrOutput[ClusterOpenMonitoringPrometheusJmxExporter, ClusterOpenMonitoringPrometheusJmxExporterOutput]{OutputState: value.OutputState}
}

// Configuration block for Node Exporter. See below.
func (o ClusterOpenMonitoringPrometheusOutput) NodeExporter() pulumix.GPtrOutput[ClusterOpenMonitoringPrometheusNodeExporter, ClusterOpenMonitoringPrometheusNodeExporterOutput] {
	value := pulumix.Apply[ClusterOpenMonitoringPrometheus](o, func(v ClusterOpenMonitoringPrometheus) *ClusterOpenMonitoringPrometheusNodeExporter {
		return v.NodeExporter
	})
	return pulumix.GPtrOutput[ClusterOpenMonitoringPrometheusNodeExporter, ClusterOpenMonitoringPrometheusNodeExporterOutput]{OutputState: value.OutputState}
}

type ClusterOpenMonitoringPrometheusJmxExporter struct {
	// Indicates whether you want to enable or disable the JMX Exporter.
	EnabledInBroker bool `pulumi:"enabledInBroker"`
}

type ClusterOpenMonitoringPrometheusJmxExporterArgs struct {
	// Indicates whether you want to enable or disable the JMX Exporter.
	EnabledInBroker pulumix.Input[bool] `pulumi:"enabledInBroker"`
}

func (ClusterOpenMonitoringPrometheusJmxExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOpenMonitoringPrometheusJmxExporter)(nil)).Elem()
}

func (i ClusterOpenMonitoringPrometheusJmxExporterArgs) ToClusterOpenMonitoringPrometheusJmxExporterOutput() ClusterOpenMonitoringPrometheusJmxExporterOutput {
	return i.ToClusterOpenMonitoringPrometheusJmxExporterOutputWithContext(context.Background())
}

func (i ClusterOpenMonitoringPrometheusJmxExporterArgs) ToClusterOpenMonitoringPrometheusJmxExporterOutputWithContext(ctx context.Context) ClusterOpenMonitoringPrometheusJmxExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOpenMonitoringPrometheusJmxExporterOutput)
}

func (i *ClusterOpenMonitoringPrometheusJmxExporterArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterOpenMonitoringPrometheusJmxExporterArgs] {
	return pulumix.Val(i)
}

type ClusterOpenMonitoringPrometheusJmxExporterOutput struct{ *pulumi.OutputState }

func (ClusterOpenMonitoringPrometheusJmxExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOpenMonitoringPrometheusJmxExporter)(nil)).Elem()
}

func (o ClusterOpenMonitoringPrometheusJmxExporterOutput) ToClusterOpenMonitoringPrometheusJmxExporterOutput() ClusterOpenMonitoringPrometheusJmxExporterOutput {
	return o
}

func (o ClusterOpenMonitoringPrometheusJmxExporterOutput) ToClusterOpenMonitoringPrometheusJmxExporterOutputWithContext(ctx context.Context) ClusterOpenMonitoringPrometheusJmxExporterOutput {
	return o
}

func (o ClusterOpenMonitoringPrometheusJmxExporterOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterOpenMonitoringPrometheusJmxExporter] {
	return pulumix.Output[ClusterOpenMonitoringPrometheusJmxExporter]{
		OutputState: o.OutputState,
	}
}

// Indicates whether you want to enable or disable the JMX Exporter.
func (o ClusterOpenMonitoringPrometheusJmxExporterOutput) EnabledInBroker() pulumix.Output[bool] {
	return pulumix.Apply[ClusterOpenMonitoringPrometheusJmxExporter](o, func(v ClusterOpenMonitoringPrometheusJmxExporter) bool { return v.EnabledInBroker })
}

type ClusterOpenMonitoringPrometheusNodeExporter struct {
	// Indicates whether you want to enable or disable the JMX Exporter.
	EnabledInBroker bool `pulumi:"enabledInBroker"`
}

type ClusterOpenMonitoringPrometheusNodeExporterArgs struct {
	// Indicates whether you want to enable or disable the JMX Exporter.
	EnabledInBroker pulumix.Input[bool] `pulumi:"enabledInBroker"`
}

func (ClusterOpenMonitoringPrometheusNodeExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOpenMonitoringPrometheusNodeExporter)(nil)).Elem()
}

func (i ClusterOpenMonitoringPrometheusNodeExporterArgs) ToClusterOpenMonitoringPrometheusNodeExporterOutput() ClusterOpenMonitoringPrometheusNodeExporterOutput {
	return i.ToClusterOpenMonitoringPrometheusNodeExporterOutputWithContext(context.Background())
}

func (i ClusterOpenMonitoringPrometheusNodeExporterArgs) ToClusterOpenMonitoringPrometheusNodeExporterOutputWithContext(ctx context.Context) ClusterOpenMonitoringPrometheusNodeExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOpenMonitoringPrometheusNodeExporterOutput)
}

func (i *ClusterOpenMonitoringPrometheusNodeExporterArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterOpenMonitoringPrometheusNodeExporterArgs] {
	return pulumix.Val(i)
}

type ClusterOpenMonitoringPrometheusNodeExporterOutput struct{ *pulumi.OutputState }

func (ClusterOpenMonitoringPrometheusNodeExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOpenMonitoringPrometheusNodeExporter)(nil)).Elem()
}

func (o ClusterOpenMonitoringPrometheusNodeExporterOutput) ToClusterOpenMonitoringPrometheusNodeExporterOutput() ClusterOpenMonitoringPrometheusNodeExporterOutput {
	return o
}

func (o ClusterOpenMonitoringPrometheusNodeExporterOutput) ToClusterOpenMonitoringPrometheusNodeExporterOutputWithContext(ctx context.Context) ClusterOpenMonitoringPrometheusNodeExporterOutput {
	return o
}

func (o ClusterOpenMonitoringPrometheusNodeExporterOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterOpenMonitoringPrometheusNodeExporter] {
	return pulumix.Output[ClusterOpenMonitoringPrometheusNodeExporter]{
		OutputState: o.OutputState,
	}
}

// Indicates whether you want to enable or disable the JMX Exporter.
func (o ClusterOpenMonitoringPrometheusNodeExporterOutput) EnabledInBroker() pulumix.Output[bool] {
	return pulumix.Apply[ClusterOpenMonitoringPrometheusNodeExporter](o, func(v ClusterOpenMonitoringPrometheusNodeExporter) bool { return v.EnabledInBroker })
}

type ServerlessClusterClientAuthentication struct {
	// Details for client authentication using SASL. See below.
	Sasl ServerlessClusterClientAuthenticationSasl `pulumi:"sasl"`
}

type ServerlessClusterClientAuthenticationArgs struct {
	// Details for client authentication using SASL. See below.
	Sasl pulumix.Input[*ServerlessClusterClientAuthenticationSaslArgs] `pulumi:"sasl"`
}

func (ServerlessClusterClientAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterClientAuthentication)(nil)).Elem()
}

func (i ServerlessClusterClientAuthenticationArgs) ToServerlessClusterClientAuthenticationOutput() ServerlessClusterClientAuthenticationOutput {
	return i.ToServerlessClusterClientAuthenticationOutputWithContext(context.Background())
}

func (i ServerlessClusterClientAuthenticationArgs) ToServerlessClusterClientAuthenticationOutputWithContext(ctx context.Context) ServerlessClusterClientAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterClientAuthenticationOutput)
}

func (i *ServerlessClusterClientAuthenticationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServerlessClusterClientAuthenticationArgs] {
	return pulumix.Val(i)
}

type ServerlessClusterClientAuthenticationOutput struct{ *pulumi.OutputState }

func (ServerlessClusterClientAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterClientAuthentication)(nil)).Elem()
}

func (o ServerlessClusterClientAuthenticationOutput) ToServerlessClusterClientAuthenticationOutput() ServerlessClusterClientAuthenticationOutput {
	return o
}

func (o ServerlessClusterClientAuthenticationOutput) ToServerlessClusterClientAuthenticationOutputWithContext(ctx context.Context) ServerlessClusterClientAuthenticationOutput {
	return o
}

func (o ServerlessClusterClientAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterClientAuthentication] {
	return pulumix.Output[ServerlessClusterClientAuthentication]{
		OutputState: o.OutputState,
	}
}

// Details for client authentication using SASL. See below.
func (o ServerlessClusterClientAuthenticationOutput) Sasl() pulumix.GPtrOutput[ServerlessClusterClientAuthenticationSasl, ServerlessClusterClientAuthenticationSaslOutput] {
	value := pulumix.Apply[ServerlessClusterClientAuthentication](o, func(v ServerlessClusterClientAuthentication) ServerlessClusterClientAuthenticationSasl { return v.Sasl })
	return pulumix.GPtrOutput[ServerlessClusterClientAuthenticationSasl, ServerlessClusterClientAuthenticationSaslOutput]{OutputState: value.OutputState}
}

type ServerlessClusterClientAuthenticationSasl struct {
	// Details for client authentication using IAM. See below.
	Iam ServerlessClusterClientAuthenticationSaslIam `pulumi:"iam"`
}

type ServerlessClusterClientAuthenticationSaslArgs struct {
	// Details for client authentication using IAM. See below.
	Iam pulumix.Input[*ServerlessClusterClientAuthenticationSaslIamArgs] `pulumi:"iam"`
}

func (ServerlessClusterClientAuthenticationSaslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterClientAuthenticationSasl)(nil)).Elem()
}

func (i ServerlessClusterClientAuthenticationSaslArgs) ToServerlessClusterClientAuthenticationSaslOutput() ServerlessClusterClientAuthenticationSaslOutput {
	return i.ToServerlessClusterClientAuthenticationSaslOutputWithContext(context.Background())
}

func (i ServerlessClusterClientAuthenticationSaslArgs) ToServerlessClusterClientAuthenticationSaslOutputWithContext(ctx context.Context) ServerlessClusterClientAuthenticationSaslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterClientAuthenticationSaslOutput)
}

func (i *ServerlessClusterClientAuthenticationSaslArgs) ToOutput(ctx context.Context) pulumix.Output[*ServerlessClusterClientAuthenticationSaslArgs] {
	return pulumix.Val(i)
}

type ServerlessClusterClientAuthenticationSaslOutput struct{ *pulumi.OutputState }

func (ServerlessClusterClientAuthenticationSaslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterClientAuthenticationSasl)(nil)).Elem()
}

func (o ServerlessClusterClientAuthenticationSaslOutput) ToServerlessClusterClientAuthenticationSaslOutput() ServerlessClusterClientAuthenticationSaslOutput {
	return o
}

func (o ServerlessClusterClientAuthenticationSaslOutput) ToServerlessClusterClientAuthenticationSaslOutputWithContext(ctx context.Context) ServerlessClusterClientAuthenticationSaslOutput {
	return o
}

func (o ServerlessClusterClientAuthenticationSaslOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterClientAuthenticationSasl] {
	return pulumix.Output[ServerlessClusterClientAuthenticationSasl]{
		OutputState: o.OutputState,
	}
}

// Details for client authentication using IAM. See below.
func (o ServerlessClusterClientAuthenticationSaslOutput) Iam() pulumix.GPtrOutput[ServerlessClusterClientAuthenticationSaslIam, ServerlessClusterClientAuthenticationSaslIamOutput] {
	value := pulumix.Apply[ServerlessClusterClientAuthenticationSasl](o, func(v ServerlessClusterClientAuthenticationSasl) ServerlessClusterClientAuthenticationSaslIam {
		return v.Iam
	})
	return pulumix.GPtrOutput[ServerlessClusterClientAuthenticationSaslIam, ServerlessClusterClientAuthenticationSaslIamOutput]{OutputState: value.OutputState}
}

type ServerlessClusterClientAuthenticationSaslIam struct {
	// Whether SASL/IAM authentication is enabled or not.
	Enabled bool `pulumi:"enabled"`
}

type ServerlessClusterClientAuthenticationSaslIamArgs struct {
	// Whether SASL/IAM authentication is enabled or not.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (ServerlessClusterClientAuthenticationSaslIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterClientAuthenticationSaslIam)(nil)).Elem()
}

func (i ServerlessClusterClientAuthenticationSaslIamArgs) ToServerlessClusterClientAuthenticationSaslIamOutput() ServerlessClusterClientAuthenticationSaslIamOutput {
	return i.ToServerlessClusterClientAuthenticationSaslIamOutputWithContext(context.Background())
}

func (i ServerlessClusterClientAuthenticationSaslIamArgs) ToServerlessClusterClientAuthenticationSaslIamOutputWithContext(ctx context.Context) ServerlessClusterClientAuthenticationSaslIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterClientAuthenticationSaslIamOutput)
}

func (i *ServerlessClusterClientAuthenticationSaslIamArgs) ToOutput(ctx context.Context) pulumix.Output[*ServerlessClusterClientAuthenticationSaslIamArgs] {
	return pulumix.Val(i)
}

type ServerlessClusterClientAuthenticationSaslIamOutput struct{ *pulumi.OutputState }

func (ServerlessClusterClientAuthenticationSaslIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterClientAuthenticationSaslIam)(nil)).Elem()
}

func (o ServerlessClusterClientAuthenticationSaslIamOutput) ToServerlessClusterClientAuthenticationSaslIamOutput() ServerlessClusterClientAuthenticationSaslIamOutput {
	return o
}

func (o ServerlessClusterClientAuthenticationSaslIamOutput) ToServerlessClusterClientAuthenticationSaslIamOutputWithContext(ctx context.Context) ServerlessClusterClientAuthenticationSaslIamOutput {
	return o
}

func (o ServerlessClusterClientAuthenticationSaslIamOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterClientAuthenticationSaslIam] {
	return pulumix.Output[ServerlessClusterClientAuthenticationSaslIam]{
		OutputState: o.OutputState,
	}
}

// Whether SASL/IAM authentication is enabled or not.
func (o ServerlessClusterClientAuthenticationSaslIamOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[ServerlessClusterClientAuthenticationSaslIam](o, func(v ServerlessClusterClientAuthenticationSaslIam) bool { return v.Enabled })
}

type ServerlessClusterVpcConfig struct {
	// Specifies up to five security groups that control inbound and outbound traffic for the serverless cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnets in at least two different Availability Zones that host your client applications.
	SubnetIds []string `pulumi:"subnetIds"`
}

type ServerlessClusterVpcConfigArgs struct {
	// Specifies up to five security groups that control inbound and outbound traffic for the serverless cluster.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// A list of subnets in at least two different Availability Zones that host your client applications.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
}

func (ServerlessClusterVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterVpcConfig)(nil)).Elem()
}

func (i ServerlessClusterVpcConfigArgs) ToServerlessClusterVpcConfigOutput() ServerlessClusterVpcConfigOutput {
	return i.ToServerlessClusterVpcConfigOutputWithContext(context.Background())
}

func (i ServerlessClusterVpcConfigArgs) ToServerlessClusterVpcConfigOutputWithContext(ctx context.Context) ServerlessClusterVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterVpcConfigOutput)
}

func (i *ServerlessClusterVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ServerlessClusterVpcConfigArgs] {
	return pulumix.Val(i)
}

type ServerlessClusterVpcConfigOutput struct{ *pulumi.OutputState }

func (ServerlessClusterVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterVpcConfig)(nil)).Elem()
}

func (o ServerlessClusterVpcConfigOutput) ToServerlessClusterVpcConfigOutput() ServerlessClusterVpcConfigOutput {
	return o
}

func (o ServerlessClusterVpcConfigOutput) ToServerlessClusterVpcConfigOutputWithContext(ctx context.Context) ServerlessClusterVpcConfigOutput {
	return o
}

func (o ServerlessClusterVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterVpcConfig] {
	return pulumix.Output[ServerlessClusterVpcConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies up to five security groups that control inbound and outbound traffic for the serverless cluster.
func (o ServerlessClusterVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServerlessClusterVpcConfig](o, func(v ServerlessClusterVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of subnets in at least two different Availability Zones that host your client applications.
func (o ServerlessClusterVpcConfigOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServerlessClusterVpcConfig](o, func(v ServerlessClusterVpcConfig) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetBrokerNodesNodeInfoList struct {
	// Attached elastic network interface of the broker
	AttachedEniId string `pulumi:"attachedEniId"`
	// ID of the broker
	BrokerId float64 `pulumi:"brokerId"`
	// Client subnet to which this broker node belongs
	ClientSubnet string `pulumi:"clientSubnet"`
	// The client virtual private cloud (VPC) IP address
	ClientVpcIpAddress string `pulumi:"clientVpcIpAddress"`
	// Set of endpoints for accessing the broker. This does not include ports
	Endpoints []string `pulumi:"endpoints"`
	// ARN of the node
	NodeArn string `pulumi:"nodeArn"`
}

type GetBrokerNodesNodeInfoListArgs struct {
	// Attached elastic network interface of the broker
	AttachedEniId pulumix.Input[string] `pulumi:"attachedEniId"`
	// ID of the broker
	BrokerId pulumix.Input[float64] `pulumi:"brokerId"`
	// Client subnet to which this broker node belongs
	ClientSubnet pulumix.Input[string] `pulumi:"clientSubnet"`
	// The client virtual private cloud (VPC) IP address
	ClientVpcIpAddress pulumix.Input[string] `pulumi:"clientVpcIpAddress"`
	// Set of endpoints for accessing the broker. This does not include ports
	Endpoints pulumix.Input[[]string] `pulumi:"endpoints"`
	// ARN of the node
	NodeArn pulumix.Input[string] `pulumi:"nodeArn"`
}

func (GetBrokerNodesNodeInfoListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerNodesNodeInfoList)(nil)).Elem()
}

func (i GetBrokerNodesNodeInfoListArgs) ToGetBrokerNodesNodeInfoListOutput() GetBrokerNodesNodeInfoListOutput {
	return i.ToGetBrokerNodesNodeInfoListOutputWithContext(context.Background())
}

func (i GetBrokerNodesNodeInfoListArgs) ToGetBrokerNodesNodeInfoListOutputWithContext(ctx context.Context) GetBrokerNodesNodeInfoListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerNodesNodeInfoListOutput)
}

func (i *GetBrokerNodesNodeInfoListArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBrokerNodesNodeInfoListArgs] {
	return pulumix.Val(i)
}

type GetBrokerNodesNodeInfoListOutput struct{ *pulumi.OutputState }

func (GetBrokerNodesNodeInfoListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerNodesNodeInfoList)(nil)).Elem()
}

func (o GetBrokerNodesNodeInfoListOutput) ToGetBrokerNodesNodeInfoListOutput() GetBrokerNodesNodeInfoListOutput {
	return o
}

func (o GetBrokerNodesNodeInfoListOutput) ToGetBrokerNodesNodeInfoListOutputWithContext(ctx context.Context) GetBrokerNodesNodeInfoListOutput {
	return o
}

func (o GetBrokerNodesNodeInfoListOutput) ToOutput(ctx context.Context) pulumix.Output[GetBrokerNodesNodeInfoList] {
	return pulumix.Output[GetBrokerNodesNodeInfoList]{
		OutputState: o.OutputState,
	}
}

// Attached elastic network interface of the broker
func (o GetBrokerNodesNodeInfoListOutput) AttachedEniId() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerNodesNodeInfoList](o, func(v GetBrokerNodesNodeInfoList) string { return v.AttachedEniId })
}

// ID of the broker
func (o GetBrokerNodesNodeInfoListOutput) BrokerId() pulumix.Output[float64] {
	return pulumix.Apply[GetBrokerNodesNodeInfoList](o, func(v GetBrokerNodesNodeInfoList) float64 { return v.BrokerId })
}

// Client subnet to which this broker node belongs
func (o GetBrokerNodesNodeInfoListOutput) ClientSubnet() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerNodesNodeInfoList](o, func(v GetBrokerNodesNodeInfoList) string { return v.ClientSubnet })
}

// The client virtual private cloud (VPC) IP address
func (o GetBrokerNodesNodeInfoListOutput) ClientVpcIpAddress() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerNodesNodeInfoList](o, func(v GetBrokerNodesNodeInfoList) string { return v.ClientVpcIpAddress })
}

// Set of endpoints for accessing the broker. This does not include ports
func (o GetBrokerNodesNodeInfoListOutput) Endpoints() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetBrokerNodesNodeInfoList](o, func(v GetBrokerNodesNodeInfoList) []string { return v.Endpoints })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the node
func (o GetBrokerNodesNodeInfoListOutput) NodeArn() pulumix.Output[string] {
	return pulumix.Apply[GetBrokerNodesNodeInfoList](o, func(v GetBrokerNodesNodeInfoList) string { return v.NodeArn })
}

func init() {
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoConnectivityInfoOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoConnectivityInfoPublicAccessOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoConnectivityInfoVpcConnectivityClientAuthenticationSaslOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoStorageInfoOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputOutput{})
	pulumi.RegisterOutputType(ClusterClientAuthenticationOutput{})
	pulumi.RegisterOutputType(ClusterClientAuthenticationSaslOutput{})
	pulumi.RegisterOutputType(ClusterClientAuthenticationTlsOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationInfoOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInfoOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInfoEncryptionInTransitOutput{})
	pulumi.RegisterOutputType(ClusterLoggingInfoOutput{})
	pulumi.RegisterOutputType(ClusterLoggingInfoBrokerLogsOutput{})
	pulumi.RegisterOutputType(ClusterLoggingInfoBrokerLogsCloudwatchLogsOutput{})
	pulumi.RegisterOutputType(ClusterLoggingInfoBrokerLogsFirehoseOutput{})
	pulumi.RegisterOutputType(ClusterLoggingInfoBrokerLogsS3Output{})
	pulumi.RegisterOutputType(ClusterOpenMonitoringOutput{})
	pulumi.RegisterOutputType(ClusterOpenMonitoringPrometheusOutput{})
	pulumi.RegisterOutputType(ClusterOpenMonitoringPrometheusJmxExporterOutput{})
	pulumi.RegisterOutputType(ClusterOpenMonitoringPrometheusNodeExporterOutput{})
	pulumi.RegisterOutputType(ServerlessClusterClientAuthenticationOutput{})
	pulumi.RegisterOutputType(ServerlessClusterClientAuthenticationSaslOutput{})
	pulumi.RegisterOutputType(ServerlessClusterClientAuthenticationSaslIamOutput{})
	pulumi.RegisterOutputType(ServerlessClusterVpcConfigOutput{})
	pulumi.RegisterOutputType(GetBrokerNodesNodeInfoListOutput{})
}
