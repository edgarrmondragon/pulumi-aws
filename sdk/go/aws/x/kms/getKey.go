// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get detailed information about
// the specified KMS Key with flexible key id input.
// This can be useful to reference key alias
// without having to hard code the ARN as input.
func LookupKey(ctx *pulumi.Context, args *LookupKeyArgs, opts ...pulumi.InvokeOption) (*LookupKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKeyResult
	err := ctx.Invoke("aws:kms/getKey:getKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKey.
type LookupKeyArgs struct {
	// List of grant tokens
	GrantTokens []string `pulumi:"grantTokens"`
	// Key identifier which can be one of the following format:
	// * Key ID. E.g: `1234abcd-12ab-34cd-56ef-1234567890ab`
	// * Key ARN. E.g.: `arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`
	// * Alias name. E.g.: `alias/my-key`
	// * Alias ARN: E.g.: `arn:aws:kms:us-east-1:111122223333:alias/my-key`
	KeyId string `pulumi:"keyId"`
}

// A collection of values returned by getKey.
type LookupKeyResult struct {
	// The key ARN of a primary or replica key of a multi-Region key.
	Arn string `pulumi:"arn"`
	// The twelve-digit account ID of the AWS account that owns the key
	AwsAccountId string `pulumi:"awsAccountId"`
	// The cluster ID of the AWS CloudHSM cluster that contains the key material for the KMS key.
	CloudHsmClusterId string `pulumi:"cloudHsmClusterId"`
	// The date and time when the key was created
	CreationDate string `pulumi:"creationDate"`
	// A unique identifier for the custom key store that contains the KMS key.
	CustomKeyStoreId string `pulumi:"customKeyStoreId"`
	// Specifies whether the key contains a symmetric key or an asymmetric key pair and the encryption algorithms or signing algorithms that the key supports
	CustomerMasterKeySpec string `pulumi:"customerMasterKeySpec"`
	// The date and time after which AWS KMS deletes the key. This value is present only when `keyState` is `PendingDeletion`, otherwise this value is 0
	DeletionDate string `pulumi:"deletionDate"`
	// The description of the key.
	Description string `pulumi:"description"`
	// Specifies whether the key is enabled. When `keyState` is `Enabled` this value is true, otherwise it is false
	Enabled bool `pulumi:"enabled"`
	// Specifies whether the Key's key material expires. This value is present only when `origin` is `EXTERNAL`, otherwise this value is empty
	ExpirationModel string   `pulumi:"expirationModel"`
	GrantTokens     []string `pulumi:"grantTokens"`
	// The provider-assigned unique ID for this managed resource.
	Id    string `pulumi:"id"`
	KeyId string `pulumi:"keyId"`
	// The key's manager
	KeyManager string `pulumi:"keyManager"`
	// Describes the type of key material in the KMS key.
	KeySpec string `pulumi:"keySpec"`
	// The state of the key
	KeyState string `pulumi:"keyState"`
	// Specifies the intended use of the key
	KeyUsage string `pulumi:"keyUsage"`
	// Indicates whether the KMS key is a multi-Region (`true`) or regional (`false`) key.
	MultiRegion bool `pulumi:"multiRegion"`
	// Lists the primary and replica keys in same multi-Region key. Present only when the value of `multiRegion` is `true`.
	MultiRegionConfigurations []GetKeyMultiRegionConfiguration `pulumi:"multiRegionConfigurations"`
	// When this value is `AWS_KMS`, AWS KMS created the key material. When this value is `EXTERNAL`, the key material was imported from your existing key management infrastructure or the CMK lacks key material
	Origin string `pulumi:"origin"`
	// The waiting period before the primary key in a multi-Region key is deleted.
	PendingDeletionWindowInDays int `pulumi:"pendingDeletionWindowInDays"`
	// The time at which the imported key material expires. This value is present only when `origin` is `EXTERNAL` and whose `expirationModel` is `KEY_MATERIAL_EXPIRES`, otherwise this value is 0
	ValidTo string `pulumi:"validTo"`
	// Information about the external key that is associated with a KMS key in an external key store.
	XksKeyConfigurations []GetKeyXksKeyConfiguration `pulumi:"xksKeyConfigurations"`
}

func LookupKeyOutput(ctx *pulumi.Context, args LookupKeyOutputArgs, opts ...pulumi.InvokeOption) LookupKeyResultOutput {
	outputResult := pulumix.ApplyErr[*LookupKeyArgs](args.ToOutput(), func(plainArgs *LookupKeyArgs) (*LookupKeyResult, error) {
		return LookupKey(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupKeyResultOutput, *LookupKeyResult](outputResult)
}

// A collection of arguments for invoking getKey.
type LookupKeyOutputArgs struct {
	// List of grant tokens
	GrantTokens pulumix.Input[[]string] `pulumi:"grantTokens"`
	// Key identifier which can be one of the following format:
	// * Key ID. E.g: `1234abcd-12ab-34cd-56ef-1234567890ab`
	// * Key ARN. E.g.: `arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`
	// * Alias name. E.g.: `alias/my-key`
	// * Alias ARN: E.g.: `arn:aws:kms:us-east-1:111122223333:alias/my-key`
	KeyId pulumix.Input[string] `pulumi:"keyId"`
}

func (args LookupKeyOutputArgs) ToOutput() pulumix.Output[*LookupKeyArgs] {
	allArgs := pulumix.All(
		args.GrantTokens.ToOutput(context.Background()).AsAny(),
		args.KeyId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupKeyArgs {
		return &LookupKeyArgs{
			GrantTokens: resolvedArgs[0].([]string),
			KeyId:       resolvedArgs[1].(string),
		}
	})
}

type LookupKeyResultOutput struct{ *pulumi.OutputState }

func (LookupKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyResult)(nil)).Elem()
}

func (o LookupKeyResultOutput) ToOutput(context.Context) pulumix.Output[*LookupKeyResult] {
	return pulumix.Output[*LookupKeyResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupKeyResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.Arn })
}

func (o LookupKeyResultOutput) AwsAccountId() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.AwsAccountId })
}

func (o LookupKeyResultOutput) CloudHsmClusterId() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.CloudHsmClusterId })
}

func (o LookupKeyResultOutput) CreationDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.CreationDate })
}

func (o LookupKeyResultOutput) CustomKeyStoreId() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.CustomKeyStoreId })
}

func (o LookupKeyResultOutput) CustomerMasterKeySpec() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.CustomerMasterKeySpec })
}

func (o LookupKeyResultOutput) DeletionDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.DeletionDate })
}

func (o LookupKeyResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.Description })
}

func (o LookupKeyResultOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) bool { return v.Enabled })
}

func (o LookupKeyResultOutput) ExpirationModel() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.ExpirationModel })
}

func (o LookupKeyResultOutput) GrantTokens() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) []string { return v.GrantTokens })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupKeyResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.Id })
}

func (o LookupKeyResultOutput) KeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.KeyId })
}

func (o LookupKeyResultOutput) KeyManager() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.KeyManager })
}

func (o LookupKeyResultOutput) KeySpec() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.KeySpec })
}

func (o LookupKeyResultOutput) KeyState() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.KeyState })
}

func (o LookupKeyResultOutput) KeyUsage() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.KeyUsage })
}

func (o LookupKeyResultOutput) MultiRegion() pulumix.Output[bool] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) bool { return v.MultiRegion })
}

func (o LookupKeyResultOutput) MultiRegionConfigurations() pulumix.GArrayOutput[GetKeyMultiRegionConfiguration, GetKeyMultiRegionConfigurationOutput] {
	value := pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) []GetKeyMultiRegionConfiguration { return v.MultiRegionConfigurations })
	return pulumix.GArrayOutput[GetKeyMultiRegionConfiguration, GetKeyMultiRegionConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupKeyResultOutput) Origin() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.Origin })
}

func (o LookupKeyResultOutput) PendingDeletionWindowInDays() pulumix.Output[int] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) int { return v.PendingDeletionWindowInDays })
}

func (o LookupKeyResultOutput) ValidTo() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) string { return v.ValidTo })
}

func (o LookupKeyResultOutput) XksKeyConfigurations() pulumix.GArrayOutput[GetKeyXksKeyConfiguration, GetKeyXksKeyConfigurationOutput] {
	value := pulumix.Apply[*LookupKeyResult](o, func(v *LookupKeyResult) []GetKeyXksKeyConfiguration { return v.XksKeyConfigurations })
	return pulumix.GArrayOutput[GetKeyXksKeyConfiguration, GetKeyXksKeyConfigurationOutput]{
		OutputState: value.OutputState,
	}
}
