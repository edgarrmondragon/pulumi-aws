// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use the `pinpoint.SmsChannel` resource to manage Pinpoint SMS Channels.
type SmsChannel struct {
	pulumi.CustomResourceState

	// ID of the application.
	ApplicationId pulumix.Output[string] `pulumi:"applicationId"`
	// Whether the channel is enabled or disabled. By default, it is set to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// Maximum number of promotional messages that can be sent per second.
	PromotionalMessagesPerSecond pulumix.Output[int] `pulumi:"promotionalMessagesPerSecond"`
	// Identifier of the sender for your messages.
	SenderId pulumix.Output[*string] `pulumi:"senderId"`
	// Short Code registered with the phone provider.
	ShortCode pulumix.Output[*string] `pulumi:"shortCode"`
	// Maximum number of transactional messages per second that can be sent.
	TransactionalMessagesPerSecond pulumix.Output[int] `pulumi:"transactionalMessagesPerSecond"`
}

// NewSmsChannel registers a new resource with the given unique name, arguments, and options.
func NewSmsChannel(ctx *pulumi.Context,
	name string, args *SmsChannelArgs, opts ...pulumi.ResourceOption) (*SmsChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmsChannel
	err := ctx.RegisterResource("aws:pinpoint/smsChannel:SmsChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmsChannel gets an existing SmsChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmsChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmsChannelState, opts ...pulumi.ResourceOption) (*SmsChannel, error) {
	var resource SmsChannel
	err := ctx.ReadResource("aws:pinpoint/smsChannel:SmsChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmsChannel resources.
type smsChannelState struct {
	// ID of the application.
	ApplicationId *string `pulumi:"applicationId"`
	// Whether the channel is enabled or disabled. By default, it is set to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Maximum number of promotional messages that can be sent per second.
	PromotionalMessagesPerSecond *int `pulumi:"promotionalMessagesPerSecond"`
	// Identifier of the sender for your messages.
	SenderId *string `pulumi:"senderId"`
	// Short Code registered with the phone provider.
	ShortCode *string `pulumi:"shortCode"`
	// Maximum number of transactional messages per second that can be sent.
	TransactionalMessagesPerSecond *int `pulumi:"transactionalMessagesPerSecond"`
}

type SmsChannelState struct {
	// ID of the application.
	ApplicationId pulumix.Input[*string]
	// Whether the channel is enabled or disabled. By default, it is set to `true`.
	Enabled pulumix.Input[*bool]
	// Maximum number of promotional messages that can be sent per second.
	PromotionalMessagesPerSecond pulumix.Input[*int]
	// Identifier of the sender for your messages.
	SenderId pulumix.Input[*string]
	// Short Code registered with the phone provider.
	ShortCode pulumix.Input[*string]
	// Maximum number of transactional messages per second that can be sent.
	TransactionalMessagesPerSecond pulumix.Input[*int]
}

func (SmsChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*smsChannelState)(nil)).Elem()
}

type smsChannelArgs struct {
	// ID of the application.
	ApplicationId string `pulumi:"applicationId"`
	// Whether the channel is enabled or disabled. By default, it is set to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Identifier of the sender for your messages.
	SenderId *string `pulumi:"senderId"`
	// Short Code registered with the phone provider.
	ShortCode *string `pulumi:"shortCode"`
}

// The set of arguments for constructing a SmsChannel resource.
type SmsChannelArgs struct {
	// ID of the application.
	ApplicationId pulumix.Input[string]
	// Whether the channel is enabled or disabled. By default, it is set to `true`.
	Enabled pulumix.Input[*bool]
	// Identifier of the sender for your messages.
	SenderId pulumix.Input[*string]
	// Short Code registered with the phone provider.
	ShortCode pulumix.Input[*string]
}

func (SmsChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smsChannelArgs)(nil)).Elem()
}

type SmsChannelOutput struct{ *pulumi.OutputState }

func (SmsChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsChannel)(nil)).Elem()
}

func (o SmsChannelOutput) ToSmsChannelOutput() SmsChannelOutput {
	return o
}

func (o SmsChannelOutput) ToSmsChannelOutputWithContext(ctx context.Context) SmsChannelOutput {
	return o
}

func (o SmsChannelOutput) ToOutput(ctx context.Context) pulumix.Output[SmsChannel] {
	return pulumix.Output[SmsChannel]{
		OutputState: o.OutputState,
	}
}

// ID of the application.
func (o SmsChannelOutput) ApplicationId() pulumix.Output[string] {
	value := pulumix.Apply[SmsChannel](o, func(v SmsChannel) pulumix.Output[string] { return v.ApplicationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the channel is enabled or disabled. By default, it is set to `true`.
func (o SmsChannelOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[SmsChannel](o, func(v SmsChannel) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Maximum number of promotional messages that can be sent per second.
func (o SmsChannelOutput) PromotionalMessagesPerSecond() pulumix.Output[int] {
	value := pulumix.Apply[SmsChannel](o, func(v SmsChannel) pulumix.Output[int] { return v.PromotionalMessagesPerSecond })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Identifier of the sender for your messages.
func (o SmsChannelOutput) SenderId() pulumix.Output[*string] {
	value := pulumix.Apply[SmsChannel](o, func(v SmsChannel) pulumix.Output[*string] { return v.SenderId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Short Code registered with the phone provider.
func (o SmsChannelOutput) ShortCode() pulumix.Output[*string] {
	value := pulumix.Apply[SmsChannel](o, func(v SmsChannel) pulumix.Output[*string] { return v.ShortCode })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Maximum number of transactional messages per second that can be sent.
func (o SmsChannelOutput) TransactionalMessagesPerSecond() pulumix.Output[int] {
	value := pulumix.Apply[SmsChannel](o, func(v SmsChannel) pulumix.Output[int] { return v.TransactionalMessagesPerSecond })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(SmsChannelOutput{})
}
