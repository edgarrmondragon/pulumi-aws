// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppSync API Cache.
type ApiCache struct {
	pulumi.CustomResourceState

	// Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
	ApiCachingBehavior pulumix.Output[string] `pulumi:"apiCachingBehavior"`
	// GraphQL API ID.
	ApiId pulumix.Output[string] `pulumi:"apiId"`
	// At-rest encryption flag for cache. You cannot update this setting after creation.
	AtRestEncryptionEnabled pulumix.Output[*bool] `pulumi:"atRestEncryptionEnabled"`
	// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
	TransitEncryptionEnabled pulumix.Output[*bool] `pulumi:"transitEncryptionEnabled"`
	// TTL in seconds for cache entries.
	Ttl pulumix.Output[int] `pulumi:"ttl"`
	// Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewApiCache registers a new resource with the given unique name, arguments, and options.
func NewApiCache(ctx *pulumi.Context,
	name string, args *ApiCacheArgs, opts ...pulumi.ResourceOption) (*ApiCache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiCachingBehavior == nil {
		return nil, errors.New("invalid value for required argument 'ApiCachingBehavior'")
	}
	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiCache
	err := ctx.RegisterResource("aws:appsync/apiCache:ApiCache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiCache gets an existing ApiCache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiCacheState, opts ...pulumi.ResourceOption) (*ApiCache, error) {
	var resource ApiCache
	err := ctx.ReadResource("aws:appsync/apiCache:ApiCache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiCache resources.
type apiCacheState struct {
	// Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
	ApiCachingBehavior *string `pulumi:"apiCachingBehavior"`
	// GraphQL API ID.
	ApiId *string `pulumi:"apiId"`
	// At-rest encryption flag for cache. You cannot update this setting after creation.
	AtRestEncryptionEnabled *bool `pulumi:"atRestEncryptionEnabled"`
	// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
	TransitEncryptionEnabled *bool `pulumi:"transitEncryptionEnabled"`
	// TTL in seconds for cache entries.
	Ttl *int `pulumi:"ttl"`
	// Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
	Type *string `pulumi:"type"`
}

type ApiCacheState struct {
	// Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
	ApiCachingBehavior pulumix.Input[*string]
	// GraphQL API ID.
	ApiId pulumix.Input[*string]
	// At-rest encryption flag for cache. You cannot update this setting after creation.
	AtRestEncryptionEnabled pulumix.Input[*bool]
	// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
	TransitEncryptionEnabled pulumix.Input[*bool]
	// TTL in seconds for cache entries.
	Ttl pulumix.Input[*int]
	// Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
	Type pulumix.Input[*string]
}

func (ApiCacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiCacheState)(nil)).Elem()
}

type apiCacheArgs struct {
	// Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
	ApiCachingBehavior string `pulumi:"apiCachingBehavior"`
	// GraphQL API ID.
	ApiId string `pulumi:"apiId"`
	// At-rest encryption flag for cache. You cannot update this setting after creation.
	AtRestEncryptionEnabled *bool `pulumi:"atRestEncryptionEnabled"`
	// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
	TransitEncryptionEnabled *bool `pulumi:"transitEncryptionEnabled"`
	// TTL in seconds for cache entries.
	Ttl int `pulumi:"ttl"`
	// Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ApiCache resource.
type ApiCacheArgs struct {
	// Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
	ApiCachingBehavior pulumix.Input[string]
	// GraphQL API ID.
	ApiId pulumix.Input[string]
	// At-rest encryption flag for cache. You cannot update this setting after creation.
	AtRestEncryptionEnabled pulumix.Input[*bool]
	// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
	TransitEncryptionEnabled pulumix.Input[*bool]
	// TTL in seconds for cache entries.
	Ttl pulumix.Input[int]
	// Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
	Type pulumix.Input[string]
}

func (ApiCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiCacheArgs)(nil)).Elem()
}

type ApiCacheOutput struct{ *pulumi.OutputState }

func (ApiCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiCache)(nil)).Elem()
}

func (o ApiCacheOutput) ToApiCacheOutput() ApiCacheOutput {
	return o
}

func (o ApiCacheOutput) ToApiCacheOutputWithContext(ctx context.Context) ApiCacheOutput {
	return o
}

func (o ApiCacheOutput) ToOutput(ctx context.Context) pulumix.Output[ApiCache] {
	return pulumix.Output[ApiCache]{
		OutputState: o.OutputState,
	}
}

// Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
func (o ApiCacheOutput) ApiCachingBehavior() pulumix.Output[string] {
	value := pulumix.Apply[ApiCache](o, func(v ApiCache) pulumix.Output[string] { return v.ApiCachingBehavior })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// GraphQL API ID.
func (o ApiCacheOutput) ApiId() pulumix.Output[string] {
	value := pulumix.Apply[ApiCache](o, func(v ApiCache) pulumix.Output[string] { return v.ApiId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// At-rest encryption flag for cache. You cannot update this setting after creation.
func (o ApiCacheOutput) AtRestEncryptionEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[ApiCache](o, func(v ApiCache) pulumix.Output[*bool] { return v.AtRestEncryptionEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
func (o ApiCacheOutput) TransitEncryptionEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[ApiCache](o, func(v ApiCache) pulumix.Output[*bool] { return v.TransitEncryptionEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// TTL in seconds for cache entries.
func (o ApiCacheOutput) Ttl() pulumix.Output[int] {
	value := pulumix.Apply[ApiCache](o, func(v ApiCache) pulumix.Output[int] { return v.Ttl })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
func (o ApiCacheOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[ApiCache](o, func(v ApiCache) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ApiCacheOutput{})
}
