// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Managed Streaming for Kafka Cluster Policy.
type ClusterPolicy struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn     pulumix.Output[string] `pulumi:"clusterArn"`
	CurrentVersion pulumix.Output[string] `pulumi:"currentVersion"`
	// Resource policy for cluster.
	Policy pulumix.Output[string] `pulumi:"policy"`
}

// NewClusterPolicy registers a new resource with the given unique name, arguments, and options.
func NewClusterPolicy(ctx *pulumi.Context,
	name string, args *ClusterPolicyArgs, opts ...pulumi.ResourceOption) (*ClusterPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'ClusterArn'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterPolicy
	err := ctx.RegisterResource("aws:msk/clusterPolicy:ClusterPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterPolicy gets an existing ClusterPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterPolicyState, opts ...pulumi.ResourceOption) (*ClusterPolicy, error) {
	var resource ClusterPolicy
	err := ctx.ReadResource("aws:msk/clusterPolicy:ClusterPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterPolicy resources.
type clusterPolicyState struct {
	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn     *string `pulumi:"clusterArn"`
	CurrentVersion *string `pulumi:"currentVersion"`
	// Resource policy for cluster.
	Policy *string `pulumi:"policy"`
}

type ClusterPolicyState struct {
	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn     pulumix.Input[*string]
	CurrentVersion pulumix.Input[*string]
	// Resource policy for cluster.
	Policy pulumix.Input[*string]
}

func (ClusterPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterPolicyState)(nil)).Elem()
}

type clusterPolicyArgs struct {
	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn string `pulumi:"clusterArn"`
	// Resource policy for cluster.
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a ClusterPolicy resource.
type ClusterPolicyArgs struct {
	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn pulumix.Input[string]
	// Resource policy for cluster.
	Policy pulumix.Input[string]
}

func (ClusterPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterPolicyArgs)(nil)).Elem()
}

type ClusterPolicyOutput struct{ *pulumi.OutputState }

func (ClusterPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPolicy)(nil)).Elem()
}

func (o ClusterPolicyOutput) ToClusterPolicyOutput() ClusterPolicyOutput {
	return o
}

func (o ClusterPolicyOutput) ToClusterPolicyOutputWithContext(ctx context.Context) ClusterPolicyOutput {
	return o
}

func (o ClusterPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterPolicy] {
	return pulumix.Output[ClusterPolicy]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
func (o ClusterPolicyOutput) ClusterArn() pulumix.Output[string] {
	value := pulumix.Apply[ClusterPolicy](o, func(v ClusterPolicy) pulumix.Output[string] { return v.ClusterArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ClusterPolicyOutput) CurrentVersion() pulumix.Output[string] {
	value := pulumix.Apply[ClusterPolicy](o, func(v ClusterPolicy) pulumix.Output[string] { return v.CurrentVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Resource policy for cluster.
func (o ClusterPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[ClusterPolicy](o, func(v ClusterPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ClusterPolicyOutput{})
}
