// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Attaches a traffic source to an Auto Scaling group.
//
// > **NOTE on Auto Scaling Groups, Attachments and Traffic Source Attachments:** Pulumi provides standalone Attachment (for attaching Classic Load Balancers and Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target groups) and Traffic Source Attachment (for attaching Load Balancers and VPC Lattice target groups) resources and an Auto Scaling Group resource with `loadBalancers`, `targetGroupArns` and `trafficSource` attributes. Do not use the same traffic source in more than one of these resources. Doing so will cause a conflict of attachments. A `lifecycle` configuration block can be used to suppress differences if necessary.
type TrafficSourceAttachment struct {
	pulumi.CustomResourceState

	// The name of the Auto Scaling group.
	AutoscalingGroupName pulumix.Output[string] `pulumi:"autoscalingGroupName"`
	// The unique identifiers of a traffic sources.
	TrafficSource pulumix.GPtrOutput[TrafficSourceAttachmentTrafficSource, TrafficSourceAttachmentTrafficSourceOutput] `pulumi:"trafficSource"`
}

// NewTrafficSourceAttachment registers a new resource with the given unique name, arguments, and options.
func NewTrafficSourceAttachment(ctx *pulumi.Context,
	name string, args *TrafficSourceAttachmentArgs, opts ...pulumi.ResourceOption) (*TrafficSourceAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoscalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AutoscalingGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficSourceAttachment
	err := ctx.RegisterResource("aws:autoscaling/trafficSourceAttachment:TrafficSourceAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficSourceAttachment gets an existing TrafficSourceAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficSourceAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficSourceAttachmentState, opts ...pulumi.ResourceOption) (*TrafficSourceAttachment, error) {
	var resource TrafficSourceAttachment
	err := ctx.ReadResource("aws:autoscaling/trafficSourceAttachment:TrafficSourceAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficSourceAttachment resources.
type trafficSourceAttachmentState struct {
	// The name of the Auto Scaling group.
	AutoscalingGroupName *string `pulumi:"autoscalingGroupName"`
	// The unique identifiers of a traffic sources.
	TrafficSource *TrafficSourceAttachmentTrafficSource `pulumi:"trafficSource"`
}

type TrafficSourceAttachmentState struct {
	// The name of the Auto Scaling group.
	AutoscalingGroupName pulumix.Input[*string]
	// The unique identifiers of a traffic sources.
	TrafficSource pulumix.Input[*TrafficSourceAttachmentTrafficSourceArgs]
}

func (TrafficSourceAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficSourceAttachmentState)(nil)).Elem()
}

type trafficSourceAttachmentArgs struct {
	// The name of the Auto Scaling group.
	AutoscalingGroupName string `pulumi:"autoscalingGroupName"`
	// The unique identifiers of a traffic sources.
	TrafficSource *TrafficSourceAttachmentTrafficSource `pulumi:"trafficSource"`
}

// The set of arguments for constructing a TrafficSourceAttachment resource.
type TrafficSourceAttachmentArgs struct {
	// The name of the Auto Scaling group.
	AutoscalingGroupName pulumix.Input[string]
	// The unique identifiers of a traffic sources.
	TrafficSource pulumix.Input[*TrafficSourceAttachmentTrafficSourceArgs]
}

func (TrafficSourceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficSourceAttachmentArgs)(nil)).Elem()
}

type TrafficSourceAttachmentOutput struct{ *pulumi.OutputState }

func (TrafficSourceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficSourceAttachment)(nil)).Elem()
}

func (o TrafficSourceAttachmentOutput) ToTrafficSourceAttachmentOutput() TrafficSourceAttachmentOutput {
	return o
}

func (o TrafficSourceAttachmentOutput) ToTrafficSourceAttachmentOutputWithContext(ctx context.Context) TrafficSourceAttachmentOutput {
	return o
}

func (o TrafficSourceAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[TrafficSourceAttachment] {
	return pulumix.Output[TrafficSourceAttachment]{
		OutputState: o.OutputState,
	}
}

// The name of the Auto Scaling group.
func (o TrafficSourceAttachmentOutput) AutoscalingGroupName() pulumix.Output[string] {
	value := pulumix.Apply[TrafficSourceAttachment](o, func(v TrafficSourceAttachment) pulumix.Output[string] { return v.AutoscalingGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The unique identifiers of a traffic sources.
func (o TrafficSourceAttachmentOutput) TrafficSource() pulumix.GPtrOutput[TrafficSourceAttachmentTrafficSource, TrafficSourceAttachmentTrafficSourceOutput] {
	value := pulumix.Apply[TrafficSourceAttachment](o, func(v TrafficSourceAttachment) pulumix.GPtrOutput[TrafficSourceAttachmentTrafficSource, TrafficSourceAttachmentTrafficSourceOutput] {
		return v.TrafficSource
	})
	unwrapped := pulumix.Flatten[*TrafficSourceAttachmentTrafficSource, pulumix.GPtrOutput[TrafficSourceAttachmentTrafficSource, TrafficSourceAttachmentTrafficSourceOutput]](value)
	return pulumix.GPtrOutput[TrafficSourceAttachmentTrafficSource, TrafficSourceAttachmentTrafficSourceOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TrafficSourceAttachmentOutput{})
}
