// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS Organizations Policies For Target.
func GetPoliciesForTarget(ctx *pulumi.Context, args *GetPoliciesForTargetArgs, opts ...pulumi.InvokeOption) (*GetPoliciesForTargetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPoliciesForTargetResult
	err := ctx.Invoke("aws:organizations/getPoliciesForTarget:getPoliciesForTarget", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPoliciesForTarget.
type GetPoliciesForTargetArgs struct {
	// Must supply one of the 4 different policy filters for a target (SERVICE_CONTROL_POLICY | TAG_POLICY | BACKUP_POLICY | AISERVICES_OPT_OUT_POLICY)
	Filter string `pulumi:"filter"`
	// The root (string that begins with "r-" followed by 4-32 lowercase letters or digits), account (12 digit string), or Organizational Unit (string starting with "ou-" followed by 4-32 lowercase letters or digits. This string is followed by a second "-" dash and from 8-32 additional lowercase letters or digits.)
	TargetId string `pulumi:"targetId"`
}

// A collection of values returned by getPoliciesForTarget.
type GetPoliciesForTargetResult struct {
	Filter string `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of all the policy ids found.
	Ids      []string `pulumi:"ids"`
	TargetId string   `pulumi:"targetId"`
}

func GetPoliciesForTargetOutput(ctx *pulumi.Context, args GetPoliciesForTargetOutputArgs, opts ...pulumi.InvokeOption) GetPoliciesForTargetResultOutput {
	outputResult := pulumix.ApplyErr[*GetPoliciesForTargetArgs](args.ToOutput(), func(plainArgs *GetPoliciesForTargetArgs) (*GetPoliciesForTargetResult, error) {
		return GetPoliciesForTarget(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetPoliciesForTargetResultOutput, *GetPoliciesForTargetResult](outputResult)
}

// A collection of arguments for invoking getPoliciesForTarget.
type GetPoliciesForTargetOutputArgs struct {
	// Must supply one of the 4 different policy filters for a target (SERVICE_CONTROL_POLICY | TAG_POLICY | BACKUP_POLICY | AISERVICES_OPT_OUT_POLICY)
	Filter pulumix.Input[string] `pulumi:"filter"`
	// The root (string that begins with "r-" followed by 4-32 lowercase letters or digits), account (12 digit string), or Organizational Unit (string starting with "ou-" followed by 4-32 lowercase letters or digits. This string is followed by a second "-" dash and from 8-32 additional lowercase letters or digits.)
	TargetId pulumix.Input[string] `pulumi:"targetId"`
}

func (args GetPoliciesForTargetOutputArgs) ToOutput() pulumix.Output[*GetPoliciesForTargetArgs] {
	allArgs := pulumix.All(
		args.Filter.ToOutput(context.Background()).AsAny(),
		args.TargetId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetPoliciesForTargetArgs {
		return &GetPoliciesForTargetArgs{
			Filter:   resolvedArgs[0].(string),
			TargetId: resolvedArgs[1].(string),
		}
	})
}

type GetPoliciesForTargetResultOutput struct{ *pulumi.OutputState }

func (GetPoliciesForTargetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPoliciesForTargetResult)(nil)).Elem()
}

func (o GetPoliciesForTargetResultOutput) ToOutput(context.Context) pulumix.Output[*GetPoliciesForTargetResult] {
	return pulumix.Output[*GetPoliciesForTargetResult]{
		OutputState: o.OutputState,
	}
}

func (o GetPoliciesForTargetResultOutput) Filter() pulumix.Output[string] {
	return pulumix.Apply[*GetPoliciesForTargetResult](o, func(v *GetPoliciesForTargetResult) string { return v.Filter })
}

func (o GetPoliciesForTargetResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetPoliciesForTargetResult](o, func(v *GetPoliciesForTargetResult) string { return v.Id })
}

func (o GetPoliciesForTargetResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetPoliciesForTargetResult](o, func(v *GetPoliciesForTargetResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetPoliciesForTargetResultOutput) TargetId() pulumix.Output[string] {
	return pulumix.Apply[*GetPoliciesForTargetResult](o, func(v *GetPoliciesForTargetResult) string { return v.TargetId })
}
