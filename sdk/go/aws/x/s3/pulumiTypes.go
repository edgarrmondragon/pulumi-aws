// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AccessPointPublicAccessBlockConfiguration struct {
	// Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing policies or ACLs. When set to `true` causes the following behavior:
	// * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
	// * PUT Object calls fail if the request includes a public ACL.
	// * PUT Bucket calls fail if the request includes a public ACL.
	BlockPublicAcls *bool `pulumi:"blockPublicAcls"`
	// Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing bucket policies. When set to `true` causes Amazon S3 to:
	// * Reject calls to PUT Bucket policy if the specified bucket policy allows public access.
	BlockPublicPolicy *bool `pulumi:"blockPublicPolicy"`
	// Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to `true` causes Amazon S3 to:
	// * Ignore all public ACLs on buckets in this account and any objects that they contain.
	IgnorePublicAcls *bool `pulumi:"ignorePublicAcls"`
	// Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to `true`:
	// * Only the bucket owner and AWS Services can access buckets with public policies.
	RestrictPublicBuckets *bool `pulumi:"restrictPublicBuckets"`
}

type AccessPointPublicAccessBlockConfigurationArgs struct {
	// Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing policies or ACLs. When set to `true` causes the following behavior:
	// * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
	// * PUT Object calls fail if the request includes a public ACL.
	// * PUT Bucket calls fail if the request includes a public ACL.
	BlockPublicAcls pulumix.Input[*bool] `pulumi:"blockPublicAcls"`
	// Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing bucket policies. When set to `true` causes Amazon S3 to:
	// * Reject calls to PUT Bucket policy if the specified bucket policy allows public access.
	BlockPublicPolicy pulumix.Input[*bool] `pulumi:"blockPublicPolicy"`
	// Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to `true` causes Amazon S3 to:
	// * Ignore all public ACLs on buckets in this account and any objects that they contain.
	IgnorePublicAcls pulumix.Input[*bool] `pulumi:"ignorePublicAcls"`
	// Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to `true`:
	// * Only the bucket owner and AWS Services can access buckets with public policies.
	RestrictPublicBuckets pulumix.Input[*bool] `pulumi:"restrictPublicBuckets"`
}

func (AccessPointPublicAccessBlockConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPublicAccessBlockConfiguration)(nil)).Elem()
}

func (i AccessPointPublicAccessBlockConfigurationArgs) ToAccessPointPublicAccessBlockConfigurationOutput() AccessPointPublicAccessBlockConfigurationOutput {
	return i.ToAccessPointPublicAccessBlockConfigurationOutputWithContext(context.Background())
}

func (i AccessPointPublicAccessBlockConfigurationArgs) ToAccessPointPublicAccessBlockConfigurationOutputWithContext(ctx context.Context) AccessPointPublicAccessBlockConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPublicAccessBlockConfigurationOutput)
}

func (i *AccessPointPublicAccessBlockConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*AccessPointPublicAccessBlockConfigurationArgs] {
	return pulumix.Val(i)
}

type AccessPointPublicAccessBlockConfigurationOutput struct{ *pulumi.OutputState }

func (AccessPointPublicAccessBlockConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPublicAccessBlockConfiguration)(nil)).Elem()
}

func (o AccessPointPublicAccessBlockConfigurationOutput) ToAccessPointPublicAccessBlockConfigurationOutput() AccessPointPublicAccessBlockConfigurationOutput {
	return o
}

func (o AccessPointPublicAccessBlockConfigurationOutput) ToAccessPointPublicAccessBlockConfigurationOutputWithContext(ctx context.Context) AccessPointPublicAccessBlockConfigurationOutput {
	return o
}

func (o AccessPointPublicAccessBlockConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPointPublicAccessBlockConfiguration] {
	return pulumix.Output[AccessPointPublicAccessBlockConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing policies or ACLs. When set to `true` causes the following behavior:
// * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
// * PUT Object calls fail if the request includes a public ACL.
// * PUT Bucket calls fail if the request includes a public ACL.
func (o AccessPointPublicAccessBlockConfigurationOutput) BlockPublicAcls() pulumix.Output[*bool] {
	return pulumix.Apply[AccessPointPublicAccessBlockConfiguration](o, func(v AccessPointPublicAccessBlockConfiguration) *bool { return v.BlockPublicAcls })
}

// Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing bucket policies. When set to `true` causes Amazon S3 to:
// * Reject calls to PUT Bucket policy if the specified bucket policy allows public access.
func (o AccessPointPublicAccessBlockConfigurationOutput) BlockPublicPolicy() pulumix.Output[*bool] {
	return pulumix.Apply[AccessPointPublicAccessBlockConfiguration](o, func(v AccessPointPublicAccessBlockConfiguration) *bool { return v.BlockPublicPolicy })
}

// Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to `true` causes Amazon S3 to:
// * Ignore all public ACLs on buckets in this account and any objects that they contain.
func (o AccessPointPublicAccessBlockConfigurationOutput) IgnorePublicAcls() pulumix.Output[*bool] {
	return pulumix.Apply[AccessPointPublicAccessBlockConfiguration](o, func(v AccessPointPublicAccessBlockConfiguration) *bool { return v.IgnorePublicAcls })
}

// Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to `true`:
// * Only the bucket owner and AWS Services can access buckets with public policies.
func (o AccessPointPublicAccessBlockConfigurationOutput) RestrictPublicBuckets() pulumix.Output[*bool] {
	return pulumix.Apply[AccessPointPublicAccessBlockConfiguration](o, func(v AccessPointPublicAccessBlockConfiguration) *bool { return v.RestrictPublicBuckets })
}

type AccessPointVpcConfiguration struct {
	// This access point will only allow connections from the specified VPC ID.
	VpcId string `pulumi:"vpcId"`
}

type AccessPointVpcConfigurationArgs struct {
	// This access point will only allow connections from the specified VPC ID.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (AccessPointVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointVpcConfiguration)(nil)).Elem()
}

func (i AccessPointVpcConfigurationArgs) ToAccessPointVpcConfigurationOutput() AccessPointVpcConfigurationOutput {
	return i.ToAccessPointVpcConfigurationOutputWithContext(context.Background())
}

func (i AccessPointVpcConfigurationArgs) ToAccessPointVpcConfigurationOutputWithContext(ctx context.Context) AccessPointVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointVpcConfigurationOutput)
}

func (i *AccessPointVpcConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*AccessPointVpcConfigurationArgs] {
	return pulumix.Val(i)
}

type AccessPointVpcConfigurationOutput struct{ *pulumi.OutputState }

func (AccessPointVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointVpcConfiguration)(nil)).Elem()
}

func (o AccessPointVpcConfigurationOutput) ToAccessPointVpcConfigurationOutput() AccessPointVpcConfigurationOutput {
	return o
}

func (o AccessPointVpcConfigurationOutput) ToAccessPointVpcConfigurationOutputWithContext(ctx context.Context) AccessPointVpcConfigurationOutput {
	return o
}

func (o AccessPointVpcConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPointVpcConfiguration] {
	return pulumix.Output[AccessPointVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

// This access point will only allow connections from the specified VPC ID.
func (o AccessPointVpcConfigurationOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[AccessPointVpcConfiguration](o, func(v AccessPointVpcConfiguration) string { return v.VpcId })
}

type AnalyticsConfigurationFilter struct {
	// Object prefix for filtering.
	Prefix *string `pulumi:"prefix"`
	// Set of object tags for filtering.
	Tags map[string]string `pulumi:"tags"`
}

type AnalyticsConfigurationFilterArgs struct {
	// Object prefix for filtering.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Set of object tags for filtering.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (AnalyticsConfigurationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfigurationFilter)(nil)).Elem()
}

func (i AnalyticsConfigurationFilterArgs) ToAnalyticsConfigurationFilterOutput() AnalyticsConfigurationFilterOutput {
	return i.ToAnalyticsConfigurationFilterOutputWithContext(context.Background())
}

func (i AnalyticsConfigurationFilterArgs) ToAnalyticsConfigurationFilterOutputWithContext(ctx context.Context) AnalyticsConfigurationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsConfigurationFilterOutput)
}

func (i *AnalyticsConfigurationFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsConfigurationFilterArgs] {
	return pulumix.Val(i)
}

type AnalyticsConfigurationFilterOutput struct{ *pulumi.OutputState }

func (AnalyticsConfigurationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfigurationFilter)(nil)).Elem()
}

func (o AnalyticsConfigurationFilterOutput) ToAnalyticsConfigurationFilterOutput() AnalyticsConfigurationFilterOutput {
	return o
}

func (o AnalyticsConfigurationFilterOutput) ToAnalyticsConfigurationFilterOutputWithContext(ctx context.Context) AnalyticsConfigurationFilterOutput {
	return o
}

func (o AnalyticsConfigurationFilterOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConfigurationFilter] {
	return pulumix.Output[AnalyticsConfigurationFilter]{
		OutputState: o.OutputState,
	}
}

// Object prefix for filtering.
func (o AnalyticsConfigurationFilterOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsConfigurationFilter](o, func(v AnalyticsConfigurationFilter) *string { return v.Prefix })
}

// Set of object tags for filtering.
func (o AnalyticsConfigurationFilterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[AnalyticsConfigurationFilter](o, func(v AnalyticsConfigurationFilter) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type AnalyticsConfigurationStorageClassAnalysis struct {
	// Data export configuration (documented below).
	DataExport AnalyticsConfigurationStorageClassAnalysisDataExport `pulumi:"dataExport"`
}

type AnalyticsConfigurationStorageClassAnalysisArgs struct {
	// Data export configuration (documented below).
	DataExport pulumix.Input[*AnalyticsConfigurationStorageClassAnalysisDataExportArgs] `pulumi:"dataExport"`
}

func (AnalyticsConfigurationStorageClassAnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfigurationStorageClassAnalysis)(nil)).Elem()
}

func (i AnalyticsConfigurationStorageClassAnalysisArgs) ToAnalyticsConfigurationStorageClassAnalysisOutput() AnalyticsConfigurationStorageClassAnalysisOutput {
	return i.ToAnalyticsConfigurationStorageClassAnalysisOutputWithContext(context.Background())
}

func (i AnalyticsConfigurationStorageClassAnalysisArgs) ToAnalyticsConfigurationStorageClassAnalysisOutputWithContext(ctx context.Context) AnalyticsConfigurationStorageClassAnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsConfigurationStorageClassAnalysisOutput)
}

func (i *AnalyticsConfigurationStorageClassAnalysisArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsConfigurationStorageClassAnalysisArgs] {
	return pulumix.Val(i)
}

type AnalyticsConfigurationStorageClassAnalysisOutput struct{ *pulumi.OutputState }

func (AnalyticsConfigurationStorageClassAnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfigurationStorageClassAnalysis)(nil)).Elem()
}

func (o AnalyticsConfigurationStorageClassAnalysisOutput) ToAnalyticsConfigurationStorageClassAnalysisOutput() AnalyticsConfigurationStorageClassAnalysisOutput {
	return o
}

func (o AnalyticsConfigurationStorageClassAnalysisOutput) ToAnalyticsConfigurationStorageClassAnalysisOutputWithContext(ctx context.Context) AnalyticsConfigurationStorageClassAnalysisOutput {
	return o
}

func (o AnalyticsConfigurationStorageClassAnalysisOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConfigurationStorageClassAnalysis] {
	return pulumix.Output[AnalyticsConfigurationStorageClassAnalysis]{
		OutputState: o.OutputState,
	}
}

// Data export configuration (documented below).
func (o AnalyticsConfigurationStorageClassAnalysisOutput) DataExport() pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysisDataExport, AnalyticsConfigurationStorageClassAnalysisDataExportOutput] {
	value := pulumix.Apply[AnalyticsConfigurationStorageClassAnalysis](o, func(v AnalyticsConfigurationStorageClassAnalysis) AnalyticsConfigurationStorageClassAnalysisDataExport {
		return v.DataExport
	})
	return pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysisDataExport, AnalyticsConfigurationStorageClassAnalysisDataExportOutput]{OutputState: value.OutputState}
}

type AnalyticsConfigurationStorageClassAnalysisDataExport struct {
	// Specifies the destination for the exported analytics data (documented below).
	Destination AnalyticsConfigurationStorageClassAnalysisDataExportDestination `pulumi:"destination"`
	// Schema version of exported analytics data. Allowed values: `V_1`. Default value: `V_1`.
	OutputSchemaVersion *string `pulumi:"outputSchemaVersion"`
}

type AnalyticsConfigurationStorageClassAnalysisDataExportArgs struct {
	// Specifies the destination for the exported analytics data (documented below).
	Destination pulumix.Input[*AnalyticsConfigurationStorageClassAnalysisDataExportDestinationArgs] `pulumi:"destination"`
	// Schema version of exported analytics data. Allowed values: `V_1`. Default value: `V_1`.
	OutputSchemaVersion pulumix.Input[*string] `pulumi:"outputSchemaVersion"`
}

func (AnalyticsConfigurationStorageClassAnalysisDataExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfigurationStorageClassAnalysisDataExport)(nil)).Elem()
}

func (i AnalyticsConfigurationStorageClassAnalysisDataExportArgs) ToAnalyticsConfigurationStorageClassAnalysisDataExportOutput() AnalyticsConfigurationStorageClassAnalysisDataExportOutput {
	return i.ToAnalyticsConfigurationStorageClassAnalysisDataExportOutputWithContext(context.Background())
}

func (i AnalyticsConfigurationStorageClassAnalysisDataExportArgs) ToAnalyticsConfigurationStorageClassAnalysisDataExportOutputWithContext(ctx context.Context) AnalyticsConfigurationStorageClassAnalysisDataExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsConfigurationStorageClassAnalysisDataExportOutput)
}

func (i *AnalyticsConfigurationStorageClassAnalysisDataExportArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsConfigurationStorageClassAnalysisDataExportArgs] {
	return pulumix.Val(i)
}

type AnalyticsConfigurationStorageClassAnalysisDataExportOutput struct{ *pulumi.OutputState }

func (AnalyticsConfigurationStorageClassAnalysisDataExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfigurationStorageClassAnalysisDataExport)(nil)).Elem()
}

func (o AnalyticsConfigurationStorageClassAnalysisDataExportOutput) ToAnalyticsConfigurationStorageClassAnalysisDataExportOutput() AnalyticsConfigurationStorageClassAnalysisDataExportOutput {
	return o
}

func (o AnalyticsConfigurationStorageClassAnalysisDataExportOutput) ToAnalyticsConfigurationStorageClassAnalysisDataExportOutputWithContext(ctx context.Context) AnalyticsConfigurationStorageClassAnalysisDataExportOutput {
	return o
}

func (o AnalyticsConfigurationStorageClassAnalysisDataExportOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConfigurationStorageClassAnalysisDataExport] {
	return pulumix.Output[AnalyticsConfigurationStorageClassAnalysisDataExport]{
		OutputState: o.OutputState,
	}
}

// Specifies the destination for the exported analytics data (documented below).
func (o AnalyticsConfigurationStorageClassAnalysisDataExportOutput) Destination() pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysisDataExportDestination, AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput] {
	value := pulumix.Apply[AnalyticsConfigurationStorageClassAnalysisDataExport](o, func(v AnalyticsConfigurationStorageClassAnalysisDataExport) AnalyticsConfigurationStorageClassAnalysisDataExportDestination {
		return v.Destination
	})
	return pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysisDataExportDestination, AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput]{OutputState: value.OutputState}
}

// Schema version of exported analytics data. Allowed values: `V_1`. Default value: `V_1`.
func (o AnalyticsConfigurationStorageClassAnalysisDataExportOutput) OutputSchemaVersion() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsConfigurationStorageClassAnalysisDataExport](o, func(v AnalyticsConfigurationStorageClassAnalysisDataExport) *string { return v.OutputSchemaVersion })
}

type AnalyticsConfigurationStorageClassAnalysisDataExportDestination struct {
	// Analytics data export currently only supports an S3 bucket destination (documented below).
	//
	// The `s3BucketDestination` configuration supports the following:
	S3BucketDestination AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination `pulumi:"s3BucketDestination"`
}

type AnalyticsConfigurationStorageClassAnalysisDataExportDestinationArgs struct {
	// Analytics data export currently only supports an S3 bucket destination (documented below).
	//
	// The `s3BucketDestination` configuration supports the following:
	S3BucketDestination pulumix.Input[*AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationArgs] `pulumi:"s3BucketDestination"`
}

func (AnalyticsConfigurationStorageClassAnalysisDataExportDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfigurationStorageClassAnalysisDataExportDestination)(nil)).Elem()
}

func (i AnalyticsConfigurationStorageClassAnalysisDataExportDestinationArgs) ToAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput() AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput {
	return i.ToAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutputWithContext(context.Background())
}

func (i AnalyticsConfigurationStorageClassAnalysisDataExportDestinationArgs) ToAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutputWithContext(ctx context.Context) AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput)
}

func (i *AnalyticsConfigurationStorageClassAnalysisDataExportDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsConfigurationStorageClassAnalysisDataExportDestinationArgs] {
	return pulumix.Val(i)
}

type AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput struct{ *pulumi.OutputState }

func (AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfigurationStorageClassAnalysisDataExportDestination)(nil)).Elem()
}

func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput) ToAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput() AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput {
	return o
}

func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput) ToAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutputWithContext(ctx context.Context) AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput {
	return o
}

func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConfigurationStorageClassAnalysisDataExportDestination] {
	return pulumix.Output[AnalyticsConfigurationStorageClassAnalysisDataExportDestination]{
		OutputState: o.OutputState,
	}
}

// Analytics data export currently only supports an S3 bucket destination (documented below).
//
// The `s3BucketDestination` configuration supports the following:
func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput) S3BucketDestination() pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination, AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput] {
	value := pulumix.Apply[AnalyticsConfigurationStorageClassAnalysisDataExportDestination](o, func(v AnalyticsConfigurationStorageClassAnalysisDataExportDestination) AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination {
		return v.S3BucketDestination
	})
	return pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination, AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput]{OutputState: value.OutputState}
}

type AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination struct {
	// Account ID that owns the destination bucket.
	BucketAccountId *string `pulumi:"bucketAccountId"`
	// ARN of the destination bucket.
	BucketArn string `pulumi:"bucketArn"`
	// Output format of exported analytics data. Allowed values: `CSV`. Default value: `CSV`.
	Format *string `pulumi:"format"`
	// Object prefix for filtering.
	Prefix *string `pulumi:"prefix"`
}

type AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationArgs struct {
	// Account ID that owns the destination bucket.
	BucketAccountId pulumix.Input[*string] `pulumi:"bucketAccountId"`
	// ARN of the destination bucket.
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// Output format of exported analytics data. Allowed values: `CSV`. Default value: `CSV`.
	Format pulumix.Input[*string] `pulumi:"format"`
	// Object prefix for filtering.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination)(nil)).Elem()
}

func (i AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationArgs) ToAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput() AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput {
	return i.ToAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutputWithContext(context.Background())
}

func (i AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationArgs) ToAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutputWithContext(ctx context.Context) AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput)
}

func (i *AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationArgs] {
	return pulumix.Val(i)
}

type AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput struct{ *pulumi.OutputState }

func (AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination)(nil)).Elem()
}

func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput) ToAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput() AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput {
	return o
}

func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput) ToAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutputWithContext(ctx context.Context) AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput {
	return o
}

func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination] {
	return pulumix.Output[AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination]{
		OutputState: o.OutputState,
	}
}

// Account ID that owns the destination bucket.
func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput) BucketAccountId() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination](o, func(v AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination) *string {
		return v.BucketAccountId
	})
}

// ARN of the destination bucket.
func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination](o, func(v AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination) string {
		return v.BucketArn
	})
}

// Output format of exported analytics data. Allowed values: `CSV`. Default value: `CSV`.
func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput) Format() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination](o, func(v AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination) *string {
		return v.Format
	})
}

// Object prefix for filtering.
func (o AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination](o, func(v AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination) *string {
		return v.Prefix
	})
}

type BucketAclV2AccessControlPolicy struct {
	// Set of `grant` configuration blocks. See below.
	Grants []BucketAclV2AccessControlPolicyGrant `pulumi:"grants"`
	// Configuration block of the bucket owner's display name and ID. See below.
	Owner BucketAclV2AccessControlPolicyOwner `pulumi:"owner"`
}

type BucketAclV2AccessControlPolicyArgs struct {
	// Set of `grant` configuration blocks. See below.
	Grants pulumix.Input[[]*BucketAclV2AccessControlPolicyGrantArgs] `pulumi:"grants"`
	// Configuration block of the bucket owner's display name and ID. See below.
	Owner pulumix.Input[*BucketAclV2AccessControlPolicyOwnerArgs] `pulumi:"owner"`
}

func (BucketAclV2AccessControlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketAclV2AccessControlPolicy)(nil)).Elem()
}

func (i BucketAclV2AccessControlPolicyArgs) ToBucketAclV2AccessControlPolicyOutput() BucketAclV2AccessControlPolicyOutput {
	return i.ToBucketAclV2AccessControlPolicyOutputWithContext(context.Background())
}

func (i BucketAclV2AccessControlPolicyArgs) ToBucketAclV2AccessControlPolicyOutputWithContext(ctx context.Context) BucketAclV2AccessControlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAclV2AccessControlPolicyOutput)
}

func (i *BucketAclV2AccessControlPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketAclV2AccessControlPolicyArgs] {
	return pulumix.Val(i)
}

type BucketAclV2AccessControlPolicyOutput struct{ *pulumi.OutputState }

func (BucketAclV2AccessControlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketAclV2AccessControlPolicy)(nil)).Elem()
}

func (o BucketAclV2AccessControlPolicyOutput) ToBucketAclV2AccessControlPolicyOutput() BucketAclV2AccessControlPolicyOutput {
	return o
}

func (o BucketAclV2AccessControlPolicyOutput) ToBucketAclV2AccessControlPolicyOutputWithContext(ctx context.Context) BucketAclV2AccessControlPolicyOutput {
	return o
}

func (o BucketAclV2AccessControlPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[BucketAclV2AccessControlPolicy] {
	return pulumix.Output[BucketAclV2AccessControlPolicy]{
		OutputState: o.OutputState,
	}
}

// Set of `grant` configuration blocks. See below.
func (o BucketAclV2AccessControlPolicyOutput) Grants() pulumix.GArrayOutput[BucketAclV2AccessControlPolicyGrant, BucketAclV2AccessControlPolicyGrantOutput] {
	value := pulumix.Apply[BucketAclV2AccessControlPolicy](o, func(v BucketAclV2AccessControlPolicy) []BucketAclV2AccessControlPolicyGrant { return v.Grants })
	return pulumix.GArrayOutput[BucketAclV2AccessControlPolicyGrant, BucketAclV2AccessControlPolicyGrantOutput]{OutputState: value.OutputState}
}

// Configuration block of the bucket owner's display name and ID. See below.
func (o BucketAclV2AccessControlPolicyOutput) Owner() pulumix.GPtrOutput[BucketAclV2AccessControlPolicyOwner, BucketAclV2AccessControlPolicyOwnerOutput] {
	value := pulumix.Apply[BucketAclV2AccessControlPolicy](o, func(v BucketAclV2AccessControlPolicy) BucketAclV2AccessControlPolicyOwner { return v.Owner })
	return pulumix.GPtrOutput[BucketAclV2AccessControlPolicyOwner, BucketAclV2AccessControlPolicyOwnerOutput]{OutputState: value.OutputState}
}

type BucketAclV2AccessControlPolicyGrant struct {
	// Configuration block for the person being granted permissions. See below.
	Grantee *BucketAclV2AccessControlPolicyGrantGrantee `pulumi:"grantee"`
	// Logging permissions assigned to the grantee for the bucket.
	Permission string `pulumi:"permission"`
}

type BucketAclV2AccessControlPolicyGrantArgs struct {
	// Configuration block for the person being granted permissions. See below.
	Grantee pulumix.Input[*BucketAclV2AccessControlPolicyGrantGranteeArgs] `pulumi:"grantee"`
	// Logging permissions assigned to the grantee for the bucket.
	Permission pulumix.Input[string] `pulumi:"permission"`
}

func (BucketAclV2AccessControlPolicyGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketAclV2AccessControlPolicyGrant)(nil)).Elem()
}

func (i BucketAclV2AccessControlPolicyGrantArgs) ToBucketAclV2AccessControlPolicyGrantOutput() BucketAclV2AccessControlPolicyGrantOutput {
	return i.ToBucketAclV2AccessControlPolicyGrantOutputWithContext(context.Background())
}

func (i BucketAclV2AccessControlPolicyGrantArgs) ToBucketAclV2AccessControlPolicyGrantOutputWithContext(ctx context.Context) BucketAclV2AccessControlPolicyGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAclV2AccessControlPolicyGrantOutput)
}

func (i *BucketAclV2AccessControlPolicyGrantArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketAclV2AccessControlPolicyGrantArgs] {
	return pulumix.Val(i)
}

type BucketAclV2AccessControlPolicyGrantOutput struct{ *pulumi.OutputState }

func (BucketAclV2AccessControlPolicyGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketAclV2AccessControlPolicyGrant)(nil)).Elem()
}

func (o BucketAclV2AccessControlPolicyGrantOutput) ToBucketAclV2AccessControlPolicyGrantOutput() BucketAclV2AccessControlPolicyGrantOutput {
	return o
}

func (o BucketAclV2AccessControlPolicyGrantOutput) ToBucketAclV2AccessControlPolicyGrantOutputWithContext(ctx context.Context) BucketAclV2AccessControlPolicyGrantOutput {
	return o
}

func (o BucketAclV2AccessControlPolicyGrantOutput) ToOutput(ctx context.Context) pulumix.Output[BucketAclV2AccessControlPolicyGrant] {
	return pulumix.Output[BucketAclV2AccessControlPolicyGrant]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the person being granted permissions. See below.
func (o BucketAclV2AccessControlPolicyGrantOutput) Grantee() pulumix.GPtrOutput[BucketAclV2AccessControlPolicyGrantGrantee, BucketAclV2AccessControlPolicyGrantGranteeOutput] {
	value := pulumix.Apply[BucketAclV2AccessControlPolicyGrant](o, func(v BucketAclV2AccessControlPolicyGrant) *BucketAclV2AccessControlPolicyGrantGrantee {
		return v.Grantee
	})
	return pulumix.GPtrOutput[BucketAclV2AccessControlPolicyGrantGrantee, BucketAclV2AccessControlPolicyGrantGranteeOutput]{OutputState: value.OutputState}
}

// Logging permissions assigned to the grantee for the bucket.
func (o BucketAclV2AccessControlPolicyGrantOutput) Permission() pulumix.Output[string] {
	return pulumix.Apply[BucketAclV2AccessControlPolicyGrant](o, func(v BucketAclV2AccessControlPolicyGrant) string { return v.Permission })
}

type BucketAclV2AccessControlPolicyGrantGrantee struct {
	// Display name of the owner.
	DisplayName *string `pulumi:"displayName"`
	// Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
	EmailAddress *string `pulumi:"emailAddress"`
	// Canonical user ID of the grantee.
	Id *string `pulumi:"id"`
	// Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
	Type string `pulumi:"type"`
	// URI of the grantee group.
	Uri *string `pulumi:"uri"`
}

type BucketAclV2AccessControlPolicyGrantGranteeArgs struct {
	// Display name of the owner.
	DisplayName pulumix.Input[*string] `pulumi:"displayName"`
	// Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
	EmailAddress pulumix.Input[*string] `pulumi:"emailAddress"`
	// Canonical user ID of the grantee.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
	Type pulumix.Input[string] `pulumi:"type"`
	// URI of the grantee group.
	Uri pulumix.Input[*string] `pulumi:"uri"`
}

func (BucketAclV2AccessControlPolicyGrantGranteeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketAclV2AccessControlPolicyGrantGrantee)(nil)).Elem()
}

func (i BucketAclV2AccessControlPolicyGrantGranteeArgs) ToBucketAclV2AccessControlPolicyGrantGranteeOutput() BucketAclV2AccessControlPolicyGrantGranteeOutput {
	return i.ToBucketAclV2AccessControlPolicyGrantGranteeOutputWithContext(context.Background())
}

func (i BucketAclV2AccessControlPolicyGrantGranteeArgs) ToBucketAclV2AccessControlPolicyGrantGranteeOutputWithContext(ctx context.Context) BucketAclV2AccessControlPolicyGrantGranteeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAclV2AccessControlPolicyGrantGranteeOutput)
}

func (i *BucketAclV2AccessControlPolicyGrantGranteeArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketAclV2AccessControlPolicyGrantGranteeArgs] {
	return pulumix.Val(i)
}

type BucketAclV2AccessControlPolicyGrantGranteeOutput struct{ *pulumi.OutputState }

func (BucketAclV2AccessControlPolicyGrantGranteeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketAclV2AccessControlPolicyGrantGrantee)(nil)).Elem()
}

func (o BucketAclV2AccessControlPolicyGrantGranteeOutput) ToBucketAclV2AccessControlPolicyGrantGranteeOutput() BucketAclV2AccessControlPolicyGrantGranteeOutput {
	return o
}

func (o BucketAclV2AccessControlPolicyGrantGranteeOutput) ToBucketAclV2AccessControlPolicyGrantGranteeOutputWithContext(ctx context.Context) BucketAclV2AccessControlPolicyGrantGranteeOutput {
	return o
}

func (o BucketAclV2AccessControlPolicyGrantGranteeOutput) ToOutput(ctx context.Context) pulumix.Output[BucketAclV2AccessControlPolicyGrantGrantee] {
	return pulumix.Output[BucketAclV2AccessControlPolicyGrantGrantee]{
		OutputState: o.OutputState,
	}
}

// Display name of the owner.
func (o BucketAclV2AccessControlPolicyGrantGranteeOutput) DisplayName() pulumix.Output[*string] {
	return pulumix.Apply[BucketAclV2AccessControlPolicyGrantGrantee](o, func(v BucketAclV2AccessControlPolicyGrantGrantee) *string { return v.DisplayName })
}

// Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
func (o BucketAclV2AccessControlPolicyGrantGranteeOutput) EmailAddress() pulumix.Output[*string] {
	return pulumix.Apply[BucketAclV2AccessControlPolicyGrantGrantee](o, func(v BucketAclV2AccessControlPolicyGrantGrantee) *string { return v.EmailAddress })
}

// Canonical user ID of the grantee.
func (o BucketAclV2AccessControlPolicyGrantGranteeOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketAclV2AccessControlPolicyGrantGrantee](o, func(v BucketAclV2AccessControlPolicyGrantGrantee) *string { return v.Id })
}

// Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
func (o BucketAclV2AccessControlPolicyGrantGranteeOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[BucketAclV2AccessControlPolicyGrantGrantee](o, func(v BucketAclV2AccessControlPolicyGrantGrantee) string { return v.Type })
}

// URI of the grantee group.
func (o BucketAclV2AccessControlPolicyGrantGranteeOutput) Uri() pulumix.Output[*string] {
	return pulumix.Apply[BucketAclV2AccessControlPolicyGrantGrantee](o, func(v BucketAclV2AccessControlPolicyGrantGrantee) *string { return v.Uri })
}

type BucketAclV2AccessControlPolicyOwner struct {
	// Display name of the owner.
	DisplayName *string `pulumi:"displayName"`
	// ID of the owner.
	Id string `pulumi:"id"`
}

type BucketAclV2AccessControlPolicyOwnerArgs struct {
	// Display name of the owner.
	DisplayName pulumix.Input[*string] `pulumi:"displayName"`
	// ID of the owner.
	Id pulumix.Input[string] `pulumi:"id"`
}

func (BucketAclV2AccessControlPolicyOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketAclV2AccessControlPolicyOwner)(nil)).Elem()
}

func (i BucketAclV2AccessControlPolicyOwnerArgs) ToBucketAclV2AccessControlPolicyOwnerOutput() BucketAclV2AccessControlPolicyOwnerOutput {
	return i.ToBucketAclV2AccessControlPolicyOwnerOutputWithContext(context.Background())
}

func (i BucketAclV2AccessControlPolicyOwnerArgs) ToBucketAclV2AccessControlPolicyOwnerOutputWithContext(ctx context.Context) BucketAclV2AccessControlPolicyOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAclV2AccessControlPolicyOwnerOutput)
}

func (i *BucketAclV2AccessControlPolicyOwnerArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketAclV2AccessControlPolicyOwnerArgs] {
	return pulumix.Val(i)
}

type BucketAclV2AccessControlPolicyOwnerOutput struct{ *pulumi.OutputState }

func (BucketAclV2AccessControlPolicyOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketAclV2AccessControlPolicyOwner)(nil)).Elem()
}

func (o BucketAclV2AccessControlPolicyOwnerOutput) ToBucketAclV2AccessControlPolicyOwnerOutput() BucketAclV2AccessControlPolicyOwnerOutput {
	return o
}

func (o BucketAclV2AccessControlPolicyOwnerOutput) ToBucketAclV2AccessControlPolicyOwnerOutputWithContext(ctx context.Context) BucketAclV2AccessControlPolicyOwnerOutput {
	return o
}

func (o BucketAclV2AccessControlPolicyOwnerOutput) ToOutput(ctx context.Context) pulumix.Output[BucketAclV2AccessControlPolicyOwner] {
	return pulumix.Output[BucketAclV2AccessControlPolicyOwner]{
		OutputState: o.OutputState,
	}
}

// Display name of the owner.
func (o BucketAclV2AccessControlPolicyOwnerOutput) DisplayName() pulumix.Output[*string] {
	return pulumix.Apply[BucketAclV2AccessControlPolicyOwner](o, func(v BucketAclV2AccessControlPolicyOwner) *string { return v.DisplayName })
}

// ID of the owner.
func (o BucketAclV2AccessControlPolicyOwnerOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[BucketAclV2AccessControlPolicyOwner](o, func(v BucketAclV2AccessControlPolicyOwner) string { return v.Id })
}

type BucketCorsConfigurationV2CorsRule struct {
	// Set of Headers that are specified in the `Access-Control-Request-Headers` header.
	AllowedHeaders []string `pulumi:"allowedHeaders"`
	// Set of HTTP methods that you allow the origin to execute. Valid values are `GET`, `PUT`, `HEAD`, `POST`, and `DELETE`.
	AllowedMethods []string `pulumi:"allowedMethods"`
	// Set of origins you want customers to be able to access the bucket from.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// Set of headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript `XMLHttpRequest` object).
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Unique identifier for the rule. The value cannot be longer than 255 characters.
	Id *string `pulumi:"id"`
	// Time in seconds that your browser is to cache the preflight response for the specified resource.
	MaxAgeSeconds *int `pulumi:"maxAgeSeconds"`
}

type BucketCorsConfigurationV2CorsRuleArgs struct {
	// Set of Headers that are specified in the `Access-Control-Request-Headers` header.
	AllowedHeaders pulumix.Input[[]string] `pulumi:"allowedHeaders"`
	// Set of HTTP methods that you allow the origin to execute. Valid values are `GET`, `PUT`, `HEAD`, `POST`, and `DELETE`.
	AllowedMethods pulumix.Input[[]string] `pulumi:"allowedMethods"`
	// Set of origins you want customers to be able to access the bucket from.
	AllowedOrigins pulumix.Input[[]string] `pulumi:"allowedOrigins"`
	// Set of headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript `XMLHttpRequest` object).
	ExposeHeaders pulumix.Input[[]string] `pulumi:"exposeHeaders"`
	// Unique identifier for the rule. The value cannot be longer than 255 characters.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Time in seconds that your browser is to cache the preflight response for the specified resource.
	MaxAgeSeconds pulumix.Input[*int] `pulumi:"maxAgeSeconds"`
}

func (BucketCorsConfigurationV2CorsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketCorsConfigurationV2CorsRule)(nil)).Elem()
}

func (i BucketCorsConfigurationV2CorsRuleArgs) ToBucketCorsConfigurationV2CorsRuleOutput() BucketCorsConfigurationV2CorsRuleOutput {
	return i.ToBucketCorsConfigurationV2CorsRuleOutputWithContext(context.Background())
}

func (i BucketCorsConfigurationV2CorsRuleArgs) ToBucketCorsConfigurationV2CorsRuleOutputWithContext(ctx context.Context) BucketCorsConfigurationV2CorsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCorsConfigurationV2CorsRuleOutput)
}

func (i *BucketCorsConfigurationV2CorsRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketCorsConfigurationV2CorsRuleArgs] {
	return pulumix.Val(i)
}

type BucketCorsConfigurationV2CorsRuleOutput struct{ *pulumi.OutputState }

func (BucketCorsConfigurationV2CorsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketCorsConfigurationV2CorsRule)(nil)).Elem()
}

func (o BucketCorsConfigurationV2CorsRuleOutput) ToBucketCorsConfigurationV2CorsRuleOutput() BucketCorsConfigurationV2CorsRuleOutput {
	return o
}

func (o BucketCorsConfigurationV2CorsRuleOutput) ToBucketCorsConfigurationV2CorsRuleOutputWithContext(ctx context.Context) BucketCorsConfigurationV2CorsRuleOutput {
	return o
}

func (o BucketCorsConfigurationV2CorsRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketCorsConfigurationV2CorsRule] {
	return pulumix.Output[BucketCorsConfigurationV2CorsRule]{
		OutputState: o.OutputState,
	}
}

// Set of Headers that are specified in the `Access-Control-Request-Headers` header.
func (o BucketCorsConfigurationV2CorsRuleOutput) AllowedHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketCorsConfigurationV2CorsRule](o, func(v BucketCorsConfigurationV2CorsRule) []string { return v.AllowedHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of HTTP methods that you allow the origin to execute. Valid values are `GET`, `PUT`, `HEAD`, `POST`, and `DELETE`.
func (o BucketCorsConfigurationV2CorsRuleOutput) AllowedMethods() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketCorsConfigurationV2CorsRule](o, func(v BucketCorsConfigurationV2CorsRule) []string { return v.AllowedMethods })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of origins you want customers to be able to access the bucket from.
func (o BucketCorsConfigurationV2CorsRuleOutput) AllowedOrigins() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketCorsConfigurationV2CorsRule](o, func(v BucketCorsConfigurationV2CorsRule) []string { return v.AllowedOrigins })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript `XMLHttpRequest` object).
func (o BucketCorsConfigurationV2CorsRuleOutput) ExposeHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketCorsConfigurationV2CorsRule](o, func(v BucketCorsConfigurationV2CorsRule) []string { return v.ExposeHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Unique identifier for the rule. The value cannot be longer than 255 characters.
func (o BucketCorsConfigurationV2CorsRuleOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketCorsConfigurationV2CorsRule](o, func(v BucketCorsConfigurationV2CorsRule) *string { return v.Id })
}

// Time in seconds that your browser is to cache the preflight response for the specified resource.
func (o BucketCorsConfigurationV2CorsRuleOutput) MaxAgeSeconds() pulumix.Output[*int] {
	return pulumix.Apply[BucketCorsConfigurationV2CorsRule](o, func(v BucketCorsConfigurationV2CorsRule) *int { return v.MaxAgeSeconds })
}

type BucketCorsRule struct {
	// Specifies which headers are allowed.
	AllowedHeaders []string `pulumi:"allowedHeaders"`
	// Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
	AllowedMethods []string `pulumi:"allowedMethods"`
	// Specifies which origins are allowed.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// Specifies expose header in the response.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies time in seconds that browser can cache the response for a preflight request.
	MaxAgeSeconds *int `pulumi:"maxAgeSeconds"`
}

type BucketCorsRuleArgs struct {
	// Specifies which headers are allowed.
	AllowedHeaders pulumix.Input[[]string] `pulumi:"allowedHeaders"`
	// Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
	AllowedMethods pulumix.Input[[]string] `pulumi:"allowedMethods"`
	// Specifies which origins are allowed.
	AllowedOrigins pulumix.Input[[]string] `pulumi:"allowedOrigins"`
	// Specifies expose header in the response.
	ExposeHeaders pulumix.Input[[]string] `pulumi:"exposeHeaders"`
	// Specifies time in seconds that browser can cache the response for a preflight request.
	MaxAgeSeconds pulumix.Input[*int] `pulumi:"maxAgeSeconds"`
}

func (BucketCorsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketCorsRule)(nil)).Elem()
}

func (i BucketCorsRuleArgs) ToBucketCorsRuleOutput() BucketCorsRuleOutput {
	return i.ToBucketCorsRuleOutputWithContext(context.Background())
}

func (i BucketCorsRuleArgs) ToBucketCorsRuleOutputWithContext(ctx context.Context) BucketCorsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCorsRuleOutput)
}

func (i *BucketCorsRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketCorsRuleArgs] {
	return pulumix.Val(i)
}

type BucketCorsRuleOutput struct{ *pulumi.OutputState }

func (BucketCorsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketCorsRule)(nil)).Elem()
}

func (o BucketCorsRuleOutput) ToBucketCorsRuleOutput() BucketCorsRuleOutput {
	return o
}

func (o BucketCorsRuleOutput) ToBucketCorsRuleOutputWithContext(ctx context.Context) BucketCorsRuleOutput {
	return o
}

func (o BucketCorsRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketCorsRule] {
	return pulumix.Output[BucketCorsRule]{
		OutputState: o.OutputState,
	}
}

// Specifies which headers are allowed.
func (o BucketCorsRuleOutput) AllowedHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketCorsRule](o, func(v BucketCorsRule) []string { return v.AllowedHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
func (o BucketCorsRuleOutput) AllowedMethods() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketCorsRule](o, func(v BucketCorsRule) []string { return v.AllowedMethods })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies which origins are allowed.
func (o BucketCorsRuleOutput) AllowedOrigins() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketCorsRule](o, func(v BucketCorsRule) []string { return v.AllowedOrigins })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies expose header in the response.
func (o BucketCorsRuleOutput) ExposeHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketCorsRule](o, func(v BucketCorsRule) []string { return v.ExposeHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies time in seconds that browser can cache the response for a preflight request.
func (o BucketCorsRuleOutput) MaxAgeSeconds() pulumix.Output[*int] {
	return pulumix.Apply[BucketCorsRule](o, func(v BucketCorsRule) *int { return v.MaxAgeSeconds })
}

type BucketGrant struct {
	// Canonical user id to grant for. Used only when `type` is `CanonicalUser`.
	Id *string `pulumi:"id"`
	// List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
	Permissions []string `pulumi:"permissions"`
	// Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`. `AmazonCustomerByEmail` is not supported.
	Type string `pulumi:"type"`
	// Uri address to grant for. Used only when `type` is `Group`.
	Uri *string `pulumi:"uri"`
}

type BucketGrantArgs struct {
	// Canonical user id to grant for. Used only when `type` is `CanonicalUser`.
	Id pulumix.Input[*string] `pulumi:"id"`
	// List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
	Permissions pulumix.Input[[]string] `pulumi:"permissions"`
	// Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`. `AmazonCustomerByEmail` is not supported.
	Type pulumix.Input[string] `pulumi:"type"`
	// Uri address to grant for. Used only when `type` is `Group`.
	Uri pulumix.Input[*string] `pulumi:"uri"`
}

func (BucketGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketGrant)(nil)).Elem()
}

func (i BucketGrantArgs) ToBucketGrantOutput() BucketGrantOutput {
	return i.ToBucketGrantOutputWithContext(context.Background())
}

func (i BucketGrantArgs) ToBucketGrantOutputWithContext(ctx context.Context) BucketGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketGrantOutput)
}

func (i *BucketGrantArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketGrantArgs] {
	return pulumix.Val(i)
}

type BucketGrantOutput struct{ *pulumi.OutputState }

func (BucketGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketGrant)(nil)).Elem()
}

func (o BucketGrantOutput) ToBucketGrantOutput() BucketGrantOutput {
	return o
}

func (o BucketGrantOutput) ToBucketGrantOutputWithContext(ctx context.Context) BucketGrantOutput {
	return o
}

func (o BucketGrantOutput) ToOutput(ctx context.Context) pulumix.Output[BucketGrant] {
	return pulumix.Output[BucketGrant]{
		OutputState: o.OutputState,
	}
}

// Canonical user id to grant for. Used only when `type` is `CanonicalUser`.
func (o BucketGrantOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketGrant](o, func(v BucketGrant) *string { return v.Id })
}

// List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
func (o BucketGrantOutput) Permissions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketGrant](o, func(v BucketGrant) []string { return v.Permissions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`. `AmazonCustomerByEmail` is not supported.
func (o BucketGrantOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[BucketGrant](o, func(v BucketGrant) string { return v.Type })
}

// Uri address to grant for. Used only when `type` is `Group`.
func (o BucketGrantOutput) Uri() pulumix.Output[*string] {
	return pulumix.Apply[BucketGrant](o, func(v BucketGrant) *string { return v.Uri })
}

type BucketIntelligentTieringConfigurationFilter struct {
	// Object key name prefix that identifies the subset of objects to which the configuration applies.
	Prefix *string `pulumi:"prefix"`
	// All of these tags must exist in the object's tag set in order for the configuration to apply.
	Tags map[string]string `pulumi:"tags"`
}

type BucketIntelligentTieringConfigurationFilterArgs struct {
	// Object key name prefix that identifies the subset of objects to which the configuration applies.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// All of these tags must exist in the object's tag set in order for the configuration to apply.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (BucketIntelligentTieringConfigurationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketIntelligentTieringConfigurationFilter)(nil)).Elem()
}

func (i BucketIntelligentTieringConfigurationFilterArgs) ToBucketIntelligentTieringConfigurationFilterOutput() BucketIntelligentTieringConfigurationFilterOutput {
	return i.ToBucketIntelligentTieringConfigurationFilterOutputWithContext(context.Background())
}

func (i BucketIntelligentTieringConfigurationFilterArgs) ToBucketIntelligentTieringConfigurationFilterOutputWithContext(ctx context.Context) BucketIntelligentTieringConfigurationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketIntelligentTieringConfigurationFilterOutput)
}

func (i *BucketIntelligentTieringConfigurationFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketIntelligentTieringConfigurationFilterArgs] {
	return pulumix.Val(i)
}

type BucketIntelligentTieringConfigurationFilterOutput struct{ *pulumi.OutputState }

func (BucketIntelligentTieringConfigurationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketIntelligentTieringConfigurationFilter)(nil)).Elem()
}

func (o BucketIntelligentTieringConfigurationFilterOutput) ToBucketIntelligentTieringConfigurationFilterOutput() BucketIntelligentTieringConfigurationFilterOutput {
	return o
}

func (o BucketIntelligentTieringConfigurationFilterOutput) ToBucketIntelligentTieringConfigurationFilterOutputWithContext(ctx context.Context) BucketIntelligentTieringConfigurationFilterOutput {
	return o
}

func (o BucketIntelligentTieringConfigurationFilterOutput) ToOutput(ctx context.Context) pulumix.Output[BucketIntelligentTieringConfigurationFilter] {
	return pulumix.Output[BucketIntelligentTieringConfigurationFilter]{
		OutputState: o.OutputState,
	}
}

// Object key name prefix that identifies the subset of objects to which the configuration applies.
func (o BucketIntelligentTieringConfigurationFilterOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketIntelligentTieringConfigurationFilter](o, func(v BucketIntelligentTieringConfigurationFilter) *string { return v.Prefix })
}

// All of these tags must exist in the object's tag set in order for the configuration to apply.
func (o BucketIntelligentTieringConfigurationFilterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[BucketIntelligentTieringConfigurationFilter](o, func(v BucketIntelligentTieringConfigurationFilter) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type BucketIntelligentTieringConfigurationTiering struct {
	// S3 Intelligent-Tiering access tier. Valid values: `ARCHIVE_ACCESS`, `DEEP_ARCHIVE_ACCESS`.
	AccessTier string `pulumi:"accessTier"`
	// Number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier.
	Days int `pulumi:"days"`
}

type BucketIntelligentTieringConfigurationTieringArgs struct {
	// S3 Intelligent-Tiering access tier. Valid values: `ARCHIVE_ACCESS`, `DEEP_ARCHIVE_ACCESS`.
	AccessTier pulumix.Input[string] `pulumi:"accessTier"`
	// Number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier.
	Days pulumix.Input[int] `pulumi:"days"`
}

func (BucketIntelligentTieringConfigurationTieringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketIntelligentTieringConfigurationTiering)(nil)).Elem()
}

func (i BucketIntelligentTieringConfigurationTieringArgs) ToBucketIntelligentTieringConfigurationTieringOutput() BucketIntelligentTieringConfigurationTieringOutput {
	return i.ToBucketIntelligentTieringConfigurationTieringOutputWithContext(context.Background())
}

func (i BucketIntelligentTieringConfigurationTieringArgs) ToBucketIntelligentTieringConfigurationTieringOutputWithContext(ctx context.Context) BucketIntelligentTieringConfigurationTieringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketIntelligentTieringConfigurationTieringOutput)
}

func (i *BucketIntelligentTieringConfigurationTieringArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketIntelligentTieringConfigurationTieringArgs] {
	return pulumix.Val(i)
}

type BucketIntelligentTieringConfigurationTieringOutput struct{ *pulumi.OutputState }

func (BucketIntelligentTieringConfigurationTieringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketIntelligentTieringConfigurationTiering)(nil)).Elem()
}

func (o BucketIntelligentTieringConfigurationTieringOutput) ToBucketIntelligentTieringConfigurationTieringOutput() BucketIntelligentTieringConfigurationTieringOutput {
	return o
}

func (o BucketIntelligentTieringConfigurationTieringOutput) ToBucketIntelligentTieringConfigurationTieringOutputWithContext(ctx context.Context) BucketIntelligentTieringConfigurationTieringOutput {
	return o
}

func (o BucketIntelligentTieringConfigurationTieringOutput) ToOutput(ctx context.Context) pulumix.Output[BucketIntelligentTieringConfigurationTiering] {
	return pulumix.Output[BucketIntelligentTieringConfigurationTiering]{
		OutputState: o.OutputState,
	}
}

// S3 Intelligent-Tiering access tier. Valid values: `ARCHIVE_ACCESS`, `DEEP_ARCHIVE_ACCESS`.
func (o BucketIntelligentTieringConfigurationTieringOutput) AccessTier() pulumix.Output[string] {
	return pulumix.Apply[BucketIntelligentTieringConfigurationTiering](o, func(v BucketIntelligentTieringConfigurationTiering) string { return v.AccessTier })
}

// Number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier.
func (o BucketIntelligentTieringConfigurationTieringOutput) Days() pulumix.Output[int] {
	return pulumix.Apply[BucketIntelligentTieringConfigurationTiering](o, func(v BucketIntelligentTieringConfigurationTiering) int { return v.Days })
}

type BucketLifecycleConfigurationV2Rule struct {
	// Configuration block that specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. See below.
	AbortIncompleteMultipartUpload *BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload `pulumi:"abortIncompleteMultipartUpload"`
	// Configuration block that specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker. See below.
	Expiration *BucketLifecycleConfigurationV2RuleExpiration `pulumi:"expiration"`
	// Configuration block used to identify objects that a Lifecycle Rule applies to. See below. If not specified, the `rule` will default to using `prefix`.
	Filter *BucketLifecycleConfigurationV2RuleFilter `pulumi:"filter"`
	// Unique identifier for the rule. The value cannot be longer than 255 characters.
	Id string `pulumi:"id"`
	// Configuration block that specifies when noncurrent object versions expire. See below.
	NoncurrentVersionExpiration *BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration `pulumi:"noncurrentVersionExpiration"`
	// Set of configuration blocks that specify the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. See below.
	NoncurrentVersionTransitions []BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition `pulumi:"noncurrentVersionTransitions"`
	// **DEPRECATED** Use `filter` instead. This has been deprecated by Amazon S3. Prefix identifying one or more objects to which the rule applies. Defaults to an empty string (`""`) if `filter` is not specified.
	//
	// Deprecated: Use filter instead
	Prefix *string `pulumi:"prefix"`
	// Whether the rule is currently being applied. Valid values: `Enabled` or `Disabled`.
	Status string `pulumi:"status"`
	// Set of configuration blocks that specify when an Amazon S3 object transitions to a specified storage class. See below.
	Transitions []BucketLifecycleConfigurationV2RuleTransition `pulumi:"transitions"`
}

type BucketLifecycleConfigurationV2RuleArgs struct {
	// Configuration block that specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. See below.
	AbortIncompleteMultipartUpload pulumix.Input[*BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs] `pulumi:"abortIncompleteMultipartUpload"`
	// Configuration block that specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker. See below.
	Expiration pulumix.Input[*BucketLifecycleConfigurationV2RuleExpirationArgs] `pulumi:"expiration"`
	// Configuration block used to identify objects that a Lifecycle Rule applies to. See below. If not specified, the `rule` will default to using `prefix`.
	Filter pulumix.Input[*BucketLifecycleConfigurationV2RuleFilterArgs] `pulumi:"filter"`
	// Unique identifier for the rule. The value cannot be longer than 255 characters.
	Id pulumix.Input[string] `pulumi:"id"`
	// Configuration block that specifies when noncurrent object versions expire. See below.
	NoncurrentVersionExpiration pulumix.Input[*BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs] `pulumi:"noncurrentVersionExpiration"`
	// Set of configuration blocks that specify the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. See below.
	NoncurrentVersionTransitions pulumix.Input[[]*BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs] `pulumi:"noncurrentVersionTransitions"`
	// **DEPRECATED** Use `filter` instead. This has been deprecated by Amazon S3. Prefix identifying one or more objects to which the rule applies. Defaults to an empty string (`""`) if `filter` is not specified.
	//
	// Deprecated: Use filter instead
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Whether the rule is currently being applied. Valid values: `Enabled` or `Disabled`.
	Status pulumix.Input[string] `pulumi:"status"`
	// Set of configuration blocks that specify when an Amazon S3 object transitions to a specified storage class. See below.
	Transitions pulumix.Input[[]*BucketLifecycleConfigurationV2RuleTransitionArgs] `pulumi:"transitions"`
}

func (BucketLifecycleConfigurationV2RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2Rule)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2RuleArgs) ToBucketLifecycleConfigurationV2RuleOutput() BucketLifecycleConfigurationV2RuleOutput {
	return i.ToBucketLifecycleConfigurationV2RuleOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2RuleArgs) ToBucketLifecycleConfigurationV2RuleOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2RuleOutput)
}

func (i *BucketLifecycleConfigurationV2RuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2RuleArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleConfigurationV2RuleOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2Rule)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2RuleOutput) ToBucketLifecycleConfigurationV2RuleOutput() BucketLifecycleConfigurationV2RuleOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleOutput) ToBucketLifecycleConfigurationV2RuleOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfigurationV2Rule] {
	return pulumix.Output[BucketLifecycleConfigurationV2Rule]{
		OutputState: o.OutputState,
	}
}

// Configuration block that specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. See below.
func (o BucketLifecycleConfigurationV2RuleOutput) AbortIncompleteMultipartUpload() pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload, BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2Rule](o, func(v BucketLifecycleConfigurationV2Rule) *BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload {
		return v.AbortIncompleteMultipartUpload
	})
	return pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload, BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput]{OutputState: value.OutputState}
}

// Configuration block that specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker. See below.
func (o BucketLifecycleConfigurationV2RuleOutput) Expiration() pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleExpiration, BucketLifecycleConfigurationV2RuleExpirationOutput] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2Rule](o, func(v BucketLifecycleConfigurationV2Rule) *BucketLifecycleConfigurationV2RuleExpiration {
		return v.Expiration
	})
	return pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleExpiration, BucketLifecycleConfigurationV2RuleExpirationOutput]{OutputState: value.OutputState}
}

// Configuration block used to identify objects that a Lifecycle Rule applies to. See below. If not specified, the `rule` will default to using `prefix`.
func (o BucketLifecycleConfigurationV2RuleOutput) Filter() pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleFilter, BucketLifecycleConfigurationV2RuleFilterOutput] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2Rule](o, func(v BucketLifecycleConfigurationV2Rule) *BucketLifecycleConfigurationV2RuleFilter { return v.Filter })
	return pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleFilter, BucketLifecycleConfigurationV2RuleFilterOutput]{OutputState: value.OutputState}
}

// Unique identifier for the rule. The value cannot be longer than 255 characters.
func (o BucketLifecycleConfigurationV2RuleOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2Rule](o, func(v BucketLifecycleConfigurationV2Rule) string { return v.Id })
}

// Configuration block that specifies when noncurrent object versions expire. See below.
func (o BucketLifecycleConfigurationV2RuleOutput) NoncurrentVersionExpiration() pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration, BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2Rule](o, func(v BucketLifecycleConfigurationV2Rule) *BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration {
		return v.NoncurrentVersionExpiration
	})
	return pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration, BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput]{OutputState: value.OutputState}
}

// Set of configuration blocks that specify the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. See below.
func (o BucketLifecycleConfigurationV2RuleOutput) NoncurrentVersionTransitions() pulumix.GArrayOutput[BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition, BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2Rule](o, func(v BucketLifecycleConfigurationV2Rule) []BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition {
		return v.NoncurrentVersionTransitions
	})
	return pulumix.GArrayOutput[BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition, BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput]{OutputState: value.OutputState}
}

// **DEPRECATED** Use `filter` instead. This has been deprecated by Amazon S3. Prefix identifying one or more objects to which the rule applies. Defaults to an empty string (`""`) if `filter` is not specified.
//
// Deprecated: Use filter instead
func (o BucketLifecycleConfigurationV2RuleOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2Rule](o, func(v BucketLifecycleConfigurationV2Rule) *string { return v.Prefix })
}

// Whether the rule is currently being applied. Valid values: `Enabled` or `Disabled`.
func (o BucketLifecycleConfigurationV2RuleOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2Rule](o, func(v BucketLifecycleConfigurationV2Rule) string { return v.Status })
}

// Set of configuration blocks that specify when an Amazon S3 object transitions to a specified storage class. See below.
func (o BucketLifecycleConfigurationV2RuleOutput) Transitions() pulumix.GArrayOutput[BucketLifecycleConfigurationV2RuleTransition, BucketLifecycleConfigurationV2RuleTransitionOutput] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2Rule](o, func(v BucketLifecycleConfigurationV2Rule) []BucketLifecycleConfigurationV2RuleTransition {
		return v.Transitions
	})
	return pulumix.GArrayOutput[BucketLifecycleConfigurationV2RuleTransition, BucketLifecycleConfigurationV2RuleTransitionOutput]{OutputState: value.OutputState}
}

type BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload struct {
	// Number of days after which Amazon S3 aborts an incomplete multipart upload.
	DaysAfterInitiation *int `pulumi:"daysAfterInitiation"`
}

type BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs struct {
	// Number of days after which Amazon S3 aborts an incomplete multipart upload.
	DaysAfterInitiation pulumix.Input[*int] `pulumi:"daysAfterInitiation"`
}

func (BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs) ToBucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput() BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput {
	return i.ToBucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs) ToBucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput)
}

func (i *BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput) ToBucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput() BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput) ToBucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload] {
	return pulumix.Output[BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload]{
		OutputState: o.OutputState,
	}
}

// Number of days after which Amazon S3 aborts an incomplete multipart upload.
func (o BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput) DaysAfterInitiation() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload](o, func(v BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload) *int {
		return v.DaysAfterInitiation
	})
}

type BucketLifecycleConfigurationV2RuleExpiration struct {
	// Date the object is to be moved or deleted. The date value must be in [RFC3339 full-date format](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) e.g. `2023-08-22`.
	Date *string `pulumi:"date"`
	// Lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
	Days *int `pulumi:"days"`
	// Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to `true`, the delete marker will be expired; if set to `false` the policy takes no action.
	ExpiredObjectDeleteMarker *bool `pulumi:"expiredObjectDeleteMarker"`
}

type BucketLifecycleConfigurationV2RuleExpirationArgs struct {
	// Date the object is to be moved or deleted. The date value must be in [RFC3339 full-date format](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) e.g. `2023-08-22`.
	Date pulumix.Input[*string] `pulumi:"date"`
	// Lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
	Days pulumix.Input[*int] `pulumi:"days"`
	// Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to `true`, the delete marker will be expired; if set to `false` the policy takes no action.
	ExpiredObjectDeleteMarker pulumix.Input[*bool] `pulumi:"expiredObjectDeleteMarker"`
}

func (BucketLifecycleConfigurationV2RuleExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleExpiration)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2RuleExpirationArgs) ToBucketLifecycleConfigurationV2RuleExpirationOutput() BucketLifecycleConfigurationV2RuleExpirationOutput {
	return i.ToBucketLifecycleConfigurationV2RuleExpirationOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2RuleExpirationArgs) ToBucketLifecycleConfigurationV2RuleExpirationOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2RuleExpirationOutput)
}

func (i *BucketLifecycleConfigurationV2RuleExpirationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2RuleExpirationArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleConfigurationV2RuleExpirationOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2RuleExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleExpiration)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2RuleExpirationOutput) ToBucketLifecycleConfigurationV2RuleExpirationOutput() BucketLifecycleConfigurationV2RuleExpirationOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleExpirationOutput) ToBucketLifecycleConfigurationV2RuleExpirationOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleExpirationOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleExpirationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfigurationV2RuleExpiration] {
	return pulumix.Output[BucketLifecycleConfigurationV2RuleExpiration]{
		OutputState: o.OutputState,
	}
}

// Date the object is to be moved or deleted. The date value must be in [RFC3339 full-date format](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) e.g. `2023-08-22`.
func (o BucketLifecycleConfigurationV2RuleExpirationOutput) Date() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleExpiration](o, func(v BucketLifecycleConfigurationV2RuleExpiration) *string { return v.Date })
}

// Lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
func (o BucketLifecycleConfigurationV2RuleExpirationOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleExpiration](o, func(v BucketLifecycleConfigurationV2RuleExpiration) *int { return v.Days })
}

// Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to `true`, the delete marker will be expired; if set to `false` the policy takes no action.
func (o BucketLifecycleConfigurationV2RuleExpirationOutput) ExpiredObjectDeleteMarker() pulumix.Output[*bool] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleExpiration](o, func(v BucketLifecycleConfigurationV2RuleExpiration) *bool { return v.ExpiredObjectDeleteMarker })
}

type BucketLifecycleConfigurationV2RuleFilter struct {
	// Configuration block used to apply a logical `AND` to two or more predicates. See below. The Lifecycle Rule will apply to any object matching all the predicates configured inside the `and` block.
	And *BucketLifecycleConfigurationV2RuleFilterAnd `pulumi:"and"`
	// Minimum object size (in bytes) to which the rule applies.
	ObjectSizeGreaterThan *string `pulumi:"objectSizeGreaterThan"`
	// Maximum object size (in bytes) to which the rule applies.
	ObjectSizeLessThan *string `pulumi:"objectSizeLessThan"`
	// Prefix identifying one or more objects to which the rule applies. Defaults to an empty string (`""`) if not specified.
	Prefix *string `pulumi:"prefix"`
	// Configuration block for specifying a tag key and value. See below.
	Tag *BucketLifecycleConfigurationV2RuleFilterTag `pulumi:"tag"`
}

type BucketLifecycleConfigurationV2RuleFilterArgs struct {
	// Configuration block used to apply a logical `AND` to two or more predicates. See below. The Lifecycle Rule will apply to any object matching all the predicates configured inside the `and` block.
	And pulumix.Input[*BucketLifecycleConfigurationV2RuleFilterAndArgs] `pulumi:"and"`
	// Minimum object size (in bytes) to which the rule applies.
	ObjectSizeGreaterThan pulumix.Input[*string] `pulumi:"objectSizeGreaterThan"`
	// Maximum object size (in bytes) to which the rule applies.
	ObjectSizeLessThan pulumix.Input[*string] `pulumi:"objectSizeLessThan"`
	// Prefix identifying one or more objects to which the rule applies. Defaults to an empty string (`""`) if not specified.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Configuration block for specifying a tag key and value. See below.
	Tag pulumix.Input[*BucketLifecycleConfigurationV2RuleFilterTagArgs] `pulumi:"tag"`
}

func (BucketLifecycleConfigurationV2RuleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleFilter)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2RuleFilterArgs) ToBucketLifecycleConfigurationV2RuleFilterOutput() BucketLifecycleConfigurationV2RuleFilterOutput {
	return i.ToBucketLifecycleConfigurationV2RuleFilterOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2RuleFilterArgs) ToBucketLifecycleConfigurationV2RuleFilterOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2RuleFilterOutput)
}

func (i *BucketLifecycleConfigurationV2RuleFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2RuleFilterArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleConfigurationV2RuleFilterOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2RuleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleFilter)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2RuleFilterOutput) ToBucketLifecycleConfigurationV2RuleFilterOutput() BucketLifecycleConfigurationV2RuleFilterOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleFilterOutput) ToBucketLifecycleConfigurationV2RuleFilterOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleFilterOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleFilterOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfigurationV2RuleFilter] {
	return pulumix.Output[BucketLifecycleConfigurationV2RuleFilter]{
		OutputState: o.OutputState,
	}
}

// Configuration block used to apply a logical `AND` to two or more predicates. See below. The Lifecycle Rule will apply to any object matching all the predicates configured inside the `and` block.
func (o BucketLifecycleConfigurationV2RuleFilterOutput) And() pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleFilterAnd, BucketLifecycleConfigurationV2RuleFilterAndOutput] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2RuleFilter](o, func(v BucketLifecycleConfigurationV2RuleFilter) *BucketLifecycleConfigurationV2RuleFilterAnd {
		return v.And
	})
	return pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleFilterAnd, BucketLifecycleConfigurationV2RuleFilterAndOutput]{OutputState: value.OutputState}
}

// Minimum object size (in bytes) to which the rule applies.
func (o BucketLifecycleConfigurationV2RuleFilterOutput) ObjectSizeGreaterThan() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleFilter](o, func(v BucketLifecycleConfigurationV2RuleFilter) *string { return v.ObjectSizeGreaterThan })
}

// Maximum object size (in bytes) to which the rule applies.
func (o BucketLifecycleConfigurationV2RuleFilterOutput) ObjectSizeLessThan() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleFilter](o, func(v BucketLifecycleConfigurationV2RuleFilter) *string { return v.ObjectSizeLessThan })
}

// Prefix identifying one or more objects to which the rule applies. Defaults to an empty string (`""`) if not specified.
func (o BucketLifecycleConfigurationV2RuleFilterOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleFilter](o, func(v BucketLifecycleConfigurationV2RuleFilter) *string { return v.Prefix })
}

// Configuration block for specifying a tag key and value. See below.
func (o BucketLifecycleConfigurationV2RuleFilterOutput) Tag() pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleFilterTag, BucketLifecycleConfigurationV2RuleFilterTagOutput] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2RuleFilter](o, func(v BucketLifecycleConfigurationV2RuleFilter) *BucketLifecycleConfigurationV2RuleFilterTag {
		return v.Tag
	})
	return pulumix.GPtrOutput[BucketLifecycleConfigurationV2RuleFilterTag, BucketLifecycleConfigurationV2RuleFilterTagOutput]{OutputState: value.OutputState}
}

type BucketLifecycleConfigurationV2RuleFilterAnd struct {
	// Minimum object size to which the rule applies. Value must be at least `0` if specified.
	ObjectSizeGreaterThan *int `pulumi:"objectSizeGreaterThan"`
	// Maximum object size to which the rule applies. Value must be at least `1` if specified.
	ObjectSizeLessThan *int `pulumi:"objectSizeLessThan"`
	// Prefix identifying one or more objects to which the rule applies.
	Prefix *string `pulumi:"prefix"`
	// Key-value map of resource tags. All of these tags must exist in the object's tag set in order for the rule to apply.
	Tags map[string]string `pulumi:"tags"`
}

type BucketLifecycleConfigurationV2RuleFilterAndArgs struct {
	// Minimum object size to which the rule applies. Value must be at least `0` if specified.
	ObjectSizeGreaterThan pulumix.Input[*int] `pulumi:"objectSizeGreaterThan"`
	// Maximum object size to which the rule applies. Value must be at least `1` if specified.
	ObjectSizeLessThan pulumix.Input[*int] `pulumi:"objectSizeLessThan"`
	// Prefix identifying one or more objects to which the rule applies.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Key-value map of resource tags. All of these tags must exist in the object's tag set in order for the rule to apply.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (BucketLifecycleConfigurationV2RuleFilterAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleFilterAnd)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2RuleFilterAndArgs) ToBucketLifecycleConfigurationV2RuleFilterAndOutput() BucketLifecycleConfigurationV2RuleFilterAndOutput {
	return i.ToBucketLifecycleConfigurationV2RuleFilterAndOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2RuleFilterAndArgs) ToBucketLifecycleConfigurationV2RuleFilterAndOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleFilterAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2RuleFilterAndOutput)
}

func (i *BucketLifecycleConfigurationV2RuleFilterAndArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2RuleFilterAndArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleConfigurationV2RuleFilterAndOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2RuleFilterAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleFilterAnd)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2RuleFilterAndOutput) ToBucketLifecycleConfigurationV2RuleFilterAndOutput() BucketLifecycleConfigurationV2RuleFilterAndOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleFilterAndOutput) ToBucketLifecycleConfigurationV2RuleFilterAndOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleFilterAndOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleFilterAndOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfigurationV2RuleFilterAnd] {
	return pulumix.Output[BucketLifecycleConfigurationV2RuleFilterAnd]{
		OutputState: o.OutputState,
	}
}

// Minimum object size to which the rule applies. Value must be at least `0` if specified.
func (o BucketLifecycleConfigurationV2RuleFilterAndOutput) ObjectSizeGreaterThan() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleFilterAnd](o, func(v BucketLifecycleConfigurationV2RuleFilterAnd) *int { return v.ObjectSizeGreaterThan })
}

// Maximum object size to which the rule applies. Value must be at least `1` if specified.
func (o BucketLifecycleConfigurationV2RuleFilterAndOutput) ObjectSizeLessThan() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleFilterAnd](o, func(v BucketLifecycleConfigurationV2RuleFilterAnd) *int { return v.ObjectSizeLessThan })
}

// Prefix identifying one or more objects to which the rule applies.
func (o BucketLifecycleConfigurationV2RuleFilterAndOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleFilterAnd](o, func(v BucketLifecycleConfigurationV2RuleFilterAnd) *string { return v.Prefix })
}

// Key-value map of resource tags. All of these tags must exist in the object's tag set in order for the rule to apply.
func (o BucketLifecycleConfigurationV2RuleFilterAndOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2RuleFilterAnd](o, func(v BucketLifecycleConfigurationV2RuleFilterAnd) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type BucketLifecycleConfigurationV2RuleFilterTag struct {
	// Name of the object key.
	Key string `pulumi:"key"`
	// Value of the tag.
	Value string `pulumi:"value"`
}

type BucketLifecycleConfigurationV2RuleFilterTagArgs struct {
	// Name of the object key.
	Key pulumix.Input[string] `pulumi:"key"`
	// Value of the tag.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (BucketLifecycleConfigurationV2RuleFilterTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleFilterTag)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2RuleFilterTagArgs) ToBucketLifecycleConfigurationV2RuleFilterTagOutput() BucketLifecycleConfigurationV2RuleFilterTagOutput {
	return i.ToBucketLifecycleConfigurationV2RuleFilterTagOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2RuleFilterTagArgs) ToBucketLifecycleConfigurationV2RuleFilterTagOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleFilterTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2RuleFilterTagOutput)
}

func (i *BucketLifecycleConfigurationV2RuleFilterTagArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2RuleFilterTagArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleConfigurationV2RuleFilterTagOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2RuleFilterTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleFilterTag)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2RuleFilterTagOutput) ToBucketLifecycleConfigurationV2RuleFilterTagOutput() BucketLifecycleConfigurationV2RuleFilterTagOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleFilterTagOutput) ToBucketLifecycleConfigurationV2RuleFilterTagOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleFilterTagOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleFilterTagOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfigurationV2RuleFilterTag] {
	return pulumix.Output[BucketLifecycleConfigurationV2RuleFilterTag]{
		OutputState: o.OutputState,
	}
}

// Name of the object key.
func (o BucketLifecycleConfigurationV2RuleFilterTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleFilterTag](o, func(v BucketLifecycleConfigurationV2RuleFilterTag) string { return v.Key })
}

// Value of the tag.
func (o BucketLifecycleConfigurationV2RuleFilterTagOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleFilterTag](o, func(v BucketLifecycleConfigurationV2RuleFilterTag) string { return v.Value })
}

type BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration struct {
	// Number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
	NewerNoncurrentVersions *string `pulumi:"newerNoncurrentVersions"`
	// Number of days an object is noncurrent before Amazon S3 can perform the associated action. Must be a positive integer.
	NoncurrentDays *int `pulumi:"noncurrentDays"`
}

type BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs struct {
	// Number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
	NewerNoncurrentVersions pulumix.Input[*string] `pulumi:"newerNoncurrentVersions"`
	// Number of days an object is noncurrent before Amazon S3 can perform the associated action. Must be a positive integer.
	NoncurrentDays pulumix.Input[*int] `pulumi:"noncurrentDays"`
}

func (BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs) ToBucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput() BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput {
	return i.ToBucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs) ToBucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput)
}

func (i *BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput) ToBucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput() BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput) ToBucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration] {
	return pulumix.Output[BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration]{
		OutputState: o.OutputState,
	}
}

// Number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput) NewerNoncurrentVersions() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration](o, func(v BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration) *string {
		return v.NewerNoncurrentVersions
	})
}

// Number of days an object is noncurrent before Amazon S3 can perform the associated action. Must be a positive integer.
func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput) NoncurrentDays() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration](o, func(v BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration) *int { return v.NoncurrentDays })
}

type BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition struct {
	// Number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
	NewerNoncurrentVersions *string `pulumi:"newerNoncurrentVersions"`
	// Number of days an object is noncurrent before Amazon S3 can perform the associated action.
	NoncurrentDays *int `pulumi:"noncurrentDays"`
	// Class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
	StorageClass string `pulumi:"storageClass"`
}

type BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs struct {
	// Number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
	NewerNoncurrentVersions pulumix.Input[*string] `pulumi:"newerNoncurrentVersions"`
	// Number of days an object is noncurrent before Amazon S3 can perform the associated action.
	NoncurrentDays pulumix.Input[*int] `pulumi:"noncurrentDays"`
	// Class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
	StorageClass pulumix.Input[string] `pulumi:"storageClass"`
}

func (BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs) ToBucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput() BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput {
	return i.ToBucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs) ToBucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput)
}

func (i *BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput) ToBucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput() BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput) ToBucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition] {
	return pulumix.Output[BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition]{
		OutputState: o.OutputState,
	}
}

// Number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput) NewerNoncurrentVersions() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition](o, func(v BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition) *string {
		return v.NewerNoncurrentVersions
	})
}

// Number of days an object is noncurrent before Amazon S3 can perform the associated action.
func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput) NoncurrentDays() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition](o, func(v BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition) *int { return v.NoncurrentDays })
}

// Class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
func (o BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput) StorageClass() pulumix.Output[string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition](o, func(v BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition) string { return v.StorageClass })
}

type BucketLifecycleConfigurationV2RuleTransition struct {
	// Date objects are transitioned to the specified storage class. The date value must be in [RFC3339 full-date format](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) e.g. `2023-08-22`.
	Date *string `pulumi:"date"`
	// Number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer. If both `days` and `date` are not specified, defaults to `0`. Valid values depend on `storageClass`, see [Transition objects using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-transition-general-considerations.html) for more details.
	Days *int `pulumi:"days"`
	// Class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
	StorageClass string `pulumi:"storageClass"`
}

type BucketLifecycleConfigurationV2RuleTransitionArgs struct {
	// Date objects are transitioned to the specified storage class. The date value must be in [RFC3339 full-date format](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) e.g. `2023-08-22`.
	Date pulumix.Input[*string] `pulumi:"date"`
	// Number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer. If both `days` and `date` are not specified, defaults to `0`. Valid values depend on `storageClass`, see [Transition objects using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-transition-general-considerations.html) for more details.
	Days pulumix.Input[*int] `pulumi:"days"`
	// Class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
	StorageClass pulumix.Input[string] `pulumi:"storageClass"`
}

func (BucketLifecycleConfigurationV2RuleTransitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleTransition)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2RuleTransitionArgs) ToBucketLifecycleConfigurationV2RuleTransitionOutput() BucketLifecycleConfigurationV2RuleTransitionOutput {
	return i.ToBucketLifecycleConfigurationV2RuleTransitionOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2RuleTransitionArgs) ToBucketLifecycleConfigurationV2RuleTransitionOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleTransitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2RuleTransitionOutput)
}

func (i *BucketLifecycleConfigurationV2RuleTransitionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2RuleTransitionArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleConfigurationV2RuleTransitionOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2RuleTransitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2RuleTransition)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2RuleTransitionOutput) ToBucketLifecycleConfigurationV2RuleTransitionOutput() BucketLifecycleConfigurationV2RuleTransitionOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleTransitionOutput) ToBucketLifecycleConfigurationV2RuleTransitionOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2RuleTransitionOutput {
	return o
}

func (o BucketLifecycleConfigurationV2RuleTransitionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfigurationV2RuleTransition] {
	return pulumix.Output[BucketLifecycleConfigurationV2RuleTransition]{
		OutputState: o.OutputState,
	}
}

// Date objects are transitioned to the specified storage class. The date value must be in [RFC3339 full-date format](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) e.g. `2023-08-22`.
func (o BucketLifecycleConfigurationV2RuleTransitionOutput) Date() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleTransition](o, func(v BucketLifecycleConfigurationV2RuleTransition) *string { return v.Date })
}

// Number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer. If both `days` and `date` are not specified, defaults to `0`. Valid values depend on `storageClass`, see [Transition objects using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-transition-general-considerations.html) for more details.
func (o BucketLifecycleConfigurationV2RuleTransitionOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleTransition](o, func(v BucketLifecycleConfigurationV2RuleTransition) *int { return v.Days })
}

// Class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
func (o BucketLifecycleConfigurationV2RuleTransitionOutput) StorageClass() pulumix.Output[string] {
	return pulumix.Apply[BucketLifecycleConfigurationV2RuleTransition](o, func(v BucketLifecycleConfigurationV2RuleTransition) string { return v.StorageClass })
}

type BucketLifecycleRule struct {
	// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
	AbortIncompleteMultipartUploadDays *int `pulumi:"abortIncompleteMultipartUploadDays"`
	// Specifies lifecycle rule status.
	Enabled bool `pulumi:"enabled"`
	// Specifies a period in the object's expire (documented below).
	Expiration *BucketLifecycleRuleExpiration `pulumi:"expiration"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id *string `pulumi:"id"`
	// Specifies when noncurrent object versions expire (documented below).
	NoncurrentVersionExpiration *BucketLifecycleRuleNoncurrentVersionExpiration `pulumi:"noncurrentVersionExpiration"`
	// Specifies when noncurrent object versions transitions (documented below).
	//
	// At least one of `abortIncompleteMultipartUploadDays`, `expiration`, `transition`, `noncurrentVersionExpiration`, `noncurrentVersionTransition` must be specified.
	NoncurrentVersionTransitions []BucketLifecycleRuleNoncurrentVersionTransition `pulumi:"noncurrentVersionTransitions"`
	// Object key prefix identifying one or more objects to which the rule applies.
	Prefix *string `pulumi:"prefix"`
	// Specifies object tags key and value.
	Tags map[string]string `pulumi:"tags"`
	// Specifies a period in the object's transitions (documented below).
	Transitions []BucketLifecycleRuleTransition `pulumi:"transitions"`
}

type BucketLifecycleRuleArgs struct {
	// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
	AbortIncompleteMultipartUploadDays pulumix.Input[*int] `pulumi:"abortIncompleteMultipartUploadDays"`
	// Specifies lifecycle rule status.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// Specifies a period in the object's expire (documented below).
	Expiration pulumix.Input[*BucketLifecycleRuleExpirationArgs] `pulumi:"expiration"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Specifies when noncurrent object versions expire (documented below).
	NoncurrentVersionExpiration pulumix.Input[*BucketLifecycleRuleNoncurrentVersionExpirationArgs] `pulumi:"noncurrentVersionExpiration"`
	// Specifies when noncurrent object versions transitions (documented below).
	//
	// At least one of `abortIncompleteMultipartUploadDays`, `expiration`, `transition`, `noncurrentVersionExpiration`, `noncurrentVersionTransition` must be specified.
	NoncurrentVersionTransitions pulumix.Input[[]*BucketLifecycleRuleNoncurrentVersionTransitionArgs] `pulumi:"noncurrentVersionTransitions"`
	// Object key prefix identifying one or more objects to which the rule applies.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Specifies object tags key and value.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Specifies a period in the object's transitions (documented below).
	Transitions pulumix.Input[[]*BucketLifecycleRuleTransitionArgs] `pulumi:"transitions"`
}

func (BucketLifecycleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleRule)(nil)).Elem()
}

func (i BucketLifecycleRuleArgs) ToBucketLifecycleRuleOutput() BucketLifecycleRuleOutput {
	return i.ToBucketLifecycleRuleOutputWithContext(context.Background())
}

func (i BucketLifecycleRuleArgs) ToBucketLifecycleRuleOutputWithContext(ctx context.Context) BucketLifecycleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleRuleOutput)
}

func (i *BucketLifecycleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleRuleArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleRuleOutput struct{ *pulumi.OutputState }

func (BucketLifecycleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleRule)(nil)).Elem()
}

func (o BucketLifecycleRuleOutput) ToBucketLifecycleRuleOutput() BucketLifecycleRuleOutput {
	return o
}

func (o BucketLifecycleRuleOutput) ToBucketLifecycleRuleOutputWithContext(ctx context.Context) BucketLifecycleRuleOutput {
	return o
}

func (o BucketLifecycleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleRule] {
	return pulumix.Output[BucketLifecycleRule]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
func (o BucketLifecycleRuleOutput) AbortIncompleteMultipartUploadDays() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleRule](o, func(v BucketLifecycleRule) *int { return v.AbortIncompleteMultipartUploadDays })
}

// Specifies lifecycle rule status.
func (o BucketLifecycleRuleOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[BucketLifecycleRule](o, func(v BucketLifecycleRule) bool { return v.Enabled })
}

// Specifies a period in the object's expire (documented below).
func (o BucketLifecycleRuleOutput) Expiration() pulumix.GPtrOutput[BucketLifecycleRuleExpiration, BucketLifecycleRuleExpirationOutput] {
	value := pulumix.Apply[BucketLifecycleRule](o, func(v BucketLifecycleRule) *BucketLifecycleRuleExpiration { return v.Expiration })
	return pulumix.GPtrOutput[BucketLifecycleRuleExpiration, BucketLifecycleRuleExpirationOutput]{OutputState: value.OutputState}
}

// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
func (o BucketLifecycleRuleOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleRule](o, func(v BucketLifecycleRule) *string { return v.Id })
}

// Specifies when noncurrent object versions expire (documented below).
func (o BucketLifecycleRuleOutput) NoncurrentVersionExpiration() pulumix.GPtrOutput[BucketLifecycleRuleNoncurrentVersionExpiration, BucketLifecycleRuleNoncurrentVersionExpirationOutput] {
	value := pulumix.Apply[BucketLifecycleRule](o, func(v BucketLifecycleRule) *BucketLifecycleRuleNoncurrentVersionExpiration {
		return v.NoncurrentVersionExpiration
	})
	return pulumix.GPtrOutput[BucketLifecycleRuleNoncurrentVersionExpiration, BucketLifecycleRuleNoncurrentVersionExpirationOutput]{OutputState: value.OutputState}
}

// Specifies when noncurrent object versions transitions (documented below).
//
// At least one of `abortIncompleteMultipartUploadDays`, `expiration`, `transition`, `noncurrentVersionExpiration`, `noncurrentVersionTransition` must be specified.
func (o BucketLifecycleRuleOutput) NoncurrentVersionTransitions() pulumix.GArrayOutput[BucketLifecycleRuleNoncurrentVersionTransition, BucketLifecycleRuleNoncurrentVersionTransitionOutput] {
	value := pulumix.Apply[BucketLifecycleRule](o, func(v BucketLifecycleRule) []BucketLifecycleRuleNoncurrentVersionTransition {
		return v.NoncurrentVersionTransitions
	})
	return pulumix.GArrayOutput[BucketLifecycleRuleNoncurrentVersionTransition, BucketLifecycleRuleNoncurrentVersionTransitionOutput]{OutputState: value.OutputState}
}

// Object key prefix identifying one or more objects to which the rule applies.
func (o BucketLifecycleRuleOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleRule](o, func(v BucketLifecycleRule) *string { return v.Prefix })
}

// Specifies object tags key and value.
func (o BucketLifecycleRuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[BucketLifecycleRule](o, func(v BucketLifecycleRule) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Specifies a period in the object's transitions (documented below).
func (o BucketLifecycleRuleOutput) Transitions() pulumix.GArrayOutput[BucketLifecycleRuleTransition, BucketLifecycleRuleTransitionOutput] {
	value := pulumix.Apply[BucketLifecycleRule](o, func(v BucketLifecycleRule) []BucketLifecycleRuleTransition { return v.Transitions })
	return pulumix.GArrayOutput[BucketLifecycleRuleTransition, BucketLifecycleRuleTransitionOutput]{OutputState: value.OutputState}
}

type BucketLifecycleRuleExpiration struct {
	// Specifies the date after which you want the corresponding action to take effect.
	Date *string `pulumi:"date"`
	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *int `pulumi:"days"`
	// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
	ExpiredObjectDeleteMarker *bool `pulumi:"expiredObjectDeleteMarker"`
}

type BucketLifecycleRuleExpirationArgs struct {
	// Specifies the date after which you want the corresponding action to take effect.
	Date pulumix.Input[*string] `pulumi:"date"`
	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days pulumix.Input[*int] `pulumi:"days"`
	// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
	ExpiredObjectDeleteMarker pulumix.Input[*bool] `pulumi:"expiredObjectDeleteMarker"`
}

func (BucketLifecycleRuleExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleRuleExpiration)(nil)).Elem()
}

func (i BucketLifecycleRuleExpirationArgs) ToBucketLifecycleRuleExpirationOutput() BucketLifecycleRuleExpirationOutput {
	return i.ToBucketLifecycleRuleExpirationOutputWithContext(context.Background())
}

func (i BucketLifecycleRuleExpirationArgs) ToBucketLifecycleRuleExpirationOutputWithContext(ctx context.Context) BucketLifecycleRuleExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleRuleExpirationOutput)
}

func (i *BucketLifecycleRuleExpirationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleRuleExpirationArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleRuleExpirationOutput struct{ *pulumi.OutputState }

func (BucketLifecycleRuleExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleRuleExpiration)(nil)).Elem()
}

func (o BucketLifecycleRuleExpirationOutput) ToBucketLifecycleRuleExpirationOutput() BucketLifecycleRuleExpirationOutput {
	return o
}

func (o BucketLifecycleRuleExpirationOutput) ToBucketLifecycleRuleExpirationOutputWithContext(ctx context.Context) BucketLifecycleRuleExpirationOutput {
	return o
}

func (o BucketLifecycleRuleExpirationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleRuleExpiration] {
	return pulumix.Output[BucketLifecycleRuleExpiration]{
		OutputState: o.OutputState,
	}
}

// Specifies the date after which you want the corresponding action to take effect.
func (o BucketLifecycleRuleExpirationOutput) Date() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleRuleExpiration](o, func(v BucketLifecycleRuleExpiration) *string { return v.Date })
}

// Specifies the number of days after object creation when the specific rule action takes effect.
func (o BucketLifecycleRuleExpirationOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleRuleExpiration](o, func(v BucketLifecycleRuleExpiration) *int { return v.Days })
}

// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
func (o BucketLifecycleRuleExpirationOutput) ExpiredObjectDeleteMarker() pulumix.Output[*bool] {
	return pulumix.Apply[BucketLifecycleRuleExpiration](o, func(v BucketLifecycleRuleExpiration) *bool { return v.ExpiredObjectDeleteMarker })
}

type BucketLifecycleRuleNoncurrentVersionExpiration struct {
	// Specifies the number of days noncurrent object versions expire.
	Days *int `pulumi:"days"`
}

type BucketLifecycleRuleNoncurrentVersionExpirationArgs struct {
	// Specifies the number of days noncurrent object versions expire.
	Days pulumix.Input[*int] `pulumi:"days"`
}

func (BucketLifecycleRuleNoncurrentVersionExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleRuleNoncurrentVersionExpiration)(nil)).Elem()
}

func (i BucketLifecycleRuleNoncurrentVersionExpirationArgs) ToBucketLifecycleRuleNoncurrentVersionExpirationOutput() BucketLifecycleRuleNoncurrentVersionExpirationOutput {
	return i.ToBucketLifecycleRuleNoncurrentVersionExpirationOutputWithContext(context.Background())
}

func (i BucketLifecycleRuleNoncurrentVersionExpirationArgs) ToBucketLifecycleRuleNoncurrentVersionExpirationOutputWithContext(ctx context.Context) BucketLifecycleRuleNoncurrentVersionExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleRuleNoncurrentVersionExpirationOutput)
}

func (i *BucketLifecycleRuleNoncurrentVersionExpirationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleRuleNoncurrentVersionExpirationArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleRuleNoncurrentVersionExpirationOutput struct{ *pulumi.OutputState }

func (BucketLifecycleRuleNoncurrentVersionExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleRuleNoncurrentVersionExpiration)(nil)).Elem()
}

func (o BucketLifecycleRuleNoncurrentVersionExpirationOutput) ToBucketLifecycleRuleNoncurrentVersionExpirationOutput() BucketLifecycleRuleNoncurrentVersionExpirationOutput {
	return o
}

func (o BucketLifecycleRuleNoncurrentVersionExpirationOutput) ToBucketLifecycleRuleNoncurrentVersionExpirationOutputWithContext(ctx context.Context) BucketLifecycleRuleNoncurrentVersionExpirationOutput {
	return o
}

func (o BucketLifecycleRuleNoncurrentVersionExpirationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleRuleNoncurrentVersionExpiration] {
	return pulumix.Output[BucketLifecycleRuleNoncurrentVersionExpiration]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days noncurrent object versions expire.
func (o BucketLifecycleRuleNoncurrentVersionExpirationOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleRuleNoncurrentVersionExpiration](o, func(v BucketLifecycleRuleNoncurrentVersionExpiration) *int { return v.Days })
}

type BucketLifecycleRuleNoncurrentVersionTransition struct {
	// Specifies the number of days noncurrent object versions transition.
	Days *int `pulumi:"days"`
	// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
	StorageClass string `pulumi:"storageClass"`
}

type BucketLifecycleRuleNoncurrentVersionTransitionArgs struct {
	// Specifies the number of days noncurrent object versions transition.
	Days pulumix.Input[*int] `pulumi:"days"`
	// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
	StorageClass pulumix.Input[string] `pulumi:"storageClass"`
}

func (BucketLifecycleRuleNoncurrentVersionTransitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleRuleNoncurrentVersionTransition)(nil)).Elem()
}

func (i BucketLifecycleRuleNoncurrentVersionTransitionArgs) ToBucketLifecycleRuleNoncurrentVersionTransitionOutput() BucketLifecycleRuleNoncurrentVersionTransitionOutput {
	return i.ToBucketLifecycleRuleNoncurrentVersionTransitionOutputWithContext(context.Background())
}

func (i BucketLifecycleRuleNoncurrentVersionTransitionArgs) ToBucketLifecycleRuleNoncurrentVersionTransitionOutputWithContext(ctx context.Context) BucketLifecycleRuleNoncurrentVersionTransitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleRuleNoncurrentVersionTransitionOutput)
}

func (i *BucketLifecycleRuleNoncurrentVersionTransitionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleRuleNoncurrentVersionTransitionArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleRuleNoncurrentVersionTransitionOutput struct{ *pulumi.OutputState }

func (BucketLifecycleRuleNoncurrentVersionTransitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleRuleNoncurrentVersionTransition)(nil)).Elem()
}

func (o BucketLifecycleRuleNoncurrentVersionTransitionOutput) ToBucketLifecycleRuleNoncurrentVersionTransitionOutput() BucketLifecycleRuleNoncurrentVersionTransitionOutput {
	return o
}

func (o BucketLifecycleRuleNoncurrentVersionTransitionOutput) ToBucketLifecycleRuleNoncurrentVersionTransitionOutputWithContext(ctx context.Context) BucketLifecycleRuleNoncurrentVersionTransitionOutput {
	return o
}

func (o BucketLifecycleRuleNoncurrentVersionTransitionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleRuleNoncurrentVersionTransition] {
	return pulumix.Output[BucketLifecycleRuleNoncurrentVersionTransition]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days noncurrent object versions transition.
func (o BucketLifecycleRuleNoncurrentVersionTransitionOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleRuleNoncurrentVersionTransition](o, func(v BucketLifecycleRuleNoncurrentVersionTransition) *int { return v.Days })
}

// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
func (o BucketLifecycleRuleNoncurrentVersionTransitionOutput) StorageClass() pulumix.Output[string] {
	return pulumix.Apply[BucketLifecycleRuleNoncurrentVersionTransition](o, func(v BucketLifecycleRuleNoncurrentVersionTransition) string { return v.StorageClass })
}

type BucketLifecycleRuleTransition struct {
	// Specifies the date after which you want the corresponding action to take effect.
	Date *string `pulumi:"date"`
	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *int `pulumi:"days"`
	// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
	StorageClass string `pulumi:"storageClass"`
}

type BucketLifecycleRuleTransitionArgs struct {
	// Specifies the date after which you want the corresponding action to take effect.
	Date pulumix.Input[*string] `pulumi:"date"`
	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days pulumix.Input[*int] `pulumi:"days"`
	// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
	StorageClass pulumix.Input[string] `pulumi:"storageClass"`
}

func (BucketLifecycleRuleTransitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleRuleTransition)(nil)).Elem()
}

func (i BucketLifecycleRuleTransitionArgs) ToBucketLifecycleRuleTransitionOutput() BucketLifecycleRuleTransitionOutput {
	return i.ToBucketLifecycleRuleTransitionOutputWithContext(context.Background())
}

func (i BucketLifecycleRuleTransitionArgs) ToBucketLifecycleRuleTransitionOutputWithContext(ctx context.Context) BucketLifecycleRuleTransitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleRuleTransitionOutput)
}

func (i *BucketLifecycleRuleTransitionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleRuleTransitionArgs] {
	return pulumix.Val(i)
}

type BucketLifecycleRuleTransitionOutput struct{ *pulumi.OutputState }

func (BucketLifecycleRuleTransitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleRuleTransition)(nil)).Elem()
}

func (o BucketLifecycleRuleTransitionOutput) ToBucketLifecycleRuleTransitionOutput() BucketLifecycleRuleTransitionOutput {
	return o
}

func (o BucketLifecycleRuleTransitionOutput) ToBucketLifecycleRuleTransitionOutputWithContext(ctx context.Context) BucketLifecycleRuleTransitionOutput {
	return o
}

func (o BucketLifecycleRuleTransitionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleRuleTransition] {
	return pulumix.Output[BucketLifecycleRuleTransition]{
		OutputState: o.OutputState,
	}
}

// Specifies the date after which you want the corresponding action to take effect.
func (o BucketLifecycleRuleTransitionOutput) Date() pulumix.Output[*string] {
	return pulumix.Apply[BucketLifecycleRuleTransition](o, func(v BucketLifecycleRuleTransition) *string { return v.Date })
}

// Specifies the number of days after object creation when the specific rule action takes effect.
func (o BucketLifecycleRuleTransitionOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketLifecycleRuleTransition](o, func(v BucketLifecycleRuleTransition) *int { return v.Days })
}

// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
func (o BucketLifecycleRuleTransitionOutput) StorageClass() pulumix.Output[string] {
	return pulumix.Apply[BucketLifecycleRuleTransition](o, func(v BucketLifecycleRuleTransition) string { return v.StorageClass })
}

type BucketLogging struct {
	// The name of the bucket that will receive the log objects.
	TargetBucket string `pulumi:"targetBucket"`
	// To specify a key prefix for log objects.
	TargetPrefix *string `pulumi:"targetPrefix"`
}

type BucketLoggingArgs struct {
	// The name of the bucket that will receive the log objects.
	TargetBucket pulumix.Input[string] `pulumi:"targetBucket"`
	// To specify a key prefix for log objects.
	TargetPrefix pulumix.Input[*string] `pulumi:"targetPrefix"`
}

func (BucketLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLogging)(nil)).Elem()
}

func (i BucketLoggingArgs) ToBucketLoggingOutput() BucketLoggingOutput {
	return i.ToBucketLoggingOutputWithContext(context.Background())
}

func (i BucketLoggingArgs) ToBucketLoggingOutputWithContext(ctx context.Context) BucketLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingOutput)
}

func (i *BucketLoggingArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLoggingArgs] {
	return pulumix.Val(i)
}

type BucketLoggingOutput struct{ *pulumi.OutputState }

func (BucketLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLogging)(nil)).Elem()
}

func (o BucketLoggingOutput) ToBucketLoggingOutput() BucketLoggingOutput {
	return o
}

func (o BucketLoggingOutput) ToBucketLoggingOutputWithContext(ctx context.Context) BucketLoggingOutput {
	return o
}

func (o BucketLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLogging] {
	return pulumix.Output[BucketLogging]{
		OutputState: o.OutputState,
	}
}

// The name of the bucket that will receive the log objects.
func (o BucketLoggingOutput) TargetBucket() pulumix.Output[string] {
	return pulumix.Apply[BucketLogging](o, func(v BucketLogging) string { return v.TargetBucket })
}

// To specify a key prefix for log objects.
func (o BucketLoggingOutput) TargetPrefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketLogging](o, func(v BucketLogging) *string { return v.TargetPrefix })
}

type BucketLoggingV2TargetGrant struct {
	// Configuration block for the person being granted permissions. See below.
	Grantee BucketLoggingV2TargetGrantGrantee `pulumi:"grantee"`
	// Logging permissions assigned to the grantee for the bucket. Valid values: `FULL_CONTROL`, `READ`, `WRITE`.
	Permission string `pulumi:"permission"`
}

type BucketLoggingV2TargetGrantArgs struct {
	// Configuration block for the person being granted permissions. See below.
	Grantee pulumix.Input[*BucketLoggingV2TargetGrantGranteeArgs] `pulumi:"grantee"`
	// Logging permissions assigned to the grantee for the bucket. Valid values: `FULL_CONTROL`, `READ`, `WRITE`.
	Permission pulumix.Input[string] `pulumi:"permission"`
}

func (BucketLoggingV2TargetGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLoggingV2TargetGrant)(nil)).Elem()
}

func (i BucketLoggingV2TargetGrantArgs) ToBucketLoggingV2TargetGrantOutput() BucketLoggingV2TargetGrantOutput {
	return i.ToBucketLoggingV2TargetGrantOutputWithContext(context.Background())
}

func (i BucketLoggingV2TargetGrantArgs) ToBucketLoggingV2TargetGrantOutputWithContext(ctx context.Context) BucketLoggingV2TargetGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingV2TargetGrantOutput)
}

func (i *BucketLoggingV2TargetGrantArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLoggingV2TargetGrantArgs] {
	return pulumix.Val(i)
}

type BucketLoggingV2TargetGrantOutput struct{ *pulumi.OutputState }

func (BucketLoggingV2TargetGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLoggingV2TargetGrant)(nil)).Elem()
}

func (o BucketLoggingV2TargetGrantOutput) ToBucketLoggingV2TargetGrantOutput() BucketLoggingV2TargetGrantOutput {
	return o
}

func (o BucketLoggingV2TargetGrantOutput) ToBucketLoggingV2TargetGrantOutputWithContext(ctx context.Context) BucketLoggingV2TargetGrantOutput {
	return o
}

func (o BucketLoggingV2TargetGrantOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLoggingV2TargetGrant] {
	return pulumix.Output[BucketLoggingV2TargetGrant]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the person being granted permissions. See below.
func (o BucketLoggingV2TargetGrantOutput) Grantee() pulumix.GPtrOutput[BucketLoggingV2TargetGrantGrantee, BucketLoggingV2TargetGrantGranteeOutput] {
	value := pulumix.Apply[BucketLoggingV2TargetGrant](o, func(v BucketLoggingV2TargetGrant) BucketLoggingV2TargetGrantGrantee { return v.Grantee })
	return pulumix.GPtrOutput[BucketLoggingV2TargetGrantGrantee, BucketLoggingV2TargetGrantGranteeOutput]{OutputState: value.OutputState}
}

// Logging permissions assigned to the grantee for the bucket. Valid values: `FULL_CONTROL`, `READ`, `WRITE`.
func (o BucketLoggingV2TargetGrantOutput) Permission() pulumix.Output[string] {
	return pulumix.Apply[BucketLoggingV2TargetGrant](o, func(v BucketLoggingV2TargetGrant) string { return v.Permission })
}

type BucketLoggingV2TargetGrantGrantee struct {
	DisplayName *string `pulumi:"displayName"`
	// Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
	EmailAddress *string `pulumi:"emailAddress"`
	// Canonical user ID of the grantee.
	Id *string `pulumi:"id"`
	// Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
	Type string `pulumi:"type"`
	// URI of the grantee group.
	Uri *string `pulumi:"uri"`
}

type BucketLoggingV2TargetGrantGranteeArgs struct {
	DisplayName pulumix.Input[*string] `pulumi:"displayName"`
	// Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
	EmailAddress pulumix.Input[*string] `pulumi:"emailAddress"`
	// Canonical user ID of the grantee.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
	Type pulumix.Input[string] `pulumi:"type"`
	// URI of the grantee group.
	Uri pulumix.Input[*string] `pulumi:"uri"`
}

func (BucketLoggingV2TargetGrantGranteeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLoggingV2TargetGrantGrantee)(nil)).Elem()
}

func (i BucketLoggingV2TargetGrantGranteeArgs) ToBucketLoggingV2TargetGrantGranteeOutput() BucketLoggingV2TargetGrantGranteeOutput {
	return i.ToBucketLoggingV2TargetGrantGranteeOutputWithContext(context.Background())
}

func (i BucketLoggingV2TargetGrantGranteeArgs) ToBucketLoggingV2TargetGrantGranteeOutputWithContext(ctx context.Context) BucketLoggingV2TargetGrantGranteeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingV2TargetGrantGranteeOutput)
}

func (i *BucketLoggingV2TargetGrantGranteeArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketLoggingV2TargetGrantGranteeArgs] {
	return pulumix.Val(i)
}

type BucketLoggingV2TargetGrantGranteeOutput struct{ *pulumi.OutputState }

func (BucketLoggingV2TargetGrantGranteeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLoggingV2TargetGrantGrantee)(nil)).Elem()
}

func (o BucketLoggingV2TargetGrantGranteeOutput) ToBucketLoggingV2TargetGrantGranteeOutput() BucketLoggingV2TargetGrantGranteeOutput {
	return o
}

func (o BucketLoggingV2TargetGrantGranteeOutput) ToBucketLoggingV2TargetGrantGranteeOutputWithContext(ctx context.Context) BucketLoggingV2TargetGrantGranteeOutput {
	return o
}

func (o BucketLoggingV2TargetGrantGranteeOutput) ToOutput(ctx context.Context) pulumix.Output[BucketLoggingV2TargetGrantGrantee] {
	return pulumix.Output[BucketLoggingV2TargetGrantGrantee]{
		OutputState: o.OutputState,
	}
}

func (o BucketLoggingV2TargetGrantGranteeOutput) DisplayName() pulumix.Output[*string] {
	return pulumix.Apply[BucketLoggingV2TargetGrantGrantee](o, func(v BucketLoggingV2TargetGrantGrantee) *string { return v.DisplayName })
}

// Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
func (o BucketLoggingV2TargetGrantGranteeOutput) EmailAddress() pulumix.Output[*string] {
	return pulumix.Apply[BucketLoggingV2TargetGrantGrantee](o, func(v BucketLoggingV2TargetGrantGrantee) *string { return v.EmailAddress })
}

// Canonical user ID of the grantee.
func (o BucketLoggingV2TargetGrantGranteeOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketLoggingV2TargetGrantGrantee](o, func(v BucketLoggingV2TargetGrantGrantee) *string { return v.Id })
}

// Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
func (o BucketLoggingV2TargetGrantGranteeOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[BucketLoggingV2TargetGrantGrantee](o, func(v BucketLoggingV2TargetGrantGrantee) string { return v.Type })
}

// URI of the grantee group.
func (o BucketLoggingV2TargetGrantGranteeOutput) Uri() pulumix.Output[*string] {
	return pulumix.Apply[BucketLoggingV2TargetGrantGrantee](o, func(v BucketLoggingV2TargetGrantGrantee) *string { return v.Uri })
}

type BucketMetricFilter struct {
	// Object prefix for filtering (singular).
	Prefix *string `pulumi:"prefix"`
	// Object tags for filtering (up to 10).
	Tags map[string]string `pulumi:"tags"`
}

type BucketMetricFilterArgs struct {
	// Object prefix for filtering (singular).
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Object tags for filtering (up to 10).
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (BucketMetricFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketMetricFilter)(nil)).Elem()
}

func (i BucketMetricFilterArgs) ToBucketMetricFilterOutput() BucketMetricFilterOutput {
	return i.ToBucketMetricFilterOutputWithContext(context.Background())
}

func (i BucketMetricFilterArgs) ToBucketMetricFilterOutputWithContext(ctx context.Context) BucketMetricFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketMetricFilterOutput)
}

func (i *BucketMetricFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketMetricFilterArgs] {
	return pulumix.Val(i)
}

type BucketMetricFilterOutput struct{ *pulumi.OutputState }

func (BucketMetricFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketMetricFilter)(nil)).Elem()
}

func (o BucketMetricFilterOutput) ToBucketMetricFilterOutput() BucketMetricFilterOutput {
	return o
}

func (o BucketMetricFilterOutput) ToBucketMetricFilterOutputWithContext(ctx context.Context) BucketMetricFilterOutput {
	return o
}

func (o BucketMetricFilterOutput) ToOutput(ctx context.Context) pulumix.Output[BucketMetricFilter] {
	return pulumix.Output[BucketMetricFilter]{
		OutputState: o.OutputState,
	}
}

// Object prefix for filtering (singular).
func (o BucketMetricFilterOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketMetricFilter](o, func(v BucketMetricFilter) *string { return v.Prefix })
}

// Object tags for filtering (up to 10).
func (o BucketMetricFilterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[BucketMetricFilter](o, func(v BucketMetricFilter) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type BucketNotificationLambdaFunction struct {
	// [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
	Events []string `pulumi:"events"`
	// Object key name prefix.
	FilterPrefix *string `pulumi:"filterPrefix"`
	// Object key name suffix.
	FilterSuffix *string `pulumi:"filterSuffix"`
	// Unique identifier for each of the notification configurations.
	Id *string `pulumi:"id"`
	// Lambda function ARN.
	LambdaFunctionArn *string `pulumi:"lambdaFunctionArn"`
}

type BucketNotificationLambdaFunctionArgs struct {
	// [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
	Events pulumix.Input[[]string] `pulumi:"events"`
	// Object key name prefix.
	FilterPrefix pulumix.Input[*string] `pulumi:"filterPrefix"`
	// Object key name suffix.
	FilterSuffix pulumix.Input[*string] `pulumi:"filterSuffix"`
	// Unique identifier for each of the notification configurations.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Lambda function ARN.
	LambdaFunctionArn pulumix.Input[*string] `pulumi:"lambdaFunctionArn"`
}

func (BucketNotificationLambdaFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotificationLambdaFunction)(nil)).Elem()
}

func (i BucketNotificationLambdaFunctionArgs) ToBucketNotificationLambdaFunctionOutput() BucketNotificationLambdaFunctionOutput {
	return i.ToBucketNotificationLambdaFunctionOutputWithContext(context.Background())
}

func (i BucketNotificationLambdaFunctionArgs) ToBucketNotificationLambdaFunctionOutputWithContext(ctx context.Context) BucketNotificationLambdaFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationLambdaFunctionOutput)
}

func (i *BucketNotificationLambdaFunctionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketNotificationLambdaFunctionArgs] {
	return pulumix.Val(i)
}

type BucketNotificationLambdaFunctionOutput struct{ *pulumi.OutputState }

func (BucketNotificationLambdaFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotificationLambdaFunction)(nil)).Elem()
}

func (o BucketNotificationLambdaFunctionOutput) ToBucketNotificationLambdaFunctionOutput() BucketNotificationLambdaFunctionOutput {
	return o
}

func (o BucketNotificationLambdaFunctionOutput) ToBucketNotificationLambdaFunctionOutputWithContext(ctx context.Context) BucketNotificationLambdaFunctionOutput {
	return o
}

func (o BucketNotificationLambdaFunctionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketNotificationLambdaFunction] {
	return pulumix.Output[BucketNotificationLambdaFunction]{
		OutputState: o.OutputState,
	}
}

// [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
func (o BucketNotificationLambdaFunctionOutput) Events() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketNotificationLambdaFunction](o, func(v BucketNotificationLambdaFunction) []string { return v.Events })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Object key name prefix.
func (o BucketNotificationLambdaFunctionOutput) FilterPrefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketNotificationLambdaFunction](o, func(v BucketNotificationLambdaFunction) *string { return v.FilterPrefix })
}

// Object key name suffix.
func (o BucketNotificationLambdaFunctionOutput) FilterSuffix() pulumix.Output[*string] {
	return pulumix.Apply[BucketNotificationLambdaFunction](o, func(v BucketNotificationLambdaFunction) *string { return v.FilterSuffix })
}

// Unique identifier for each of the notification configurations.
func (o BucketNotificationLambdaFunctionOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketNotificationLambdaFunction](o, func(v BucketNotificationLambdaFunction) *string { return v.Id })
}

// Lambda function ARN.
func (o BucketNotificationLambdaFunctionOutput) LambdaFunctionArn() pulumix.Output[*string] {
	return pulumix.Apply[BucketNotificationLambdaFunction](o, func(v BucketNotificationLambdaFunction) *string { return v.LambdaFunctionArn })
}

type BucketNotificationQueue struct {
	// Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
	Events []string `pulumi:"events"`
	// Object key name prefix.
	FilterPrefix *string `pulumi:"filterPrefix"`
	// Object key name suffix.
	FilterSuffix *string `pulumi:"filterSuffix"`
	// Unique identifier for each of the notification configurations.
	Id *string `pulumi:"id"`
	// SQS queue ARN.
	QueueArn string `pulumi:"queueArn"`
}

type BucketNotificationQueueArgs struct {
	// Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
	Events pulumix.Input[[]string] `pulumi:"events"`
	// Object key name prefix.
	FilterPrefix pulumix.Input[*string] `pulumi:"filterPrefix"`
	// Object key name suffix.
	FilterSuffix pulumix.Input[*string] `pulumi:"filterSuffix"`
	// Unique identifier for each of the notification configurations.
	Id pulumix.Input[*string] `pulumi:"id"`
	// SQS queue ARN.
	QueueArn pulumix.Input[string] `pulumi:"queueArn"`
}

func (BucketNotificationQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotificationQueue)(nil)).Elem()
}

func (i BucketNotificationQueueArgs) ToBucketNotificationQueueOutput() BucketNotificationQueueOutput {
	return i.ToBucketNotificationQueueOutputWithContext(context.Background())
}

func (i BucketNotificationQueueArgs) ToBucketNotificationQueueOutputWithContext(ctx context.Context) BucketNotificationQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationQueueOutput)
}

func (i *BucketNotificationQueueArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketNotificationQueueArgs] {
	return pulumix.Val(i)
}

type BucketNotificationQueueOutput struct{ *pulumi.OutputState }

func (BucketNotificationQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotificationQueue)(nil)).Elem()
}

func (o BucketNotificationQueueOutput) ToBucketNotificationQueueOutput() BucketNotificationQueueOutput {
	return o
}

func (o BucketNotificationQueueOutput) ToBucketNotificationQueueOutputWithContext(ctx context.Context) BucketNotificationQueueOutput {
	return o
}

func (o BucketNotificationQueueOutput) ToOutput(ctx context.Context) pulumix.Output[BucketNotificationQueue] {
	return pulumix.Output[BucketNotificationQueue]{
		OutputState: o.OutputState,
	}
}

// Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
func (o BucketNotificationQueueOutput) Events() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketNotificationQueue](o, func(v BucketNotificationQueue) []string { return v.Events })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Object key name prefix.
func (o BucketNotificationQueueOutput) FilterPrefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketNotificationQueue](o, func(v BucketNotificationQueue) *string { return v.FilterPrefix })
}

// Object key name suffix.
func (o BucketNotificationQueueOutput) FilterSuffix() pulumix.Output[*string] {
	return pulumix.Apply[BucketNotificationQueue](o, func(v BucketNotificationQueue) *string { return v.FilterSuffix })
}

// Unique identifier for each of the notification configurations.
func (o BucketNotificationQueueOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketNotificationQueue](o, func(v BucketNotificationQueue) *string { return v.Id })
}

// SQS queue ARN.
func (o BucketNotificationQueueOutput) QueueArn() pulumix.Output[string] {
	return pulumix.Apply[BucketNotificationQueue](o, func(v BucketNotificationQueue) string { return v.QueueArn })
}

type BucketNotificationTopic struct {
	// [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
	Events []string `pulumi:"events"`
	// Object key name prefix.
	FilterPrefix *string `pulumi:"filterPrefix"`
	// Object key name suffix.
	FilterSuffix *string `pulumi:"filterSuffix"`
	// Unique identifier for each of the notification configurations.
	Id *string `pulumi:"id"`
	// SNS topic ARN.
	TopicArn string `pulumi:"topicArn"`
}

type BucketNotificationTopicArgs struct {
	// [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
	Events pulumix.Input[[]string] `pulumi:"events"`
	// Object key name prefix.
	FilterPrefix pulumix.Input[*string] `pulumi:"filterPrefix"`
	// Object key name suffix.
	FilterSuffix pulumix.Input[*string] `pulumi:"filterSuffix"`
	// Unique identifier for each of the notification configurations.
	Id pulumix.Input[*string] `pulumi:"id"`
	// SNS topic ARN.
	TopicArn pulumix.Input[string] `pulumi:"topicArn"`
}

func (BucketNotificationTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotificationTopic)(nil)).Elem()
}

func (i BucketNotificationTopicArgs) ToBucketNotificationTopicOutput() BucketNotificationTopicOutput {
	return i.ToBucketNotificationTopicOutputWithContext(context.Background())
}

func (i BucketNotificationTopicArgs) ToBucketNotificationTopicOutputWithContext(ctx context.Context) BucketNotificationTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationTopicOutput)
}

func (i *BucketNotificationTopicArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketNotificationTopicArgs] {
	return pulumix.Val(i)
}

type BucketNotificationTopicOutput struct{ *pulumi.OutputState }

func (BucketNotificationTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotificationTopic)(nil)).Elem()
}

func (o BucketNotificationTopicOutput) ToBucketNotificationTopicOutput() BucketNotificationTopicOutput {
	return o
}

func (o BucketNotificationTopicOutput) ToBucketNotificationTopicOutputWithContext(ctx context.Context) BucketNotificationTopicOutput {
	return o
}

func (o BucketNotificationTopicOutput) ToOutput(ctx context.Context) pulumix.Output[BucketNotificationTopic] {
	return pulumix.Output[BucketNotificationTopic]{
		OutputState: o.OutputState,
	}
}

// [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
func (o BucketNotificationTopicOutput) Events() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketNotificationTopic](o, func(v BucketNotificationTopic) []string { return v.Events })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Object key name prefix.
func (o BucketNotificationTopicOutput) FilterPrefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketNotificationTopic](o, func(v BucketNotificationTopic) *string { return v.FilterPrefix })
}

// Object key name suffix.
func (o BucketNotificationTopicOutput) FilterSuffix() pulumix.Output[*string] {
	return pulumix.Apply[BucketNotificationTopic](o, func(v BucketNotificationTopic) *string { return v.FilterSuffix })
}

// Unique identifier for each of the notification configurations.
func (o BucketNotificationTopicOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketNotificationTopic](o, func(v BucketNotificationTopic) *string { return v.Id })
}

// SNS topic ARN.
func (o BucketNotificationTopicOutput) TopicArn() pulumix.Output[string] {
	return pulumix.Apply[BucketNotificationTopic](o, func(v BucketNotificationTopic) string { return v.TopicArn })
}

type BucketObjectLockConfiguration struct {
	// Indicates whether this bucket has an Object Lock configuration enabled. Valid value is `Enabled`.
	ObjectLockEnabled string `pulumi:"objectLockEnabled"`
	// The Object Lock rule in place for this bucket.
	Rule *BucketObjectLockConfigurationRule `pulumi:"rule"`
}

type BucketObjectLockConfigurationArgs struct {
	// Indicates whether this bucket has an Object Lock configuration enabled. Valid value is `Enabled`.
	ObjectLockEnabled pulumix.Input[string] `pulumi:"objectLockEnabled"`
	// The Object Lock rule in place for this bucket.
	Rule pulumix.Input[*BucketObjectLockConfigurationRuleArgs] `pulumi:"rule"`
}

func (BucketObjectLockConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketObjectLockConfiguration)(nil)).Elem()
}

func (i BucketObjectLockConfigurationArgs) ToBucketObjectLockConfigurationOutput() BucketObjectLockConfigurationOutput {
	return i.ToBucketObjectLockConfigurationOutputWithContext(context.Background())
}

func (i BucketObjectLockConfigurationArgs) ToBucketObjectLockConfigurationOutputWithContext(ctx context.Context) BucketObjectLockConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketObjectLockConfigurationOutput)
}

func (i *BucketObjectLockConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketObjectLockConfigurationArgs] {
	return pulumix.Val(i)
}

type BucketObjectLockConfigurationOutput struct{ *pulumi.OutputState }

func (BucketObjectLockConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketObjectLockConfiguration)(nil)).Elem()
}

func (o BucketObjectLockConfigurationOutput) ToBucketObjectLockConfigurationOutput() BucketObjectLockConfigurationOutput {
	return o
}

func (o BucketObjectLockConfigurationOutput) ToBucketObjectLockConfigurationOutputWithContext(ctx context.Context) BucketObjectLockConfigurationOutput {
	return o
}

func (o BucketObjectLockConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketObjectLockConfiguration] {
	return pulumix.Output[BucketObjectLockConfiguration]{
		OutputState: o.OutputState,
	}
}

// Indicates whether this bucket has an Object Lock configuration enabled. Valid value is `Enabled`.
func (o BucketObjectLockConfigurationOutput) ObjectLockEnabled() pulumix.Output[string] {
	return pulumix.Apply[BucketObjectLockConfiguration](o, func(v BucketObjectLockConfiguration) string { return v.ObjectLockEnabled })
}

// The Object Lock rule in place for this bucket.
func (o BucketObjectLockConfigurationOutput) Rule() pulumix.GPtrOutput[BucketObjectLockConfigurationRule, BucketObjectLockConfigurationRuleOutput] {
	value := pulumix.Apply[BucketObjectLockConfiguration](o, func(v BucketObjectLockConfiguration) *BucketObjectLockConfigurationRule { return v.Rule })
	return pulumix.GPtrOutput[BucketObjectLockConfigurationRule, BucketObjectLockConfigurationRuleOutput]{OutputState: value.OutputState}
}

type BucketObjectLockConfigurationRule struct {
	// The default retention period that you want to apply to new objects placed in this bucket.
	DefaultRetention BucketObjectLockConfigurationRuleDefaultRetention `pulumi:"defaultRetention"`
}

type BucketObjectLockConfigurationRuleArgs struct {
	// The default retention period that you want to apply to new objects placed in this bucket.
	DefaultRetention pulumix.Input[*BucketObjectLockConfigurationRuleDefaultRetentionArgs] `pulumi:"defaultRetention"`
}

func (BucketObjectLockConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketObjectLockConfigurationRule)(nil)).Elem()
}

func (i BucketObjectLockConfigurationRuleArgs) ToBucketObjectLockConfigurationRuleOutput() BucketObjectLockConfigurationRuleOutput {
	return i.ToBucketObjectLockConfigurationRuleOutputWithContext(context.Background())
}

func (i BucketObjectLockConfigurationRuleArgs) ToBucketObjectLockConfigurationRuleOutputWithContext(ctx context.Context) BucketObjectLockConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketObjectLockConfigurationRuleOutput)
}

func (i *BucketObjectLockConfigurationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketObjectLockConfigurationRuleArgs] {
	return pulumix.Val(i)
}

type BucketObjectLockConfigurationRuleOutput struct{ *pulumi.OutputState }

func (BucketObjectLockConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketObjectLockConfigurationRule)(nil)).Elem()
}

func (o BucketObjectLockConfigurationRuleOutput) ToBucketObjectLockConfigurationRuleOutput() BucketObjectLockConfigurationRuleOutput {
	return o
}

func (o BucketObjectLockConfigurationRuleOutput) ToBucketObjectLockConfigurationRuleOutputWithContext(ctx context.Context) BucketObjectLockConfigurationRuleOutput {
	return o
}

func (o BucketObjectLockConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketObjectLockConfigurationRule] {
	return pulumix.Output[BucketObjectLockConfigurationRule]{
		OutputState: o.OutputState,
	}
}

// The default retention period that you want to apply to new objects placed in this bucket.
func (o BucketObjectLockConfigurationRuleOutput) DefaultRetention() pulumix.GPtrOutput[BucketObjectLockConfigurationRuleDefaultRetention, BucketObjectLockConfigurationRuleDefaultRetentionOutput] {
	value := pulumix.Apply[BucketObjectLockConfigurationRule](o, func(v BucketObjectLockConfigurationRule) BucketObjectLockConfigurationRuleDefaultRetention {
		return v.DefaultRetention
	})
	return pulumix.GPtrOutput[BucketObjectLockConfigurationRuleDefaultRetention, BucketObjectLockConfigurationRuleDefaultRetentionOutput]{OutputState: value.OutputState}
}

type BucketObjectLockConfigurationRuleDefaultRetention struct {
	// The number of days that you want to specify for the default retention period.
	Days *int `pulumi:"days"`
	// The default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are `GOVERNANCE` and `COMPLIANCE`.
	Mode string `pulumi:"mode"`
	// The number of years that you want to specify for the default retention period.
	//
	// Either `days` or `years` must be specified, but not both.
	//
	// > **NOTE on `objectLockConfiguration`:** You can only enable S3 Object Lock for new buckets. If you need to turn on S3 Object Lock for an existing bucket, please contact AWS Support.
	// When you create a bucket with S3 Object Lock enabled, Amazon S3 automatically enables versioning for the bucket.
	// Once you create a bucket with S3 Object Lock enabled, you can't disable Object Lock or suspend versioning for the bucket.
	Years *int `pulumi:"years"`
}

type BucketObjectLockConfigurationRuleDefaultRetentionArgs struct {
	// The number of days that you want to specify for the default retention period.
	Days pulumix.Input[*int] `pulumi:"days"`
	// The default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are `GOVERNANCE` and `COMPLIANCE`.
	Mode pulumix.Input[string] `pulumi:"mode"`
	// The number of years that you want to specify for the default retention period.
	//
	// Either `days` or `years` must be specified, but not both.
	//
	// > **NOTE on `objectLockConfiguration`:** You can only enable S3 Object Lock for new buckets. If you need to turn on S3 Object Lock for an existing bucket, please contact AWS Support.
	// When you create a bucket with S3 Object Lock enabled, Amazon S3 automatically enables versioning for the bucket.
	// Once you create a bucket with S3 Object Lock enabled, you can't disable Object Lock or suspend versioning for the bucket.
	Years pulumix.Input[*int] `pulumi:"years"`
}

func (BucketObjectLockConfigurationRuleDefaultRetentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketObjectLockConfigurationRuleDefaultRetention)(nil)).Elem()
}

func (i BucketObjectLockConfigurationRuleDefaultRetentionArgs) ToBucketObjectLockConfigurationRuleDefaultRetentionOutput() BucketObjectLockConfigurationRuleDefaultRetentionOutput {
	return i.ToBucketObjectLockConfigurationRuleDefaultRetentionOutputWithContext(context.Background())
}

func (i BucketObjectLockConfigurationRuleDefaultRetentionArgs) ToBucketObjectLockConfigurationRuleDefaultRetentionOutputWithContext(ctx context.Context) BucketObjectLockConfigurationRuleDefaultRetentionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketObjectLockConfigurationRuleDefaultRetentionOutput)
}

func (i *BucketObjectLockConfigurationRuleDefaultRetentionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketObjectLockConfigurationRuleDefaultRetentionArgs] {
	return pulumix.Val(i)
}

type BucketObjectLockConfigurationRuleDefaultRetentionOutput struct{ *pulumi.OutputState }

func (BucketObjectLockConfigurationRuleDefaultRetentionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketObjectLockConfigurationRuleDefaultRetention)(nil)).Elem()
}

func (o BucketObjectLockConfigurationRuleDefaultRetentionOutput) ToBucketObjectLockConfigurationRuleDefaultRetentionOutput() BucketObjectLockConfigurationRuleDefaultRetentionOutput {
	return o
}

func (o BucketObjectLockConfigurationRuleDefaultRetentionOutput) ToBucketObjectLockConfigurationRuleDefaultRetentionOutputWithContext(ctx context.Context) BucketObjectLockConfigurationRuleDefaultRetentionOutput {
	return o
}

func (o BucketObjectLockConfigurationRuleDefaultRetentionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketObjectLockConfigurationRuleDefaultRetention] {
	return pulumix.Output[BucketObjectLockConfigurationRuleDefaultRetention]{
		OutputState: o.OutputState,
	}
}

// The number of days that you want to specify for the default retention period.
func (o BucketObjectLockConfigurationRuleDefaultRetentionOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketObjectLockConfigurationRuleDefaultRetention](o, func(v BucketObjectLockConfigurationRuleDefaultRetention) *int { return v.Days })
}

// The default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are `GOVERNANCE` and `COMPLIANCE`.
func (o BucketObjectLockConfigurationRuleDefaultRetentionOutput) Mode() pulumix.Output[string] {
	return pulumix.Apply[BucketObjectLockConfigurationRuleDefaultRetention](o, func(v BucketObjectLockConfigurationRuleDefaultRetention) string { return v.Mode })
}

// The number of years that you want to specify for the default retention period.
//
// Either `days` or `years` must be specified, but not both.
//
// > **NOTE on `objectLockConfiguration`:** You can only enable S3 Object Lock for new buckets. If you need to turn on S3 Object Lock for an existing bucket, please contact AWS Support.
// When you create a bucket with S3 Object Lock enabled, Amazon S3 automatically enables versioning for the bucket.
// Once you create a bucket with S3 Object Lock enabled, you can't disable Object Lock or suspend versioning for the bucket.
func (o BucketObjectLockConfigurationRuleDefaultRetentionOutput) Years() pulumix.Output[*int] {
	return pulumix.Apply[BucketObjectLockConfigurationRuleDefaultRetention](o, func(v BucketObjectLockConfigurationRuleDefaultRetention) *int { return v.Years })
}

type BucketObjectLockConfigurationV2Rule struct {
	// Configuration block for specifying the default Object Lock retention settings for new objects placed in the specified bucket. See below.
	DefaultRetention BucketObjectLockConfigurationV2RuleDefaultRetention `pulumi:"defaultRetention"`
}

type BucketObjectLockConfigurationV2RuleArgs struct {
	// Configuration block for specifying the default Object Lock retention settings for new objects placed in the specified bucket. See below.
	DefaultRetention pulumix.Input[*BucketObjectLockConfigurationV2RuleDefaultRetentionArgs] `pulumi:"defaultRetention"`
}

func (BucketObjectLockConfigurationV2RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketObjectLockConfigurationV2Rule)(nil)).Elem()
}

func (i BucketObjectLockConfigurationV2RuleArgs) ToBucketObjectLockConfigurationV2RuleOutput() BucketObjectLockConfigurationV2RuleOutput {
	return i.ToBucketObjectLockConfigurationV2RuleOutputWithContext(context.Background())
}

func (i BucketObjectLockConfigurationV2RuleArgs) ToBucketObjectLockConfigurationV2RuleOutputWithContext(ctx context.Context) BucketObjectLockConfigurationV2RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketObjectLockConfigurationV2RuleOutput)
}

func (i *BucketObjectLockConfigurationV2RuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketObjectLockConfigurationV2RuleArgs] {
	return pulumix.Val(i)
}

type BucketObjectLockConfigurationV2RuleOutput struct{ *pulumi.OutputState }

func (BucketObjectLockConfigurationV2RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketObjectLockConfigurationV2Rule)(nil)).Elem()
}

func (o BucketObjectLockConfigurationV2RuleOutput) ToBucketObjectLockConfigurationV2RuleOutput() BucketObjectLockConfigurationV2RuleOutput {
	return o
}

func (o BucketObjectLockConfigurationV2RuleOutput) ToBucketObjectLockConfigurationV2RuleOutputWithContext(ctx context.Context) BucketObjectLockConfigurationV2RuleOutput {
	return o
}

func (o BucketObjectLockConfigurationV2RuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketObjectLockConfigurationV2Rule] {
	return pulumix.Output[BucketObjectLockConfigurationV2Rule]{
		OutputState: o.OutputState,
	}
}

// Configuration block for specifying the default Object Lock retention settings for new objects placed in the specified bucket. See below.
func (o BucketObjectLockConfigurationV2RuleOutput) DefaultRetention() pulumix.GPtrOutput[BucketObjectLockConfigurationV2RuleDefaultRetention, BucketObjectLockConfigurationV2RuleDefaultRetentionOutput] {
	value := pulumix.Apply[BucketObjectLockConfigurationV2Rule](o, func(v BucketObjectLockConfigurationV2Rule) BucketObjectLockConfigurationV2RuleDefaultRetention {
		return v.DefaultRetention
	})
	return pulumix.GPtrOutput[BucketObjectLockConfigurationV2RuleDefaultRetention, BucketObjectLockConfigurationV2RuleDefaultRetentionOutput]{OutputState: value.OutputState}
}

type BucketObjectLockConfigurationV2RuleDefaultRetention struct {
	// Number of days that you want to specify for the default retention period.
	Days *int `pulumi:"days"`
	// Default Object Lock retention mode you want to apply to new objects placed in the specified bucket. Valid values: `COMPLIANCE`, `GOVERNANCE`.
	Mode *string `pulumi:"mode"`
	// Number of years that you want to specify for the default retention period.
	Years *int `pulumi:"years"`
}

type BucketObjectLockConfigurationV2RuleDefaultRetentionArgs struct {
	// Number of days that you want to specify for the default retention period.
	Days pulumix.Input[*int] `pulumi:"days"`
	// Default Object Lock retention mode you want to apply to new objects placed in the specified bucket. Valid values: `COMPLIANCE`, `GOVERNANCE`.
	Mode pulumix.Input[*string] `pulumi:"mode"`
	// Number of years that you want to specify for the default retention period.
	Years pulumix.Input[*int] `pulumi:"years"`
}

func (BucketObjectLockConfigurationV2RuleDefaultRetentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketObjectLockConfigurationV2RuleDefaultRetention)(nil)).Elem()
}

func (i BucketObjectLockConfigurationV2RuleDefaultRetentionArgs) ToBucketObjectLockConfigurationV2RuleDefaultRetentionOutput() BucketObjectLockConfigurationV2RuleDefaultRetentionOutput {
	return i.ToBucketObjectLockConfigurationV2RuleDefaultRetentionOutputWithContext(context.Background())
}

func (i BucketObjectLockConfigurationV2RuleDefaultRetentionArgs) ToBucketObjectLockConfigurationV2RuleDefaultRetentionOutputWithContext(ctx context.Context) BucketObjectLockConfigurationV2RuleDefaultRetentionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketObjectLockConfigurationV2RuleDefaultRetentionOutput)
}

func (i *BucketObjectLockConfigurationV2RuleDefaultRetentionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketObjectLockConfigurationV2RuleDefaultRetentionArgs] {
	return pulumix.Val(i)
}

type BucketObjectLockConfigurationV2RuleDefaultRetentionOutput struct{ *pulumi.OutputState }

func (BucketObjectLockConfigurationV2RuleDefaultRetentionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketObjectLockConfigurationV2RuleDefaultRetention)(nil)).Elem()
}

func (o BucketObjectLockConfigurationV2RuleDefaultRetentionOutput) ToBucketObjectLockConfigurationV2RuleDefaultRetentionOutput() BucketObjectLockConfigurationV2RuleDefaultRetentionOutput {
	return o
}

func (o BucketObjectLockConfigurationV2RuleDefaultRetentionOutput) ToBucketObjectLockConfigurationV2RuleDefaultRetentionOutputWithContext(ctx context.Context) BucketObjectLockConfigurationV2RuleDefaultRetentionOutput {
	return o
}

func (o BucketObjectLockConfigurationV2RuleDefaultRetentionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketObjectLockConfigurationV2RuleDefaultRetention] {
	return pulumix.Output[BucketObjectLockConfigurationV2RuleDefaultRetention]{
		OutputState: o.OutputState,
	}
}

// Number of days that you want to specify for the default retention period.
func (o BucketObjectLockConfigurationV2RuleDefaultRetentionOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketObjectLockConfigurationV2RuleDefaultRetention](o, func(v BucketObjectLockConfigurationV2RuleDefaultRetention) *int { return v.Days })
}

// Default Object Lock retention mode you want to apply to new objects placed in the specified bucket. Valid values: `COMPLIANCE`, `GOVERNANCE`.
func (o BucketObjectLockConfigurationV2RuleDefaultRetentionOutput) Mode() pulumix.Output[*string] {
	return pulumix.Apply[BucketObjectLockConfigurationV2RuleDefaultRetention](o, func(v BucketObjectLockConfigurationV2RuleDefaultRetention) *string { return v.Mode })
}

// Number of years that you want to specify for the default retention period.
func (o BucketObjectLockConfigurationV2RuleDefaultRetentionOutput) Years() pulumix.Output[*int] {
	return pulumix.Apply[BucketObjectLockConfigurationV2RuleDefaultRetention](o, func(v BucketObjectLockConfigurationV2RuleDefaultRetention) *int { return v.Years })
}

type BucketOwnershipControlsRule struct {
	// Object ownership. Valid values: `BucketOwnerPreferred`, `ObjectWriter` or `BucketOwnerEnforced`
	ObjectOwnership string `pulumi:"objectOwnership"`
}

type BucketOwnershipControlsRuleArgs struct {
	// Object ownership. Valid values: `BucketOwnerPreferred`, `ObjectWriter` or `BucketOwnerEnforced`
	ObjectOwnership pulumix.Input[string] `pulumi:"objectOwnership"`
}

func (BucketOwnershipControlsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketOwnershipControlsRule)(nil)).Elem()
}

func (i BucketOwnershipControlsRuleArgs) ToBucketOwnershipControlsRuleOutput() BucketOwnershipControlsRuleOutput {
	return i.ToBucketOwnershipControlsRuleOutputWithContext(context.Background())
}

func (i BucketOwnershipControlsRuleArgs) ToBucketOwnershipControlsRuleOutputWithContext(ctx context.Context) BucketOwnershipControlsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOwnershipControlsRuleOutput)
}

func (i *BucketOwnershipControlsRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketOwnershipControlsRuleArgs] {
	return pulumix.Val(i)
}

type BucketOwnershipControlsRuleOutput struct{ *pulumi.OutputState }

func (BucketOwnershipControlsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketOwnershipControlsRule)(nil)).Elem()
}

func (o BucketOwnershipControlsRuleOutput) ToBucketOwnershipControlsRuleOutput() BucketOwnershipControlsRuleOutput {
	return o
}

func (o BucketOwnershipControlsRuleOutput) ToBucketOwnershipControlsRuleOutputWithContext(ctx context.Context) BucketOwnershipControlsRuleOutput {
	return o
}

func (o BucketOwnershipControlsRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketOwnershipControlsRule] {
	return pulumix.Output[BucketOwnershipControlsRule]{
		OutputState: o.OutputState,
	}
}

// Object ownership. Valid values: `BucketOwnerPreferred`, `ObjectWriter` or `BucketOwnerEnforced`
func (o BucketOwnershipControlsRuleOutput) ObjectOwnership() pulumix.Output[string] {
	return pulumix.Apply[BucketOwnershipControlsRule](o, func(v BucketOwnershipControlsRule) string { return v.ObjectOwnership })
}

type BucketReplicationConfigRule struct {
	// Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when `filter` is used)documented below.
	DeleteMarkerReplication *BucketReplicationConfigRuleDeleteMarkerReplication `pulumi:"deleteMarkerReplication"`
	// Specifies the destination for the rule. See below.
	Destination BucketReplicationConfigRuleDestination `pulumi:"destination"`
	// Replicate existing objects in the source bucket according to the rule configurations. See below.
	ExistingObjectReplication *BucketReplicationConfigRuleExistingObjectReplication `pulumi:"existingObjectReplication"`
	// Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the `rule` will default to using `prefix`.
	Filter *BucketReplicationConfigRuleFilter `pulumi:"filter"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id *string `pulumi:"id"`
	// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string (`""`) if `filter` is not specified.
	//
	// Deprecated: Use filter instead
	Prefix *string `pulumi:"prefix"`
	// Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
	Priority *int `pulumi:"priority"`
	// Specifies special object selection criteria. See below.
	SourceSelectionCriteria *BucketReplicationConfigRuleSourceSelectionCriteria `pulumi:"sourceSelectionCriteria"`
	// Status of the rule. Either `"Enabled"` or `"Disabled"`. The rule is ignored if status is not "Enabled".
	Status string `pulumi:"status"`
}

type BucketReplicationConfigRuleArgs struct {
	// Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when `filter` is used)documented below.
	DeleteMarkerReplication pulumix.Input[*BucketReplicationConfigRuleDeleteMarkerReplicationArgs] `pulumi:"deleteMarkerReplication"`
	// Specifies the destination for the rule. See below.
	Destination pulumix.Input[*BucketReplicationConfigRuleDestinationArgs] `pulumi:"destination"`
	// Replicate existing objects in the source bucket according to the rule configurations. See below.
	ExistingObjectReplication pulumix.Input[*BucketReplicationConfigRuleExistingObjectReplicationArgs] `pulumi:"existingObjectReplication"`
	// Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the `rule` will default to using `prefix`.
	Filter pulumix.Input[*BucketReplicationConfigRuleFilterArgs] `pulumi:"filter"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string (`""`) if `filter` is not specified.
	//
	// Deprecated: Use filter instead
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
	Priority pulumix.Input[*int] `pulumi:"priority"`
	// Specifies special object selection criteria. See below.
	SourceSelectionCriteria pulumix.Input[*BucketReplicationConfigRuleSourceSelectionCriteriaArgs] `pulumi:"sourceSelectionCriteria"`
	// Status of the rule. Either `"Enabled"` or `"Disabled"`. The rule is ignored if status is not "Enabled".
	Status pulumix.Input[string] `pulumi:"status"`
}

func (BucketReplicationConfigRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRule)(nil)).Elem()
}

func (i BucketReplicationConfigRuleArgs) ToBucketReplicationConfigRuleOutput() BucketReplicationConfigRuleOutput {
	return i.ToBucketReplicationConfigRuleOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleArgs) ToBucketReplicationConfigRuleOutputWithContext(ctx context.Context) BucketReplicationConfigRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleOutput)
}

func (i *BucketReplicationConfigRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRule)(nil)).Elem()
}

func (o BucketReplicationConfigRuleOutput) ToBucketReplicationConfigRuleOutput() BucketReplicationConfigRuleOutput {
	return o
}

func (o BucketReplicationConfigRuleOutput) ToBucketReplicationConfigRuleOutputWithContext(ctx context.Context) BucketReplicationConfigRuleOutput {
	return o
}

func (o BucketReplicationConfigRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRule] {
	return pulumix.Output[BucketReplicationConfigRule]{
		OutputState: o.OutputState,
	}
}

// Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when `filter` is used)documented below.
func (o BucketReplicationConfigRuleOutput) DeleteMarkerReplication() pulumix.GPtrOutput[BucketReplicationConfigRuleDeleteMarkerReplication, BucketReplicationConfigRuleDeleteMarkerReplicationOutput] {
	value := pulumix.Apply[BucketReplicationConfigRule](o, func(v BucketReplicationConfigRule) *BucketReplicationConfigRuleDeleteMarkerReplication {
		return v.DeleteMarkerReplication
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleDeleteMarkerReplication, BucketReplicationConfigRuleDeleteMarkerReplicationOutput]{OutputState: value.OutputState}
}

// Specifies the destination for the rule. See below.
func (o BucketReplicationConfigRuleOutput) Destination() pulumix.GPtrOutput[BucketReplicationConfigRuleDestination, BucketReplicationConfigRuleDestinationOutput] {
	value := pulumix.Apply[BucketReplicationConfigRule](o, func(v BucketReplicationConfigRule) BucketReplicationConfigRuleDestination { return v.Destination })
	return pulumix.GPtrOutput[BucketReplicationConfigRuleDestination, BucketReplicationConfigRuleDestinationOutput]{OutputState: value.OutputState}
}

// Replicate existing objects in the source bucket according to the rule configurations. See below.
func (o BucketReplicationConfigRuleOutput) ExistingObjectReplication() pulumix.GPtrOutput[BucketReplicationConfigRuleExistingObjectReplication, BucketReplicationConfigRuleExistingObjectReplicationOutput] {
	value := pulumix.Apply[BucketReplicationConfigRule](o, func(v BucketReplicationConfigRule) *BucketReplicationConfigRuleExistingObjectReplication {
		return v.ExistingObjectReplication
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleExistingObjectReplication, BucketReplicationConfigRuleExistingObjectReplicationOutput]{OutputState: value.OutputState}
}

// Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the `rule` will default to using `prefix`.
func (o BucketReplicationConfigRuleOutput) Filter() pulumix.GPtrOutput[BucketReplicationConfigRuleFilter, BucketReplicationConfigRuleFilterOutput] {
	value := pulumix.Apply[BucketReplicationConfigRule](o, func(v BucketReplicationConfigRule) *BucketReplicationConfigRuleFilter { return v.Filter })
	return pulumix.GPtrOutput[BucketReplicationConfigRuleFilter, BucketReplicationConfigRuleFilterOutput]{OutputState: value.OutputState}
}

// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
func (o BucketReplicationConfigRuleOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigRule](o, func(v BucketReplicationConfigRule) *string { return v.Id })
}

// Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string (`""`) if `filter` is not specified.
//
// Deprecated: Use filter instead
func (o BucketReplicationConfigRuleOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigRule](o, func(v BucketReplicationConfigRule) *string { return v.Prefix })
}

// Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
func (o BucketReplicationConfigRuleOutput) Priority() pulumix.Output[*int] {
	return pulumix.Apply[BucketReplicationConfigRule](o, func(v BucketReplicationConfigRule) *int { return v.Priority })
}

// Specifies special object selection criteria. See below.
func (o BucketReplicationConfigRuleOutput) SourceSelectionCriteria() pulumix.GPtrOutput[BucketReplicationConfigRuleSourceSelectionCriteria, BucketReplicationConfigRuleSourceSelectionCriteriaOutput] {
	value := pulumix.Apply[BucketReplicationConfigRule](o, func(v BucketReplicationConfigRule) *BucketReplicationConfigRuleSourceSelectionCriteria {
		return v.SourceSelectionCriteria
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleSourceSelectionCriteria, BucketReplicationConfigRuleSourceSelectionCriteriaOutput]{OutputState: value.OutputState}
}

// Status of the rule. Either `"Enabled"` or `"Disabled"`. The rule is ignored if status is not "Enabled".
func (o BucketReplicationConfigRuleOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRule](o, func(v BucketReplicationConfigRule) string { return v.Status })
}

type BucketReplicationConfigRuleDeleteMarkerReplication struct {
	// Whether delete markers should be replicated. Either `"Enabled"` or `"Disabled"`.
	Status string `pulumi:"status"`
}

type BucketReplicationConfigRuleDeleteMarkerReplicationArgs struct {
	// Whether delete markers should be replicated. Either `"Enabled"` or `"Disabled"`.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (BucketReplicationConfigRuleDeleteMarkerReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDeleteMarkerReplication)(nil)).Elem()
}

func (i BucketReplicationConfigRuleDeleteMarkerReplicationArgs) ToBucketReplicationConfigRuleDeleteMarkerReplicationOutput() BucketReplicationConfigRuleDeleteMarkerReplicationOutput {
	return i.ToBucketReplicationConfigRuleDeleteMarkerReplicationOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleDeleteMarkerReplicationArgs) ToBucketReplicationConfigRuleDeleteMarkerReplicationOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDeleteMarkerReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleDeleteMarkerReplicationOutput)
}

func (i *BucketReplicationConfigRuleDeleteMarkerReplicationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleDeleteMarkerReplicationArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleDeleteMarkerReplicationOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleDeleteMarkerReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDeleteMarkerReplication)(nil)).Elem()
}

func (o BucketReplicationConfigRuleDeleteMarkerReplicationOutput) ToBucketReplicationConfigRuleDeleteMarkerReplicationOutput() BucketReplicationConfigRuleDeleteMarkerReplicationOutput {
	return o
}

func (o BucketReplicationConfigRuleDeleteMarkerReplicationOutput) ToBucketReplicationConfigRuleDeleteMarkerReplicationOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDeleteMarkerReplicationOutput {
	return o
}

func (o BucketReplicationConfigRuleDeleteMarkerReplicationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleDeleteMarkerReplication] {
	return pulumix.Output[BucketReplicationConfigRuleDeleteMarkerReplication]{
		OutputState: o.OutputState,
	}
}

// Whether delete markers should be replicated. Either `"Enabled"` or `"Disabled"`.
func (o BucketReplicationConfigRuleDeleteMarkerReplicationOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleDeleteMarkerReplication](o, func(v BucketReplicationConfigRuleDeleteMarkerReplication) string { return v.Status })
}

type BucketReplicationConfigRuleDestination struct {
	// Configuration block that specifies the overrides to use for object owners on replication. See below. Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object. Must be used in conjunction with `account` owner override configuration.
	AccessControlTranslation *BucketReplicationConfigRuleDestinationAccessControlTranslation `pulumi:"accessControlTranslation"`
	// Account ID to specify the replica ownership. Must be used in conjunction with `accessControlTranslation` override configuration.
	Account *string `pulumi:"account"`
	// ARN of the bucket where you want Amazon S3 to store the results.
	Bucket string `pulumi:"bucket"`
	// Configuration block that provides information about encryption. See below. If `sourceSelectionCriteria` is specified, you must specify this element.
	EncryptionConfiguration *BucketReplicationConfigRuleDestinationEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// Configuration block that specifies replication metrics-related settings enabling replication metrics and events. See below.
	Metrics *BucketReplicationConfigRuleDestinationMetrics `pulumi:"metrics"`
	// Configuration block that specifies S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. See below. Replication Time Control must be used in conjunction with `metrics`.
	ReplicationTime *BucketReplicationConfigRuleDestinationReplicationTime `pulumi:"replicationTime"`
	// The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
	StorageClass *string `pulumi:"storageClass"`
}

type BucketReplicationConfigRuleDestinationArgs struct {
	// Configuration block that specifies the overrides to use for object owners on replication. See below. Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object. Must be used in conjunction with `account` owner override configuration.
	AccessControlTranslation pulumix.Input[*BucketReplicationConfigRuleDestinationAccessControlTranslationArgs] `pulumi:"accessControlTranslation"`
	// Account ID to specify the replica ownership. Must be used in conjunction with `accessControlTranslation` override configuration.
	Account pulumix.Input[*string] `pulumi:"account"`
	// ARN of the bucket where you want Amazon S3 to store the results.
	Bucket pulumix.Input[string] `pulumi:"bucket"`
	// Configuration block that provides information about encryption. See below. If `sourceSelectionCriteria` is specified, you must specify this element.
	EncryptionConfiguration pulumix.Input[*BucketReplicationConfigRuleDestinationEncryptionConfigurationArgs] `pulumi:"encryptionConfiguration"`
	// Configuration block that specifies replication metrics-related settings enabling replication metrics and events. See below.
	Metrics pulumix.Input[*BucketReplicationConfigRuleDestinationMetricsArgs] `pulumi:"metrics"`
	// Configuration block that specifies S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. See below. Replication Time Control must be used in conjunction with `metrics`.
	ReplicationTime pulumix.Input[*BucketReplicationConfigRuleDestinationReplicationTimeArgs] `pulumi:"replicationTime"`
	// The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
	StorageClass pulumix.Input[*string] `pulumi:"storageClass"`
}

func (BucketReplicationConfigRuleDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestination)(nil)).Elem()
}

func (i BucketReplicationConfigRuleDestinationArgs) ToBucketReplicationConfigRuleDestinationOutput() BucketReplicationConfigRuleDestinationOutput {
	return i.ToBucketReplicationConfigRuleDestinationOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleDestinationArgs) ToBucketReplicationConfigRuleDestinationOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleDestinationOutput)
}

func (i *BucketReplicationConfigRuleDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleDestinationArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleDestinationOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestination)(nil)).Elem()
}

func (o BucketReplicationConfigRuleDestinationOutput) ToBucketReplicationConfigRuleDestinationOutput() BucketReplicationConfigRuleDestinationOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationOutput) ToBucketReplicationConfigRuleDestinationOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleDestination] {
	return pulumix.Output[BucketReplicationConfigRuleDestination]{
		OutputState: o.OutputState,
	}
}

// Configuration block that specifies the overrides to use for object owners on replication. See below. Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object. Must be used in conjunction with `account` owner override configuration.
func (o BucketReplicationConfigRuleDestinationOutput) AccessControlTranslation() pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationAccessControlTranslation, BucketReplicationConfigRuleDestinationAccessControlTranslationOutput] {
	value := pulumix.Apply[BucketReplicationConfigRuleDestination](o, func(v BucketReplicationConfigRuleDestination) *BucketReplicationConfigRuleDestinationAccessControlTranslation {
		return v.AccessControlTranslation
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationAccessControlTranslation, BucketReplicationConfigRuleDestinationAccessControlTranslationOutput]{OutputState: value.OutputState}
}

// Account ID to specify the replica ownership. Must be used in conjunction with `accessControlTranslation` override configuration.
func (o BucketReplicationConfigRuleDestinationOutput) Account() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigRuleDestination](o, func(v BucketReplicationConfigRuleDestination) *string { return v.Account })
}

// ARN of the bucket where you want Amazon S3 to store the results.
func (o BucketReplicationConfigRuleDestinationOutput) Bucket() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleDestination](o, func(v BucketReplicationConfigRuleDestination) string { return v.Bucket })
}

// Configuration block that provides information about encryption. See below. If `sourceSelectionCriteria` is specified, you must specify this element.
func (o BucketReplicationConfigRuleDestinationOutput) EncryptionConfiguration() pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationEncryptionConfiguration, BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput] {
	value := pulumix.Apply[BucketReplicationConfigRuleDestination](o, func(v BucketReplicationConfigRuleDestination) *BucketReplicationConfigRuleDestinationEncryptionConfiguration {
		return v.EncryptionConfiguration
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationEncryptionConfiguration, BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration block that specifies replication metrics-related settings enabling replication metrics and events. See below.
func (o BucketReplicationConfigRuleDestinationOutput) Metrics() pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationMetrics, BucketReplicationConfigRuleDestinationMetricsOutput] {
	value := pulumix.Apply[BucketReplicationConfigRuleDestination](o, func(v BucketReplicationConfigRuleDestination) *BucketReplicationConfigRuleDestinationMetrics {
		return v.Metrics
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationMetrics, BucketReplicationConfigRuleDestinationMetricsOutput]{OutputState: value.OutputState}
}

// Configuration block that specifies S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. See below. Replication Time Control must be used in conjunction with `metrics`.
func (o BucketReplicationConfigRuleDestinationOutput) ReplicationTime() pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationReplicationTime, BucketReplicationConfigRuleDestinationReplicationTimeOutput] {
	value := pulumix.Apply[BucketReplicationConfigRuleDestination](o, func(v BucketReplicationConfigRuleDestination) *BucketReplicationConfigRuleDestinationReplicationTime {
		return v.ReplicationTime
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationReplicationTime, BucketReplicationConfigRuleDestinationReplicationTimeOutput]{OutputState: value.OutputState}
}

// The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
func (o BucketReplicationConfigRuleDestinationOutput) StorageClass() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigRuleDestination](o, func(v BucketReplicationConfigRuleDestination) *string { return v.StorageClass })
}

type BucketReplicationConfigRuleDestinationAccessControlTranslation struct {
	// Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the Amazon S3 API Reference. Valid values: `Destination`.
	Owner string `pulumi:"owner"`
}

type BucketReplicationConfigRuleDestinationAccessControlTranslationArgs struct {
	// Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the Amazon S3 API Reference. Valid values: `Destination`.
	Owner pulumix.Input[string] `pulumi:"owner"`
}

func (BucketReplicationConfigRuleDestinationAccessControlTranslationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationAccessControlTranslation)(nil)).Elem()
}

func (i BucketReplicationConfigRuleDestinationAccessControlTranslationArgs) ToBucketReplicationConfigRuleDestinationAccessControlTranslationOutput() BucketReplicationConfigRuleDestinationAccessControlTranslationOutput {
	return i.ToBucketReplicationConfigRuleDestinationAccessControlTranslationOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleDestinationAccessControlTranslationArgs) ToBucketReplicationConfigRuleDestinationAccessControlTranslationOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationAccessControlTranslationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleDestinationAccessControlTranslationOutput)
}

func (i *BucketReplicationConfigRuleDestinationAccessControlTranslationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleDestinationAccessControlTranslationArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleDestinationAccessControlTranslationOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleDestinationAccessControlTranslationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationAccessControlTranslation)(nil)).Elem()
}

func (o BucketReplicationConfigRuleDestinationAccessControlTranslationOutput) ToBucketReplicationConfigRuleDestinationAccessControlTranslationOutput() BucketReplicationConfigRuleDestinationAccessControlTranslationOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationAccessControlTranslationOutput) ToBucketReplicationConfigRuleDestinationAccessControlTranslationOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationAccessControlTranslationOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationAccessControlTranslationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleDestinationAccessControlTranslation] {
	return pulumix.Output[BucketReplicationConfigRuleDestinationAccessControlTranslation]{
		OutputState: o.OutputState,
	}
}

// Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the Amazon S3 API Reference. Valid values: `Destination`.
func (o BucketReplicationConfigRuleDestinationAccessControlTranslationOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleDestinationAccessControlTranslation](o, func(v BucketReplicationConfigRuleDestinationAccessControlTranslation) string { return v.Owner })
}

type BucketReplicationConfigRuleDestinationEncryptionConfiguration struct {
	// ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket.
	ReplicaKmsKeyId string `pulumi:"replicaKmsKeyId"`
}

type BucketReplicationConfigRuleDestinationEncryptionConfigurationArgs struct {
	// ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket.
	ReplicaKmsKeyId pulumix.Input[string] `pulumi:"replicaKmsKeyId"`
}

func (BucketReplicationConfigRuleDestinationEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationEncryptionConfiguration)(nil)).Elem()
}

func (i BucketReplicationConfigRuleDestinationEncryptionConfigurationArgs) ToBucketReplicationConfigRuleDestinationEncryptionConfigurationOutput() BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput {
	return i.ToBucketReplicationConfigRuleDestinationEncryptionConfigurationOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleDestinationEncryptionConfigurationArgs) ToBucketReplicationConfigRuleDestinationEncryptionConfigurationOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput)
}

func (i *BucketReplicationConfigRuleDestinationEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleDestinationEncryptionConfigurationArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationEncryptionConfiguration)(nil)).Elem()
}

func (o BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput) ToBucketReplicationConfigRuleDestinationEncryptionConfigurationOutput() BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput) ToBucketReplicationConfigRuleDestinationEncryptionConfigurationOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleDestinationEncryptionConfiguration] {
	return pulumix.Output[BucketReplicationConfigRuleDestinationEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket.
func (o BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput) ReplicaKmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleDestinationEncryptionConfiguration](o, func(v BucketReplicationConfigRuleDestinationEncryptionConfiguration) string { return v.ReplicaKmsKeyId })
}

type BucketReplicationConfigRuleDestinationMetrics struct {
	// Configuration block that specifies the time threshold for emitting the `s3:Replication:OperationMissedThreshold` event. See below.
	EventThreshold *BucketReplicationConfigRuleDestinationMetricsEventThreshold `pulumi:"eventThreshold"`
	// Status of the Destination Metrics. Either `"Enabled"` or `"Disabled"`.
	Status string `pulumi:"status"`
}

type BucketReplicationConfigRuleDestinationMetricsArgs struct {
	// Configuration block that specifies the time threshold for emitting the `s3:Replication:OperationMissedThreshold` event. See below.
	EventThreshold pulumix.Input[*BucketReplicationConfigRuleDestinationMetricsEventThresholdArgs] `pulumi:"eventThreshold"`
	// Status of the Destination Metrics. Either `"Enabled"` or `"Disabled"`.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (BucketReplicationConfigRuleDestinationMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationMetrics)(nil)).Elem()
}

func (i BucketReplicationConfigRuleDestinationMetricsArgs) ToBucketReplicationConfigRuleDestinationMetricsOutput() BucketReplicationConfigRuleDestinationMetricsOutput {
	return i.ToBucketReplicationConfigRuleDestinationMetricsOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleDestinationMetricsArgs) ToBucketReplicationConfigRuleDestinationMetricsOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleDestinationMetricsOutput)
}

func (i *BucketReplicationConfigRuleDestinationMetricsArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleDestinationMetricsArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleDestinationMetricsOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleDestinationMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationMetrics)(nil)).Elem()
}

func (o BucketReplicationConfigRuleDestinationMetricsOutput) ToBucketReplicationConfigRuleDestinationMetricsOutput() BucketReplicationConfigRuleDestinationMetricsOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationMetricsOutput) ToBucketReplicationConfigRuleDestinationMetricsOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationMetricsOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationMetricsOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleDestinationMetrics] {
	return pulumix.Output[BucketReplicationConfigRuleDestinationMetrics]{
		OutputState: o.OutputState,
	}
}

// Configuration block that specifies the time threshold for emitting the `s3:Replication:OperationMissedThreshold` event. See below.
func (o BucketReplicationConfigRuleDestinationMetricsOutput) EventThreshold() pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationMetricsEventThreshold, BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput] {
	value := pulumix.Apply[BucketReplicationConfigRuleDestinationMetrics](o, func(v BucketReplicationConfigRuleDestinationMetrics) *BucketReplicationConfigRuleDestinationMetricsEventThreshold {
		return v.EventThreshold
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationMetricsEventThreshold, BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput]{OutputState: value.OutputState}
}

// Status of the Destination Metrics. Either `"Enabled"` or `"Disabled"`.
func (o BucketReplicationConfigRuleDestinationMetricsOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleDestinationMetrics](o, func(v BucketReplicationConfigRuleDestinationMetrics) string { return v.Status })
}

type BucketReplicationConfigRuleDestinationMetricsEventThreshold struct {
	// Time in minutes. Valid values: `15`.
	Minutes int `pulumi:"minutes"`
}

type BucketReplicationConfigRuleDestinationMetricsEventThresholdArgs struct {
	// Time in minutes. Valid values: `15`.
	Minutes pulumix.Input[int] `pulumi:"minutes"`
}

func (BucketReplicationConfigRuleDestinationMetricsEventThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationMetricsEventThreshold)(nil)).Elem()
}

func (i BucketReplicationConfigRuleDestinationMetricsEventThresholdArgs) ToBucketReplicationConfigRuleDestinationMetricsEventThresholdOutput() BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput {
	return i.ToBucketReplicationConfigRuleDestinationMetricsEventThresholdOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleDestinationMetricsEventThresholdArgs) ToBucketReplicationConfigRuleDestinationMetricsEventThresholdOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput)
}

func (i *BucketReplicationConfigRuleDestinationMetricsEventThresholdArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleDestinationMetricsEventThresholdArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationMetricsEventThreshold)(nil)).Elem()
}

func (o BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput) ToBucketReplicationConfigRuleDestinationMetricsEventThresholdOutput() BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput) ToBucketReplicationConfigRuleDestinationMetricsEventThresholdOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleDestinationMetricsEventThreshold] {
	return pulumix.Output[BucketReplicationConfigRuleDestinationMetricsEventThreshold]{
		OutputState: o.OutputState,
	}
}

// Time in minutes. Valid values: `15`.
func (o BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput) Minutes() pulumix.Output[int] {
	return pulumix.Apply[BucketReplicationConfigRuleDestinationMetricsEventThreshold](o, func(v BucketReplicationConfigRuleDestinationMetricsEventThreshold) int { return v.Minutes })
}

type BucketReplicationConfigRuleDestinationReplicationTime struct {
	// Status of the Replication Time Control. Either `"Enabled"` or `"Disabled"`.
	Status string `pulumi:"status"`
	// Configuration block specifying the time by which replication should be complete for all objects and operations on objects. See below.
	Time BucketReplicationConfigRuleDestinationReplicationTimeTime `pulumi:"time"`
}

type BucketReplicationConfigRuleDestinationReplicationTimeArgs struct {
	// Status of the Replication Time Control. Either `"Enabled"` or `"Disabled"`.
	Status pulumix.Input[string] `pulumi:"status"`
	// Configuration block specifying the time by which replication should be complete for all objects and operations on objects. See below.
	Time pulumix.Input[*BucketReplicationConfigRuleDestinationReplicationTimeTimeArgs] `pulumi:"time"`
}

func (BucketReplicationConfigRuleDestinationReplicationTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationReplicationTime)(nil)).Elem()
}

func (i BucketReplicationConfigRuleDestinationReplicationTimeArgs) ToBucketReplicationConfigRuleDestinationReplicationTimeOutput() BucketReplicationConfigRuleDestinationReplicationTimeOutput {
	return i.ToBucketReplicationConfigRuleDestinationReplicationTimeOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleDestinationReplicationTimeArgs) ToBucketReplicationConfigRuleDestinationReplicationTimeOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationReplicationTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleDestinationReplicationTimeOutput)
}

func (i *BucketReplicationConfigRuleDestinationReplicationTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleDestinationReplicationTimeArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleDestinationReplicationTimeOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleDestinationReplicationTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationReplicationTime)(nil)).Elem()
}

func (o BucketReplicationConfigRuleDestinationReplicationTimeOutput) ToBucketReplicationConfigRuleDestinationReplicationTimeOutput() BucketReplicationConfigRuleDestinationReplicationTimeOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationReplicationTimeOutput) ToBucketReplicationConfigRuleDestinationReplicationTimeOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationReplicationTimeOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationReplicationTimeOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleDestinationReplicationTime] {
	return pulumix.Output[BucketReplicationConfigRuleDestinationReplicationTime]{
		OutputState: o.OutputState,
	}
}

// Status of the Replication Time Control. Either `"Enabled"` or `"Disabled"`.
func (o BucketReplicationConfigRuleDestinationReplicationTimeOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleDestinationReplicationTime](o, func(v BucketReplicationConfigRuleDestinationReplicationTime) string { return v.Status })
}

// Configuration block specifying the time by which replication should be complete for all objects and operations on objects. See below.
func (o BucketReplicationConfigRuleDestinationReplicationTimeOutput) Time() pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationReplicationTimeTime, BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput] {
	value := pulumix.Apply[BucketReplicationConfigRuleDestinationReplicationTime](o, func(v BucketReplicationConfigRuleDestinationReplicationTime) BucketReplicationConfigRuleDestinationReplicationTimeTime {
		return v.Time
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleDestinationReplicationTimeTime, BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput]{OutputState: value.OutputState}
}

type BucketReplicationConfigRuleDestinationReplicationTimeTime struct {
	// Time in minutes. Valid values: `15`.
	Minutes int `pulumi:"minutes"`
}

type BucketReplicationConfigRuleDestinationReplicationTimeTimeArgs struct {
	// Time in minutes. Valid values: `15`.
	Minutes pulumix.Input[int] `pulumi:"minutes"`
}

func (BucketReplicationConfigRuleDestinationReplicationTimeTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationReplicationTimeTime)(nil)).Elem()
}

func (i BucketReplicationConfigRuleDestinationReplicationTimeTimeArgs) ToBucketReplicationConfigRuleDestinationReplicationTimeTimeOutput() BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput {
	return i.ToBucketReplicationConfigRuleDestinationReplicationTimeTimeOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleDestinationReplicationTimeTimeArgs) ToBucketReplicationConfigRuleDestinationReplicationTimeTimeOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput)
}

func (i *BucketReplicationConfigRuleDestinationReplicationTimeTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleDestinationReplicationTimeTimeArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleDestinationReplicationTimeTime)(nil)).Elem()
}

func (o BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput) ToBucketReplicationConfigRuleDestinationReplicationTimeTimeOutput() BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput) ToBucketReplicationConfigRuleDestinationReplicationTimeTimeOutputWithContext(ctx context.Context) BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput {
	return o
}

func (o BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleDestinationReplicationTimeTime] {
	return pulumix.Output[BucketReplicationConfigRuleDestinationReplicationTimeTime]{
		OutputState: o.OutputState,
	}
}

// Time in minutes. Valid values: `15`.
func (o BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput) Minutes() pulumix.Output[int] {
	return pulumix.Apply[BucketReplicationConfigRuleDestinationReplicationTimeTime](o, func(v BucketReplicationConfigRuleDestinationReplicationTimeTime) int { return v.Minutes })
}

type BucketReplicationConfigRuleExistingObjectReplication struct {
	// Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
	Status string `pulumi:"status"`
}

type BucketReplicationConfigRuleExistingObjectReplicationArgs struct {
	// Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (BucketReplicationConfigRuleExistingObjectReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleExistingObjectReplication)(nil)).Elem()
}

func (i BucketReplicationConfigRuleExistingObjectReplicationArgs) ToBucketReplicationConfigRuleExistingObjectReplicationOutput() BucketReplicationConfigRuleExistingObjectReplicationOutput {
	return i.ToBucketReplicationConfigRuleExistingObjectReplicationOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleExistingObjectReplicationArgs) ToBucketReplicationConfigRuleExistingObjectReplicationOutputWithContext(ctx context.Context) BucketReplicationConfigRuleExistingObjectReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleExistingObjectReplicationOutput)
}

func (i *BucketReplicationConfigRuleExistingObjectReplicationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleExistingObjectReplicationArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleExistingObjectReplicationOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleExistingObjectReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleExistingObjectReplication)(nil)).Elem()
}

func (o BucketReplicationConfigRuleExistingObjectReplicationOutput) ToBucketReplicationConfigRuleExistingObjectReplicationOutput() BucketReplicationConfigRuleExistingObjectReplicationOutput {
	return o
}

func (o BucketReplicationConfigRuleExistingObjectReplicationOutput) ToBucketReplicationConfigRuleExistingObjectReplicationOutputWithContext(ctx context.Context) BucketReplicationConfigRuleExistingObjectReplicationOutput {
	return o
}

func (o BucketReplicationConfigRuleExistingObjectReplicationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleExistingObjectReplication] {
	return pulumix.Output[BucketReplicationConfigRuleExistingObjectReplication]{
		OutputState: o.OutputState,
	}
}

// Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
func (o BucketReplicationConfigRuleExistingObjectReplicationOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleExistingObjectReplication](o, func(v BucketReplicationConfigRuleExistingObjectReplication) string { return v.Status })
}

type BucketReplicationConfigRuleFilter struct {
	// Configuration block for specifying rule filters. This element is required only if you specify more than one filter. See and below for more details.
	And *BucketReplicationConfigRuleFilterAnd `pulumi:"and"`
	// Object key name prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix *string `pulumi:"prefix"`
	// Configuration block for specifying a tag key and value. See below.
	Tag *BucketReplicationConfigRuleFilterTag `pulumi:"tag"`
}

type BucketReplicationConfigRuleFilterArgs struct {
	// Configuration block for specifying rule filters. This element is required only if you specify more than one filter. See and below for more details.
	And pulumix.Input[*BucketReplicationConfigRuleFilterAndArgs] `pulumi:"and"`
	// Object key name prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Configuration block for specifying a tag key and value. See below.
	Tag pulumix.Input[*BucketReplicationConfigRuleFilterTagArgs] `pulumi:"tag"`
}

func (BucketReplicationConfigRuleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleFilter)(nil)).Elem()
}

func (i BucketReplicationConfigRuleFilterArgs) ToBucketReplicationConfigRuleFilterOutput() BucketReplicationConfigRuleFilterOutput {
	return i.ToBucketReplicationConfigRuleFilterOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleFilterArgs) ToBucketReplicationConfigRuleFilterOutputWithContext(ctx context.Context) BucketReplicationConfigRuleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleFilterOutput)
}

func (i *BucketReplicationConfigRuleFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleFilterArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleFilterOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleFilter)(nil)).Elem()
}

func (o BucketReplicationConfigRuleFilterOutput) ToBucketReplicationConfigRuleFilterOutput() BucketReplicationConfigRuleFilterOutput {
	return o
}

func (o BucketReplicationConfigRuleFilterOutput) ToBucketReplicationConfigRuleFilterOutputWithContext(ctx context.Context) BucketReplicationConfigRuleFilterOutput {
	return o
}

func (o BucketReplicationConfigRuleFilterOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleFilter] {
	return pulumix.Output[BucketReplicationConfigRuleFilter]{
		OutputState: o.OutputState,
	}
}

// Configuration block for specifying rule filters. This element is required only if you specify more than one filter. See and below for more details.
func (o BucketReplicationConfigRuleFilterOutput) And() pulumix.GPtrOutput[BucketReplicationConfigRuleFilterAnd, BucketReplicationConfigRuleFilterAndOutput] {
	value := pulumix.Apply[BucketReplicationConfigRuleFilter](o, func(v BucketReplicationConfigRuleFilter) *BucketReplicationConfigRuleFilterAnd { return v.And })
	return pulumix.GPtrOutput[BucketReplicationConfigRuleFilterAnd, BucketReplicationConfigRuleFilterAndOutput]{OutputState: value.OutputState}
}

// Object key name prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
func (o BucketReplicationConfigRuleFilterOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigRuleFilter](o, func(v BucketReplicationConfigRuleFilter) *string { return v.Prefix })
}

// Configuration block for specifying a tag key and value. See below.
func (o BucketReplicationConfigRuleFilterOutput) Tag() pulumix.GPtrOutput[BucketReplicationConfigRuleFilterTag, BucketReplicationConfigRuleFilterTagOutput] {
	value := pulumix.Apply[BucketReplicationConfigRuleFilter](o, func(v BucketReplicationConfigRuleFilter) *BucketReplicationConfigRuleFilterTag { return v.Tag })
	return pulumix.GPtrOutput[BucketReplicationConfigRuleFilterTag, BucketReplicationConfigRuleFilterTagOutput]{OutputState: value.OutputState}
}

type BucketReplicationConfigRuleFilterAnd struct {
	// Object key name prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix *string `pulumi:"prefix"`
	// Map of tags (key and value pairs) that identifies a subset of objects to which the rule applies. The rule applies only to objects having all the tags in its tagset.
	Tags map[string]string `pulumi:"tags"`
}

type BucketReplicationConfigRuleFilterAndArgs struct {
	// Object key name prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Map of tags (key and value pairs) that identifies a subset of objects to which the rule applies. The rule applies only to objects having all the tags in its tagset.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (BucketReplicationConfigRuleFilterAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleFilterAnd)(nil)).Elem()
}

func (i BucketReplicationConfigRuleFilterAndArgs) ToBucketReplicationConfigRuleFilterAndOutput() BucketReplicationConfigRuleFilterAndOutput {
	return i.ToBucketReplicationConfigRuleFilterAndOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleFilterAndArgs) ToBucketReplicationConfigRuleFilterAndOutputWithContext(ctx context.Context) BucketReplicationConfigRuleFilterAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleFilterAndOutput)
}

func (i *BucketReplicationConfigRuleFilterAndArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleFilterAndArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleFilterAndOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleFilterAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleFilterAnd)(nil)).Elem()
}

func (o BucketReplicationConfigRuleFilterAndOutput) ToBucketReplicationConfigRuleFilterAndOutput() BucketReplicationConfigRuleFilterAndOutput {
	return o
}

func (o BucketReplicationConfigRuleFilterAndOutput) ToBucketReplicationConfigRuleFilterAndOutputWithContext(ctx context.Context) BucketReplicationConfigRuleFilterAndOutput {
	return o
}

func (o BucketReplicationConfigRuleFilterAndOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleFilterAnd] {
	return pulumix.Output[BucketReplicationConfigRuleFilterAnd]{
		OutputState: o.OutputState,
	}
}

// Object key name prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
func (o BucketReplicationConfigRuleFilterAndOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigRuleFilterAnd](o, func(v BucketReplicationConfigRuleFilterAnd) *string { return v.Prefix })
}

// Map of tags (key and value pairs) that identifies a subset of objects to which the rule applies. The rule applies only to objects having all the tags in its tagset.
func (o BucketReplicationConfigRuleFilterAndOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[BucketReplicationConfigRuleFilterAnd](o, func(v BucketReplicationConfigRuleFilterAnd) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type BucketReplicationConfigRuleFilterTag struct {
	// Name of the object key.
	Key string `pulumi:"key"`
	// Value of the tag.
	Value string `pulumi:"value"`
}

type BucketReplicationConfigRuleFilterTagArgs struct {
	// Name of the object key.
	Key pulumix.Input[string] `pulumi:"key"`
	// Value of the tag.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (BucketReplicationConfigRuleFilterTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleFilterTag)(nil)).Elem()
}

func (i BucketReplicationConfigRuleFilterTagArgs) ToBucketReplicationConfigRuleFilterTagOutput() BucketReplicationConfigRuleFilterTagOutput {
	return i.ToBucketReplicationConfigRuleFilterTagOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleFilterTagArgs) ToBucketReplicationConfigRuleFilterTagOutputWithContext(ctx context.Context) BucketReplicationConfigRuleFilterTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleFilterTagOutput)
}

func (i *BucketReplicationConfigRuleFilterTagArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleFilterTagArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleFilterTagOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleFilterTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleFilterTag)(nil)).Elem()
}

func (o BucketReplicationConfigRuleFilterTagOutput) ToBucketReplicationConfigRuleFilterTagOutput() BucketReplicationConfigRuleFilterTagOutput {
	return o
}

func (o BucketReplicationConfigRuleFilterTagOutput) ToBucketReplicationConfigRuleFilterTagOutputWithContext(ctx context.Context) BucketReplicationConfigRuleFilterTagOutput {
	return o
}

func (o BucketReplicationConfigRuleFilterTagOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleFilterTag] {
	return pulumix.Output[BucketReplicationConfigRuleFilterTag]{
		OutputState: o.OutputState,
	}
}

// Name of the object key.
func (o BucketReplicationConfigRuleFilterTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleFilterTag](o, func(v BucketReplicationConfigRuleFilterTag) string { return v.Key })
}

// Value of the tag.
func (o BucketReplicationConfigRuleFilterTagOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleFilterTag](o, func(v BucketReplicationConfigRuleFilterTag) string { return v.Value })
}

type BucketReplicationConfigRuleSourceSelectionCriteria struct {
	// Configuration block that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when `filter` is specified), you can specify this element and set the status to `Enabled` to replicate modifications on replicas.
	ReplicaModifications *BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications `pulumi:"replicaModifications"`
	// Configuration block for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If specified, `replicaKmsKeyId` in `destination` `encryptionConfiguration` must be specified as well.
	SseKmsEncryptedObjects *BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects `pulumi:"sseKmsEncryptedObjects"`
}

type BucketReplicationConfigRuleSourceSelectionCriteriaArgs struct {
	// Configuration block that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when `filter` is specified), you can specify this element and set the status to `Enabled` to replicate modifications on replicas.
	ReplicaModifications pulumix.Input[*BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsArgs] `pulumi:"replicaModifications"`
	// Configuration block for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If specified, `replicaKmsKeyId` in `destination` `encryptionConfiguration` must be specified as well.
	SseKmsEncryptedObjects pulumix.Input[*BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs] `pulumi:"sseKmsEncryptedObjects"`
}

func (BucketReplicationConfigRuleSourceSelectionCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleSourceSelectionCriteria)(nil)).Elem()
}

func (i BucketReplicationConfigRuleSourceSelectionCriteriaArgs) ToBucketReplicationConfigRuleSourceSelectionCriteriaOutput() BucketReplicationConfigRuleSourceSelectionCriteriaOutput {
	return i.ToBucketReplicationConfigRuleSourceSelectionCriteriaOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleSourceSelectionCriteriaArgs) ToBucketReplicationConfigRuleSourceSelectionCriteriaOutputWithContext(ctx context.Context) BucketReplicationConfigRuleSourceSelectionCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleSourceSelectionCriteriaOutput)
}

func (i *BucketReplicationConfigRuleSourceSelectionCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleSourceSelectionCriteriaArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleSourceSelectionCriteriaOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleSourceSelectionCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleSourceSelectionCriteria)(nil)).Elem()
}

func (o BucketReplicationConfigRuleSourceSelectionCriteriaOutput) ToBucketReplicationConfigRuleSourceSelectionCriteriaOutput() BucketReplicationConfigRuleSourceSelectionCriteriaOutput {
	return o
}

func (o BucketReplicationConfigRuleSourceSelectionCriteriaOutput) ToBucketReplicationConfigRuleSourceSelectionCriteriaOutputWithContext(ctx context.Context) BucketReplicationConfigRuleSourceSelectionCriteriaOutput {
	return o
}

func (o BucketReplicationConfigRuleSourceSelectionCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleSourceSelectionCriteria] {
	return pulumix.Output[BucketReplicationConfigRuleSourceSelectionCriteria]{
		OutputState: o.OutputState,
	}
}

// Configuration block that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when `filter` is specified), you can specify this element and set the status to `Enabled` to replicate modifications on replicas.
func (o BucketReplicationConfigRuleSourceSelectionCriteriaOutput) ReplicaModifications() pulumix.GPtrOutput[BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications, BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput] {
	value := pulumix.Apply[BucketReplicationConfigRuleSourceSelectionCriteria](o, func(v BucketReplicationConfigRuleSourceSelectionCriteria) *BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications {
		return v.ReplicaModifications
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications, BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput]{OutputState: value.OutputState}
}

// Configuration block for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If specified, `replicaKmsKeyId` in `destination` `encryptionConfiguration` must be specified as well.
func (o BucketReplicationConfigRuleSourceSelectionCriteriaOutput) SseKmsEncryptedObjects() pulumix.GPtrOutput[BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects, BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput] {
	value := pulumix.Apply[BucketReplicationConfigRuleSourceSelectionCriteria](o, func(v BucketReplicationConfigRuleSourceSelectionCriteria) *BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects {
		return v.SseKmsEncryptedObjects
	})
	return pulumix.GPtrOutput[BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects, BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput]{OutputState: value.OutputState}
}

type BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications struct {
	// Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
	Status string `pulumi:"status"`
}

type BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsArgs struct {
	// Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications)(nil)).Elem()
}

func (i BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsArgs) ToBucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput() BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput {
	return i.ToBucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsArgs) ToBucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutputWithContext(ctx context.Context) BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput)
}

func (i *BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications)(nil)).Elem()
}

func (o BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput) ToBucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput() BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput {
	return o
}

func (o BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput) ToBucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutputWithContext(ctx context.Context) BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput {
	return o
}

func (o BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications] {
	return pulumix.Output[BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications]{
		OutputState: o.OutputState,
	}
}

// Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
func (o BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications](o, func(v BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications) string { return v.Status })
}

type BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects struct {
	// Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
	Status string `pulumi:"status"`
}

type BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs struct {
	// Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects)(nil)).Elem()
}

func (i BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs) ToBucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput() BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput {
	return i.ToBucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutputWithContext(context.Background())
}

func (i BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs) ToBucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutputWithContext(ctx context.Context) BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput)
}

func (i *BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects)(nil)).Elem()
}

func (o BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput) ToBucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput() BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput {
	return o
}

func (o BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput) ToBucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutputWithContext(ctx context.Context) BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput {
	return o
}

func (o BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects] {
	return pulumix.Output[BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects]{
		OutputState: o.OutputState,
	}
}

// Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
func (o BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects](o, func(v BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects) string {
		return v.Status
	})
}

type BucketReplicationConfiguration struct {
	// The ARN of the IAM role for Amazon S3 to assume when replicating the objects.
	Role string `pulumi:"role"`
	// Specifies the rules managing the replication (documented below).
	Rules []BucketReplicationConfigurationRule `pulumi:"rules"`
}

type BucketReplicationConfigurationArgs struct {
	// The ARN of the IAM role for Amazon S3 to assume when replicating the objects.
	Role pulumix.Input[string] `pulumi:"role"`
	// Specifies the rules managing the replication (documented below).
	Rules pulumix.Input[[]*BucketReplicationConfigurationRuleArgs] `pulumi:"rules"`
}

func (BucketReplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfiguration)(nil)).Elem()
}

func (i BucketReplicationConfigurationArgs) ToBucketReplicationConfigurationOutput() BucketReplicationConfigurationOutput {
	return i.ToBucketReplicationConfigurationOutputWithContext(context.Background())
}

func (i BucketReplicationConfigurationArgs) ToBucketReplicationConfigurationOutputWithContext(ctx context.Context) BucketReplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigurationOutput)
}

func (i *BucketReplicationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigurationArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigurationOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfiguration)(nil)).Elem()
}

func (o BucketReplicationConfigurationOutput) ToBucketReplicationConfigurationOutput() BucketReplicationConfigurationOutput {
	return o
}

func (o BucketReplicationConfigurationOutput) ToBucketReplicationConfigurationOutputWithContext(ctx context.Context) BucketReplicationConfigurationOutput {
	return o
}

func (o BucketReplicationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfiguration] {
	return pulumix.Output[BucketReplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

// The ARN of the IAM role for Amazon S3 to assume when replicating the objects.
func (o BucketReplicationConfigurationOutput) Role() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfiguration](o, func(v BucketReplicationConfiguration) string { return v.Role })
}

// Specifies the rules managing the replication (documented below).
func (o BucketReplicationConfigurationOutput) Rules() pulumix.GArrayOutput[BucketReplicationConfigurationRule, BucketReplicationConfigurationRuleOutput] {
	value := pulumix.Apply[BucketReplicationConfiguration](o, func(v BucketReplicationConfiguration) []BucketReplicationConfigurationRule { return v.Rules })
	return pulumix.GArrayOutput[BucketReplicationConfigurationRule, BucketReplicationConfigurationRuleOutput]{OutputState: value.OutputState}
}

type BucketReplicationConfigurationRule struct {
	// Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
	DeleteMarkerReplicationStatus *string `pulumi:"deleteMarkerReplicationStatus"`
	// Specifies the destination for the rule (documented below).
	Destination BucketReplicationConfigurationRuleDestination `pulumi:"destination"`
	// Filter that identifies subset of objects to which the replication rule applies (documented below).
	Filter *BucketReplicationConfigurationRuleFilter `pulumi:"filter"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id *string `pulumi:"id"`
	// Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix *string `pulumi:"prefix"`
	// The priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
	Priority *int `pulumi:"priority"`
	// Specifies special object selection criteria (documented below).
	SourceSelectionCriteria *BucketReplicationConfigurationRuleSourceSelectionCriteria `pulumi:"sourceSelectionCriteria"`
	// The status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
	//
	// > **NOTE:** Replication to multiple destination buckets requires that `priority` is specified in the `rules` object. If the corresponding rule requires no filter, an empty configuration block `filter {}` must be specified.
	Status string `pulumi:"status"`
}

type BucketReplicationConfigurationRuleArgs struct {
	// Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
	DeleteMarkerReplicationStatus pulumix.Input[*string] `pulumi:"deleteMarkerReplicationStatus"`
	// Specifies the destination for the rule (documented below).
	Destination pulumix.Input[*BucketReplicationConfigurationRuleDestinationArgs] `pulumi:"destination"`
	// Filter that identifies subset of objects to which the replication rule applies (documented below).
	Filter pulumix.Input[*BucketReplicationConfigurationRuleFilterArgs] `pulumi:"filter"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// The priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
	Priority pulumix.Input[*int] `pulumi:"priority"`
	// Specifies special object selection criteria (documented below).
	SourceSelectionCriteria pulumix.Input[*BucketReplicationConfigurationRuleSourceSelectionCriteriaArgs] `pulumi:"sourceSelectionCriteria"`
	// The status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
	//
	// > **NOTE:** Replication to multiple destination buckets requires that `priority` is specified in the `rules` object. If the corresponding rule requires no filter, an empty configuration block `filter {}` must be specified.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (BucketReplicationConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRule)(nil)).Elem()
}

func (i BucketReplicationConfigurationRuleArgs) ToBucketReplicationConfigurationRuleOutput() BucketReplicationConfigurationRuleOutput {
	return i.ToBucketReplicationConfigurationRuleOutputWithContext(context.Background())
}

func (i BucketReplicationConfigurationRuleArgs) ToBucketReplicationConfigurationRuleOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigurationRuleOutput)
}

func (i *BucketReplicationConfigurationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigurationRuleArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigurationRuleOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRule)(nil)).Elem()
}

func (o BucketReplicationConfigurationRuleOutput) ToBucketReplicationConfigurationRuleOutput() BucketReplicationConfigurationRuleOutput {
	return o
}

func (o BucketReplicationConfigurationRuleOutput) ToBucketReplicationConfigurationRuleOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleOutput {
	return o
}

func (o BucketReplicationConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigurationRule] {
	return pulumix.Output[BucketReplicationConfigurationRule]{
		OutputState: o.OutputState,
	}
}

// Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
func (o BucketReplicationConfigurationRuleOutput) DeleteMarkerReplicationStatus() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigurationRule](o, func(v BucketReplicationConfigurationRule) *string { return v.DeleteMarkerReplicationStatus })
}

// Specifies the destination for the rule (documented below).
func (o BucketReplicationConfigurationRuleOutput) Destination() pulumix.GPtrOutput[BucketReplicationConfigurationRuleDestination, BucketReplicationConfigurationRuleDestinationOutput] {
	value := pulumix.Apply[BucketReplicationConfigurationRule](o, func(v BucketReplicationConfigurationRule) BucketReplicationConfigurationRuleDestination {
		return v.Destination
	})
	return pulumix.GPtrOutput[BucketReplicationConfigurationRuleDestination, BucketReplicationConfigurationRuleDestinationOutput]{OutputState: value.OutputState}
}

// Filter that identifies subset of objects to which the replication rule applies (documented below).
func (o BucketReplicationConfigurationRuleOutput) Filter() pulumix.GPtrOutput[BucketReplicationConfigurationRuleFilter, BucketReplicationConfigurationRuleFilterOutput] {
	value := pulumix.Apply[BucketReplicationConfigurationRule](o, func(v BucketReplicationConfigurationRule) *BucketReplicationConfigurationRuleFilter { return v.Filter })
	return pulumix.GPtrOutput[BucketReplicationConfigurationRuleFilter, BucketReplicationConfigurationRuleFilterOutput]{OutputState: value.OutputState}
}

// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
func (o BucketReplicationConfigurationRuleOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigurationRule](o, func(v BucketReplicationConfigurationRule) *string { return v.Id })
}

// Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
func (o BucketReplicationConfigurationRuleOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigurationRule](o, func(v BucketReplicationConfigurationRule) *string { return v.Prefix })
}

// The priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
func (o BucketReplicationConfigurationRuleOutput) Priority() pulumix.Output[*int] {
	return pulumix.Apply[BucketReplicationConfigurationRule](o, func(v BucketReplicationConfigurationRule) *int { return v.Priority })
}

// Specifies special object selection criteria (documented below).
func (o BucketReplicationConfigurationRuleOutput) SourceSelectionCriteria() pulumix.GPtrOutput[BucketReplicationConfigurationRuleSourceSelectionCriteria, BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput] {
	value := pulumix.Apply[BucketReplicationConfigurationRule](o, func(v BucketReplicationConfigurationRule) *BucketReplicationConfigurationRuleSourceSelectionCriteria {
		return v.SourceSelectionCriteria
	})
	return pulumix.GPtrOutput[BucketReplicationConfigurationRuleSourceSelectionCriteria, BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput]{OutputState: value.OutputState}
}

// The status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
//
// > **NOTE:** Replication to multiple destination buckets requires that `priority` is specified in the `rules` object. If the corresponding rule requires no filter, an empty configuration block `filter {}` must be specified.
func (o BucketReplicationConfigurationRuleOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigurationRule](o, func(v BucketReplicationConfigurationRule) string { return v.Status })
}

type BucketReplicationConfigurationRuleDestination struct {
	// Specifies the overrides to use for object owners on replication. Must be used in conjunction with `accountId` owner override configuration.
	AccessControlTranslation *BucketReplicationConfigurationRuleDestinationAccessControlTranslation `pulumi:"accessControlTranslation"`
	// The Account ID to use for overriding the object owner on replication. Must be used in conjunction with `accessControlTranslation` override configuration.
	AccountId *string `pulumi:"accountId"`
	// The ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
	Bucket string `pulumi:"bucket"`
	// Enables replication metrics (required for S3 RTC) (documented below).
	Metrics *BucketReplicationConfigurationRuleDestinationMetrics `pulumi:"metrics"`
	// Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
	// `sseKmsEncryptedObjects` source selection criteria.
	ReplicaKmsKeyId *string `pulumi:"replicaKmsKeyId"`
	// Enables S3 Replication Time Control (S3 RTC) (documented below).
	ReplicationTime *BucketReplicationConfigurationRuleDestinationReplicationTime `pulumi:"replicationTime"`
	// The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
	StorageClass *string `pulumi:"storageClass"`
}

type BucketReplicationConfigurationRuleDestinationArgs struct {
	// Specifies the overrides to use for object owners on replication. Must be used in conjunction with `accountId` owner override configuration.
	AccessControlTranslation pulumix.Input[*BucketReplicationConfigurationRuleDestinationAccessControlTranslationArgs] `pulumi:"accessControlTranslation"`
	// The Account ID to use for overriding the object owner on replication. Must be used in conjunction with `accessControlTranslation` override configuration.
	AccountId pulumix.Input[*string] `pulumi:"accountId"`
	// The ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
	Bucket pulumix.Input[string] `pulumi:"bucket"`
	// Enables replication metrics (required for S3 RTC) (documented below).
	Metrics pulumix.Input[*BucketReplicationConfigurationRuleDestinationMetricsArgs] `pulumi:"metrics"`
	// Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
	// `sseKmsEncryptedObjects` source selection criteria.
	ReplicaKmsKeyId pulumix.Input[*string] `pulumi:"replicaKmsKeyId"`
	// Enables S3 Replication Time Control (S3 RTC) (documented below).
	ReplicationTime pulumix.Input[*BucketReplicationConfigurationRuleDestinationReplicationTimeArgs] `pulumi:"replicationTime"`
	// The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
	StorageClass pulumix.Input[*string] `pulumi:"storageClass"`
}

func (BucketReplicationConfigurationRuleDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleDestination)(nil)).Elem()
}

func (i BucketReplicationConfigurationRuleDestinationArgs) ToBucketReplicationConfigurationRuleDestinationOutput() BucketReplicationConfigurationRuleDestinationOutput {
	return i.ToBucketReplicationConfigurationRuleDestinationOutputWithContext(context.Background())
}

func (i BucketReplicationConfigurationRuleDestinationArgs) ToBucketReplicationConfigurationRuleDestinationOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigurationRuleDestinationOutput)
}

func (i *BucketReplicationConfigurationRuleDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigurationRuleDestinationArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigurationRuleDestinationOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigurationRuleDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleDestination)(nil)).Elem()
}

func (o BucketReplicationConfigurationRuleDestinationOutput) ToBucketReplicationConfigurationRuleDestinationOutput() BucketReplicationConfigurationRuleDestinationOutput {
	return o
}

func (o BucketReplicationConfigurationRuleDestinationOutput) ToBucketReplicationConfigurationRuleDestinationOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleDestinationOutput {
	return o
}

func (o BucketReplicationConfigurationRuleDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigurationRuleDestination] {
	return pulumix.Output[BucketReplicationConfigurationRuleDestination]{
		OutputState: o.OutputState,
	}
}

// Specifies the overrides to use for object owners on replication. Must be used in conjunction with `accountId` owner override configuration.
func (o BucketReplicationConfigurationRuleDestinationOutput) AccessControlTranslation() pulumix.GPtrOutput[BucketReplicationConfigurationRuleDestinationAccessControlTranslation, BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput] {
	value := pulumix.Apply[BucketReplicationConfigurationRuleDestination](o, func(v BucketReplicationConfigurationRuleDestination) *BucketReplicationConfigurationRuleDestinationAccessControlTranslation {
		return v.AccessControlTranslation
	})
	return pulumix.GPtrOutput[BucketReplicationConfigurationRuleDestinationAccessControlTranslation, BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput]{OutputState: value.OutputState}
}

// The Account ID to use for overriding the object owner on replication. Must be used in conjunction with `accessControlTranslation` override configuration.
func (o BucketReplicationConfigurationRuleDestinationOutput) AccountId() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigurationRuleDestination](o, func(v BucketReplicationConfigurationRuleDestination) *string { return v.AccountId })
}

// The ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
func (o BucketReplicationConfigurationRuleDestinationOutput) Bucket() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigurationRuleDestination](o, func(v BucketReplicationConfigurationRuleDestination) string { return v.Bucket })
}

// Enables replication metrics (required for S3 RTC) (documented below).
func (o BucketReplicationConfigurationRuleDestinationOutput) Metrics() pulumix.GPtrOutput[BucketReplicationConfigurationRuleDestinationMetrics, BucketReplicationConfigurationRuleDestinationMetricsOutput] {
	value := pulumix.Apply[BucketReplicationConfigurationRuleDestination](o, func(v BucketReplicationConfigurationRuleDestination) *BucketReplicationConfigurationRuleDestinationMetrics {
		return v.Metrics
	})
	return pulumix.GPtrOutput[BucketReplicationConfigurationRuleDestinationMetrics, BucketReplicationConfigurationRuleDestinationMetricsOutput]{OutputState: value.OutputState}
}

// Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
// `sseKmsEncryptedObjects` source selection criteria.
func (o BucketReplicationConfigurationRuleDestinationOutput) ReplicaKmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigurationRuleDestination](o, func(v BucketReplicationConfigurationRuleDestination) *string { return v.ReplicaKmsKeyId })
}

// Enables S3 Replication Time Control (S3 RTC) (documented below).
func (o BucketReplicationConfigurationRuleDestinationOutput) ReplicationTime() pulumix.GPtrOutput[BucketReplicationConfigurationRuleDestinationReplicationTime, BucketReplicationConfigurationRuleDestinationReplicationTimeOutput] {
	value := pulumix.Apply[BucketReplicationConfigurationRuleDestination](o, func(v BucketReplicationConfigurationRuleDestination) *BucketReplicationConfigurationRuleDestinationReplicationTime {
		return v.ReplicationTime
	})
	return pulumix.GPtrOutput[BucketReplicationConfigurationRuleDestinationReplicationTime, BucketReplicationConfigurationRuleDestinationReplicationTimeOutput]{OutputState: value.OutputState}
}

// The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
func (o BucketReplicationConfigurationRuleDestinationOutput) StorageClass() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigurationRuleDestination](o, func(v BucketReplicationConfigurationRuleDestination) *string { return v.StorageClass })
}

type BucketReplicationConfigurationRuleDestinationAccessControlTranslation struct {
	// The override value for the owner on replicated objects. Currently only `Destination` is supported.
	Owner string `pulumi:"owner"`
}

type BucketReplicationConfigurationRuleDestinationAccessControlTranslationArgs struct {
	// The override value for the owner on replicated objects. Currently only `Destination` is supported.
	Owner pulumix.Input[string] `pulumi:"owner"`
}

func (BucketReplicationConfigurationRuleDestinationAccessControlTranslationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleDestinationAccessControlTranslation)(nil)).Elem()
}

func (i BucketReplicationConfigurationRuleDestinationAccessControlTranslationArgs) ToBucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput() BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput {
	return i.ToBucketReplicationConfigurationRuleDestinationAccessControlTranslationOutputWithContext(context.Background())
}

func (i BucketReplicationConfigurationRuleDestinationAccessControlTranslationArgs) ToBucketReplicationConfigurationRuleDestinationAccessControlTranslationOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput)
}

func (i *BucketReplicationConfigurationRuleDestinationAccessControlTranslationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigurationRuleDestinationAccessControlTranslationArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleDestinationAccessControlTranslation)(nil)).Elem()
}

func (o BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput) ToBucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput() BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput {
	return o
}

func (o BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput) ToBucketReplicationConfigurationRuleDestinationAccessControlTranslationOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput {
	return o
}

func (o BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigurationRuleDestinationAccessControlTranslation] {
	return pulumix.Output[BucketReplicationConfigurationRuleDestinationAccessControlTranslation]{
		OutputState: o.OutputState,
	}
}

// The override value for the owner on replicated objects. Currently only `Destination` is supported.
func (o BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[BucketReplicationConfigurationRuleDestinationAccessControlTranslation](o, func(v BucketReplicationConfigurationRuleDestinationAccessControlTranslation) string { return v.Owner })
}

type BucketReplicationConfigurationRuleDestinationMetrics struct {
	// Threshold within which objects are to be replicated. The only valid value is `15`.
	Minutes *int `pulumi:"minutes"`
	// The status of replication metrics. Either `Enabled` or `Disabled`.
	Status *string `pulumi:"status"`
}

type BucketReplicationConfigurationRuleDestinationMetricsArgs struct {
	// Threshold within which objects are to be replicated. The only valid value is `15`.
	Minutes pulumix.Input[*int] `pulumi:"minutes"`
	// The status of replication metrics. Either `Enabled` or `Disabled`.
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (BucketReplicationConfigurationRuleDestinationMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleDestinationMetrics)(nil)).Elem()
}

func (i BucketReplicationConfigurationRuleDestinationMetricsArgs) ToBucketReplicationConfigurationRuleDestinationMetricsOutput() BucketReplicationConfigurationRuleDestinationMetricsOutput {
	return i.ToBucketReplicationConfigurationRuleDestinationMetricsOutputWithContext(context.Background())
}

func (i BucketReplicationConfigurationRuleDestinationMetricsArgs) ToBucketReplicationConfigurationRuleDestinationMetricsOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleDestinationMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigurationRuleDestinationMetricsOutput)
}

func (i *BucketReplicationConfigurationRuleDestinationMetricsArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigurationRuleDestinationMetricsArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigurationRuleDestinationMetricsOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigurationRuleDestinationMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleDestinationMetrics)(nil)).Elem()
}

func (o BucketReplicationConfigurationRuleDestinationMetricsOutput) ToBucketReplicationConfigurationRuleDestinationMetricsOutput() BucketReplicationConfigurationRuleDestinationMetricsOutput {
	return o
}

func (o BucketReplicationConfigurationRuleDestinationMetricsOutput) ToBucketReplicationConfigurationRuleDestinationMetricsOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleDestinationMetricsOutput {
	return o
}

func (o BucketReplicationConfigurationRuleDestinationMetricsOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigurationRuleDestinationMetrics] {
	return pulumix.Output[BucketReplicationConfigurationRuleDestinationMetrics]{
		OutputState: o.OutputState,
	}
}

// Threshold within which objects are to be replicated. The only valid value is `15`.
func (o BucketReplicationConfigurationRuleDestinationMetricsOutput) Minutes() pulumix.Output[*int] {
	return pulumix.Apply[BucketReplicationConfigurationRuleDestinationMetrics](o, func(v BucketReplicationConfigurationRuleDestinationMetrics) *int { return v.Minutes })
}

// The status of replication metrics. Either `Enabled` or `Disabled`.
func (o BucketReplicationConfigurationRuleDestinationMetricsOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigurationRuleDestinationMetrics](o, func(v BucketReplicationConfigurationRuleDestinationMetrics) *string { return v.Status })
}

type BucketReplicationConfigurationRuleDestinationReplicationTime struct {
	// Threshold within which objects are to be replicated. The only valid value is `15`.
	Minutes *int `pulumi:"minutes"`
	// The status of RTC. Either `Enabled` or `Disabled`.
	Status *string `pulumi:"status"`
}

type BucketReplicationConfigurationRuleDestinationReplicationTimeArgs struct {
	// Threshold within which objects are to be replicated. The only valid value is `15`.
	Minutes pulumix.Input[*int] `pulumi:"minutes"`
	// The status of RTC. Either `Enabled` or `Disabled`.
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (BucketReplicationConfigurationRuleDestinationReplicationTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleDestinationReplicationTime)(nil)).Elem()
}

func (i BucketReplicationConfigurationRuleDestinationReplicationTimeArgs) ToBucketReplicationConfigurationRuleDestinationReplicationTimeOutput() BucketReplicationConfigurationRuleDestinationReplicationTimeOutput {
	return i.ToBucketReplicationConfigurationRuleDestinationReplicationTimeOutputWithContext(context.Background())
}

func (i BucketReplicationConfigurationRuleDestinationReplicationTimeArgs) ToBucketReplicationConfigurationRuleDestinationReplicationTimeOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleDestinationReplicationTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigurationRuleDestinationReplicationTimeOutput)
}

func (i *BucketReplicationConfigurationRuleDestinationReplicationTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigurationRuleDestinationReplicationTimeArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigurationRuleDestinationReplicationTimeOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigurationRuleDestinationReplicationTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleDestinationReplicationTime)(nil)).Elem()
}

func (o BucketReplicationConfigurationRuleDestinationReplicationTimeOutput) ToBucketReplicationConfigurationRuleDestinationReplicationTimeOutput() BucketReplicationConfigurationRuleDestinationReplicationTimeOutput {
	return o
}

func (o BucketReplicationConfigurationRuleDestinationReplicationTimeOutput) ToBucketReplicationConfigurationRuleDestinationReplicationTimeOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleDestinationReplicationTimeOutput {
	return o
}

func (o BucketReplicationConfigurationRuleDestinationReplicationTimeOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigurationRuleDestinationReplicationTime] {
	return pulumix.Output[BucketReplicationConfigurationRuleDestinationReplicationTime]{
		OutputState: o.OutputState,
	}
}

// Threshold within which objects are to be replicated. The only valid value is `15`.
func (o BucketReplicationConfigurationRuleDestinationReplicationTimeOutput) Minutes() pulumix.Output[*int] {
	return pulumix.Apply[BucketReplicationConfigurationRuleDestinationReplicationTime](o, func(v BucketReplicationConfigurationRuleDestinationReplicationTime) *int { return v.Minutes })
}

// The status of RTC. Either `Enabled` or `Disabled`.
func (o BucketReplicationConfigurationRuleDestinationReplicationTimeOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigurationRuleDestinationReplicationTime](o, func(v BucketReplicationConfigurationRuleDestinationReplicationTime) *string { return v.Status })
}

type BucketReplicationConfigurationRuleFilter struct {
	// Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix *string `pulumi:"prefix"`
	// A map of tags that identifies subset of objects to which the rule applies.
	// The rule applies only to objects having all the tags in its tagset.
	Tags map[string]string `pulumi:"tags"`
}

type BucketReplicationConfigurationRuleFilterArgs struct {
	// Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// A map of tags that identifies subset of objects to which the rule applies.
	// The rule applies only to objects having all the tags in its tagset.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (BucketReplicationConfigurationRuleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleFilter)(nil)).Elem()
}

func (i BucketReplicationConfigurationRuleFilterArgs) ToBucketReplicationConfigurationRuleFilterOutput() BucketReplicationConfigurationRuleFilterOutput {
	return i.ToBucketReplicationConfigurationRuleFilterOutputWithContext(context.Background())
}

func (i BucketReplicationConfigurationRuleFilterArgs) ToBucketReplicationConfigurationRuleFilterOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigurationRuleFilterOutput)
}

func (i *BucketReplicationConfigurationRuleFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigurationRuleFilterArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigurationRuleFilterOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigurationRuleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleFilter)(nil)).Elem()
}

func (o BucketReplicationConfigurationRuleFilterOutput) ToBucketReplicationConfigurationRuleFilterOutput() BucketReplicationConfigurationRuleFilterOutput {
	return o
}

func (o BucketReplicationConfigurationRuleFilterOutput) ToBucketReplicationConfigurationRuleFilterOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleFilterOutput {
	return o
}

func (o BucketReplicationConfigurationRuleFilterOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigurationRuleFilter] {
	return pulumix.Output[BucketReplicationConfigurationRuleFilter]{
		OutputState: o.OutputState,
	}
}

// Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
func (o BucketReplicationConfigurationRuleFilterOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketReplicationConfigurationRuleFilter](o, func(v BucketReplicationConfigurationRuleFilter) *string { return v.Prefix })
}

// A map of tags that identifies subset of objects to which the rule applies.
// The rule applies only to objects having all the tags in its tagset.
func (o BucketReplicationConfigurationRuleFilterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[BucketReplicationConfigurationRuleFilter](o, func(v BucketReplicationConfigurationRuleFilter) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type BucketReplicationConfigurationRuleSourceSelectionCriteria struct {
	// Match SSE-KMS encrypted objects (documented below). If specified, `replicaKmsKeyId`
	// in `destination` must be specified as well.
	SseKmsEncryptedObjects *BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects `pulumi:"sseKmsEncryptedObjects"`
}

type BucketReplicationConfigurationRuleSourceSelectionCriteriaArgs struct {
	// Match SSE-KMS encrypted objects (documented below). If specified, `replicaKmsKeyId`
	// in `destination` must be specified as well.
	SseKmsEncryptedObjects pulumix.Input[*BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs] `pulumi:"sseKmsEncryptedObjects"`
}

func (BucketReplicationConfigurationRuleSourceSelectionCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleSourceSelectionCriteria)(nil)).Elem()
}

func (i BucketReplicationConfigurationRuleSourceSelectionCriteriaArgs) ToBucketReplicationConfigurationRuleSourceSelectionCriteriaOutput() BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput {
	return i.ToBucketReplicationConfigurationRuleSourceSelectionCriteriaOutputWithContext(context.Background())
}

func (i BucketReplicationConfigurationRuleSourceSelectionCriteriaArgs) ToBucketReplicationConfigurationRuleSourceSelectionCriteriaOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput)
}

func (i *BucketReplicationConfigurationRuleSourceSelectionCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigurationRuleSourceSelectionCriteriaArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleSourceSelectionCriteria)(nil)).Elem()
}

func (o BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput) ToBucketReplicationConfigurationRuleSourceSelectionCriteriaOutput() BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput {
	return o
}

func (o BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput) ToBucketReplicationConfigurationRuleSourceSelectionCriteriaOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput {
	return o
}

func (o BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigurationRuleSourceSelectionCriteria] {
	return pulumix.Output[BucketReplicationConfigurationRuleSourceSelectionCriteria]{
		OutputState: o.OutputState,
	}
}

// Match SSE-KMS encrypted objects (documented below). If specified, `replicaKmsKeyId`
// in `destination` must be specified as well.
func (o BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput) SseKmsEncryptedObjects() pulumix.GPtrOutput[BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects, BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput] {
	value := pulumix.Apply[BucketReplicationConfigurationRuleSourceSelectionCriteria](o, func(v BucketReplicationConfigurationRuleSourceSelectionCriteria) *BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects {
		return v.SseKmsEncryptedObjects
	})
	return pulumix.GPtrOutput[BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects, BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput]{OutputState: value.OutputState}
}

type BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects struct {
	// Boolean which indicates if this criteria is enabled.
	Enabled bool `pulumi:"enabled"`
}

type BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs struct {
	// Boolean which indicates if this criteria is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects)(nil)).Elem()
}

func (i BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs) ToBucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput() BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput {
	return i.ToBucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutputWithContext(context.Background())
}

func (i BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs) ToBucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput)
}

func (i *BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsArgs] {
	return pulumix.Val(i)
}

type BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput struct{ *pulumi.OutputState }

func (BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects)(nil)).Elem()
}

func (o BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput) ToBucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput() BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput {
	return o
}

func (o BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput) ToBucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutputWithContext(ctx context.Context) BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput {
	return o
}

func (o BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput) ToOutput(ctx context.Context) pulumix.Output[BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects] {
	return pulumix.Output[BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects]{
		OutputState: o.OutputState,
	}
}

// Boolean which indicates if this criteria is enabled.
func (o BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects](o, func(v BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects) bool {
		return v.Enabled
	})
}

type BucketServerSideEncryptionConfiguration struct {
	// A single object for server-side encryption by default configuration. (documented below)
	Rule BucketServerSideEncryptionConfigurationRule `pulumi:"rule"`
}

type BucketServerSideEncryptionConfigurationArgs struct {
	// A single object for server-side encryption by default configuration. (documented below)
	Rule pulumix.Input[*BucketServerSideEncryptionConfigurationRuleArgs] `pulumi:"rule"`
}

func (BucketServerSideEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketServerSideEncryptionConfiguration)(nil)).Elem()
}

func (i BucketServerSideEncryptionConfigurationArgs) ToBucketServerSideEncryptionConfigurationOutput() BucketServerSideEncryptionConfigurationOutput {
	return i.ToBucketServerSideEncryptionConfigurationOutputWithContext(context.Background())
}

func (i BucketServerSideEncryptionConfigurationArgs) ToBucketServerSideEncryptionConfigurationOutputWithContext(ctx context.Context) BucketServerSideEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketServerSideEncryptionConfigurationOutput)
}

func (i *BucketServerSideEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketServerSideEncryptionConfigurationArgs] {
	return pulumix.Val(i)
}

type BucketServerSideEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (BucketServerSideEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketServerSideEncryptionConfiguration)(nil)).Elem()
}

func (o BucketServerSideEncryptionConfigurationOutput) ToBucketServerSideEncryptionConfigurationOutput() BucketServerSideEncryptionConfigurationOutput {
	return o
}

func (o BucketServerSideEncryptionConfigurationOutput) ToBucketServerSideEncryptionConfigurationOutputWithContext(ctx context.Context) BucketServerSideEncryptionConfigurationOutput {
	return o
}

func (o BucketServerSideEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketServerSideEncryptionConfiguration] {
	return pulumix.Output[BucketServerSideEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// A single object for server-side encryption by default configuration. (documented below)
func (o BucketServerSideEncryptionConfigurationOutput) Rule() pulumix.GPtrOutput[BucketServerSideEncryptionConfigurationRule, BucketServerSideEncryptionConfigurationRuleOutput] {
	value := pulumix.Apply[BucketServerSideEncryptionConfiguration](o, func(v BucketServerSideEncryptionConfiguration) BucketServerSideEncryptionConfigurationRule {
		return v.Rule
	})
	return pulumix.GPtrOutput[BucketServerSideEncryptionConfigurationRule, BucketServerSideEncryptionConfigurationRuleOutput]{OutputState: value.OutputState}
}

type BucketServerSideEncryptionConfigurationRule struct {
	// A single object for setting server-side encryption by default. (documented below)
	ApplyServerSideEncryptionByDefault BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault `pulumi:"applyServerSideEncryptionByDefault"`
	// Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
	BucketKeyEnabled *bool `pulumi:"bucketKeyEnabled"`
}

type BucketServerSideEncryptionConfigurationRuleArgs struct {
	// A single object for setting server-side encryption by default. (documented below)
	ApplyServerSideEncryptionByDefault pulumix.Input[*BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs] `pulumi:"applyServerSideEncryptionByDefault"`
	// Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
	BucketKeyEnabled pulumix.Input[*bool] `pulumi:"bucketKeyEnabled"`
}

func (BucketServerSideEncryptionConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketServerSideEncryptionConfigurationRule)(nil)).Elem()
}

func (i BucketServerSideEncryptionConfigurationRuleArgs) ToBucketServerSideEncryptionConfigurationRuleOutput() BucketServerSideEncryptionConfigurationRuleOutput {
	return i.ToBucketServerSideEncryptionConfigurationRuleOutputWithContext(context.Background())
}

func (i BucketServerSideEncryptionConfigurationRuleArgs) ToBucketServerSideEncryptionConfigurationRuleOutputWithContext(ctx context.Context) BucketServerSideEncryptionConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketServerSideEncryptionConfigurationRuleOutput)
}

func (i *BucketServerSideEncryptionConfigurationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketServerSideEncryptionConfigurationRuleArgs] {
	return pulumix.Val(i)
}

type BucketServerSideEncryptionConfigurationRuleOutput struct{ *pulumi.OutputState }

func (BucketServerSideEncryptionConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketServerSideEncryptionConfigurationRule)(nil)).Elem()
}

func (o BucketServerSideEncryptionConfigurationRuleOutput) ToBucketServerSideEncryptionConfigurationRuleOutput() BucketServerSideEncryptionConfigurationRuleOutput {
	return o
}

func (o BucketServerSideEncryptionConfigurationRuleOutput) ToBucketServerSideEncryptionConfigurationRuleOutputWithContext(ctx context.Context) BucketServerSideEncryptionConfigurationRuleOutput {
	return o
}

func (o BucketServerSideEncryptionConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketServerSideEncryptionConfigurationRule] {
	return pulumix.Output[BucketServerSideEncryptionConfigurationRule]{
		OutputState: o.OutputState,
	}
}

// A single object for setting server-side encryption by default. (documented below)
func (o BucketServerSideEncryptionConfigurationRuleOutput) ApplyServerSideEncryptionByDefault() pulumix.GPtrOutput[BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault, BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput] {
	value := pulumix.Apply[BucketServerSideEncryptionConfigurationRule](o, func(v BucketServerSideEncryptionConfigurationRule) BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault {
		return v.ApplyServerSideEncryptionByDefault
	})
	return pulumix.GPtrOutput[BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault, BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput]{OutputState: value.OutputState}
}

// Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
func (o BucketServerSideEncryptionConfigurationRuleOutput) BucketKeyEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[BucketServerSideEncryptionConfigurationRule](o, func(v BucketServerSideEncryptionConfigurationRule) *bool { return v.BucketKeyEnabled })
}

type BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault struct {
	// The AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
	KmsMasterKeyId *string `pulumi:"kmsMasterKeyId"`
	// The server-side encryption algorithm to use. Valid values are `AES256` and `aws:kms`
	SseAlgorithm string `pulumi:"sseAlgorithm"`
}

type BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs struct {
	// The AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
	KmsMasterKeyId pulumix.Input[*string] `pulumi:"kmsMasterKeyId"`
	// The server-side encryption algorithm to use. Valid values are `AES256` and `aws:kms`
	SseAlgorithm pulumix.Input[string] `pulumi:"sseAlgorithm"`
}

func (BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault)(nil)).Elem()
}

func (i BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs) ToBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput() BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput {
	return i.ToBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutputWithContext(context.Background())
}

func (i BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs) ToBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutputWithContext(ctx context.Context) BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput)
}

func (i *BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs] {
	return pulumix.Val(i)
}

type BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput struct{ *pulumi.OutputState }

func (BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault)(nil)).Elem()
}

func (o BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) ToBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput() BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput {
	return o
}

func (o BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) ToBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutputWithContext(ctx context.Context) BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput {
	return o
}

func (o BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) ToOutput(ctx context.Context) pulumix.Output[BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault] {
	return pulumix.Output[BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault]{
		OutputState: o.OutputState,
	}
}

// The AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
func (o BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) KmsMasterKeyId() pulumix.Output[*string] {
	return pulumix.Apply[BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault](o, func(v BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault) *string {
		return v.KmsMasterKeyId
	})
}

// The server-side encryption algorithm to use. Valid values are `AES256` and `aws:kms`
func (o BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) SseAlgorithm() pulumix.Output[string] {
	return pulumix.Apply[BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault](o, func(v BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault) string {
		return v.SseAlgorithm
	})
}

type BucketServerSideEncryptionConfigurationV2Rule struct {
	// Single object for setting server-side encryption by default. See below.
	ApplyServerSideEncryptionByDefault *BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault `pulumi:"applyServerSideEncryptionByDefault"`
	// Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
	BucketKeyEnabled *bool `pulumi:"bucketKeyEnabled"`
}

type BucketServerSideEncryptionConfigurationV2RuleArgs struct {
	// Single object for setting server-side encryption by default. See below.
	ApplyServerSideEncryptionByDefault pulumix.Input[*BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultArgs] `pulumi:"applyServerSideEncryptionByDefault"`
	// Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
	BucketKeyEnabled pulumix.Input[*bool] `pulumi:"bucketKeyEnabled"`
}

func (BucketServerSideEncryptionConfigurationV2RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketServerSideEncryptionConfigurationV2Rule)(nil)).Elem()
}

func (i BucketServerSideEncryptionConfigurationV2RuleArgs) ToBucketServerSideEncryptionConfigurationV2RuleOutput() BucketServerSideEncryptionConfigurationV2RuleOutput {
	return i.ToBucketServerSideEncryptionConfigurationV2RuleOutputWithContext(context.Background())
}

func (i BucketServerSideEncryptionConfigurationV2RuleArgs) ToBucketServerSideEncryptionConfigurationV2RuleOutputWithContext(ctx context.Context) BucketServerSideEncryptionConfigurationV2RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketServerSideEncryptionConfigurationV2RuleOutput)
}

func (i *BucketServerSideEncryptionConfigurationV2RuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketServerSideEncryptionConfigurationV2RuleArgs] {
	return pulumix.Val(i)
}

type BucketServerSideEncryptionConfigurationV2RuleOutput struct{ *pulumi.OutputState }

func (BucketServerSideEncryptionConfigurationV2RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketServerSideEncryptionConfigurationV2Rule)(nil)).Elem()
}

func (o BucketServerSideEncryptionConfigurationV2RuleOutput) ToBucketServerSideEncryptionConfigurationV2RuleOutput() BucketServerSideEncryptionConfigurationV2RuleOutput {
	return o
}

func (o BucketServerSideEncryptionConfigurationV2RuleOutput) ToBucketServerSideEncryptionConfigurationV2RuleOutputWithContext(ctx context.Context) BucketServerSideEncryptionConfigurationV2RuleOutput {
	return o
}

func (o BucketServerSideEncryptionConfigurationV2RuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketServerSideEncryptionConfigurationV2Rule] {
	return pulumix.Output[BucketServerSideEncryptionConfigurationV2Rule]{
		OutputState: o.OutputState,
	}
}

// Single object for setting server-side encryption by default. See below.
func (o BucketServerSideEncryptionConfigurationV2RuleOutput) ApplyServerSideEncryptionByDefault() pulumix.GPtrOutput[BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault, BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput] {
	value := pulumix.Apply[BucketServerSideEncryptionConfigurationV2Rule](o, func(v BucketServerSideEncryptionConfigurationV2Rule) *BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault {
		return v.ApplyServerSideEncryptionByDefault
	})
	return pulumix.GPtrOutput[BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault, BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput]{OutputState: value.OutputState}
}

// Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
func (o BucketServerSideEncryptionConfigurationV2RuleOutput) BucketKeyEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[BucketServerSideEncryptionConfigurationV2Rule](o, func(v BucketServerSideEncryptionConfigurationV2Rule) *bool { return v.BucketKeyEnabled })
}

type BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault struct {
	// AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
	KmsMasterKeyId *string `pulumi:"kmsMasterKeyId"`
	// Server-side encryption algorithm to use. Valid values are `AES256`, `aws:kms`, and `aws:kms:dsse`
	SseAlgorithm string `pulumi:"sseAlgorithm"`
}

type BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultArgs struct {
	// AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
	KmsMasterKeyId pulumix.Input[*string] `pulumi:"kmsMasterKeyId"`
	// Server-side encryption algorithm to use. Valid values are `AES256`, `aws:kms`, and `aws:kms:dsse`
	SseAlgorithm pulumix.Input[string] `pulumi:"sseAlgorithm"`
}

func (BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault)(nil)).Elem()
}

func (i BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultArgs) ToBucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput() BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput {
	return i.ToBucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutputWithContext(context.Background())
}

func (i BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultArgs) ToBucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutputWithContext(ctx context.Context) BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput)
}

func (i *BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultArgs] {
	return pulumix.Val(i)
}

type BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput struct{ *pulumi.OutputState }

func (BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault)(nil)).Elem()
}

func (o BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput) ToBucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput() BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput {
	return o
}

func (o BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput) ToBucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutputWithContext(ctx context.Context) BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput {
	return o
}

func (o BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput) ToOutput(ctx context.Context) pulumix.Output[BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault] {
	return pulumix.Output[BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault]{
		OutputState: o.OutputState,
	}
}

// AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
func (o BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput) KmsMasterKeyId() pulumix.Output[*string] {
	return pulumix.Apply[BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault](o, func(v BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault) *string {
		return v.KmsMasterKeyId
	})
}

// Server-side encryption algorithm to use. Valid values are `AES256`, `aws:kms`, and `aws:kms:dsse`
func (o BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput) SseAlgorithm() pulumix.Output[string] {
	return pulumix.Apply[BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault](o, func(v BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault) string {
		return v.SseAlgorithm
	})
}

type BucketV2CorsRule struct {
	// List of headers allowed.
	AllowedHeaders []string `pulumi:"allowedHeaders"`
	// One or more HTTP methods that you allow the origin to execute. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
	AllowedMethods []string `pulumi:"allowedMethods"`
	// One or more origins you want customers to be able to access the bucket from.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript `XMLHttpRequest` object).
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies time in seconds that browser can cache the response for a preflight request.
	MaxAgeSeconds *int `pulumi:"maxAgeSeconds"`
}

type BucketV2CorsRuleArgs struct {
	// List of headers allowed.
	AllowedHeaders pulumix.Input[[]string] `pulumi:"allowedHeaders"`
	// One or more HTTP methods that you allow the origin to execute. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
	AllowedMethods pulumix.Input[[]string] `pulumi:"allowedMethods"`
	// One or more origins you want customers to be able to access the bucket from.
	AllowedOrigins pulumix.Input[[]string] `pulumi:"allowedOrigins"`
	// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript `XMLHttpRequest` object).
	ExposeHeaders pulumix.Input[[]string] `pulumi:"exposeHeaders"`
	// Specifies time in seconds that browser can cache the response for a preflight request.
	MaxAgeSeconds pulumix.Input[*int] `pulumi:"maxAgeSeconds"`
}

func (BucketV2CorsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2CorsRule)(nil)).Elem()
}

func (i BucketV2CorsRuleArgs) ToBucketV2CorsRuleOutput() BucketV2CorsRuleOutput {
	return i.ToBucketV2CorsRuleOutputWithContext(context.Background())
}

func (i BucketV2CorsRuleArgs) ToBucketV2CorsRuleOutputWithContext(ctx context.Context) BucketV2CorsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2CorsRuleOutput)
}

func (i *BucketV2CorsRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2CorsRuleArgs] {
	return pulumix.Val(i)
}

type BucketV2CorsRuleOutput struct{ *pulumi.OutputState }

func (BucketV2CorsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2CorsRule)(nil)).Elem()
}

func (o BucketV2CorsRuleOutput) ToBucketV2CorsRuleOutput() BucketV2CorsRuleOutput {
	return o
}

func (o BucketV2CorsRuleOutput) ToBucketV2CorsRuleOutputWithContext(ctx context.Context) BucketV2CorsRuleOutput {
	return o
}

func (o BucketV2CorsRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2CorsRule] {
	return pulumix.Output[BucketV2CorsRule]{
		OutputState: o.OutputState,
	}
}

// List of headers allowed.
func (o BucketV2CorsRuleOutput) AllowedHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketV2CorsRule](o, func(v BucketV2CorsRule) []string { return v.AllowedHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// One or more HTTP methods that you allow the origin to execute. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
func (o BucketV2CorsRuleOutput) AllowedMethods() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketV2CorsRule](o, func(v BucketV2CorsRule) []string { return v.AllowedMethods })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// One or more origins you want customers to be able to access the bucket from.
func (o BucketV2CorsRuleOutput) AllowedOrigins() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketV2CorsRule](o, func(v BucketV2CorsRule) []string { return v.AllowedOrigins })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript `XMLHttpRequest` object).
func (o BucketV2CorsRuleOutput) ExposeHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketV2CorsRule](o, func(v BucketV2CorsRule) []string { return v.ExposeHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies time in seconds that browser can cache the response for a preflight request.
func (o BucketV2CorsRuleOutput) MaxAgeSeconds() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2CorsRule](o, func(v BucketV2CorsRule) *int { return v.MaxAgeSeconds })
}

type BucketV2Grant struct {
	// Canonical user id to grant for. Used only when `type` is `CanonicalUser`.
	Id *string `pulumi:"id"`
	// List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
	Permissions []string `pulumi:"permissions"`
	// Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`. `AmazonCustomerByEmail` is not supported.
	Type string `pulumi:"type"`
	// Uri address to grant for. Used only when `type` is `Group`.
	Uri *string `pulumi:"uri"`
}

type BucketV2GrantArgs struct {
	// Canonical user id to grant for. Used only when `type` is `CanonicalUser`.
	Id pulumix.Input[*string] `pulumi:"id"`
	// List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
	Permissions pulumix.Input[[]string] `pulumi:"permissions"`
	// Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`. `AmazonCustomerByEmail` is not supported.
	Type pulumix.Input[string] `pulumi:"type"`
	// Uri address to grant for. Used only when `type` is `Group`.
	Uri pulumix.Input[*string] `pulumi:"uri"`
}

func (BucketV2GrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2Grant)(nil)).Elem()
}

func (i BucketV2GrantArgs) ToBucketV2GrantOutput() BucketV2GrantOutput {
	return i.ToBucketV2GrantOutputWithContext(context.Background())
}

func (i BucketV2GrantArgs) ToBucketV2GrantOutputWithContext(ctx context.Context) BucketV2GrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2GrantOutput)
}

func (i *BucketV2GrantArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2GrantArgs] {
	return pulumix.Val(i)
}

type BucketV2GrantOutput struct{ *pulumi.OutputState }

func (BucketV2GrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2Grant)(nil)).Elem()
}

func (o BucketV2GrantOutput) ToBucketV2GrantOutput() BucketV2GrantOutput {
	return o
}

func (o BucketV2GrantOutput) ToBucketV2GrantOutputWithContext(ctx context.Context) BucketV2GrantOutput {
	return o
}

func (o BucketV2GrantOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2Grant] {
	return pulumix.Output[BucketV2Grant]{
		OutputState: o.OutputState,
	}
}

// Canonical user id to grant for. Used only when `type` is `CanonicalUser`.
func (o BucketV2GrantOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2Grant](o, func(v BucketV2Grant) *string { return v.Id })
}

// List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
func (o BucketV2GrantOutput) Permissions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BucketV2Grant](o, func(v BucketV2Grant) []string { return v.Permissions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`. `AmazonCustomerByEmail` is not supported.
func (o BucketV2GrantOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[BucketV2Grant](o, func(v BucketV2Grant) string { return v.Type })
}

// Uri address to grant for. Used only when `type` is `Group`.
func (o BucketV2GrantOutput) Uri() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2Grant](o, func(v BucketV2Grant) *string { return v.Uri })
}

type BucketV2LifecycleRule struct {
	// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
	AbortIncompleteMultipartUploadDays *int `pulumi:"abortIncompleteMultipartUploadDays"`
	// Specifies lifecycle rule status.
	Enabled bool `pulumi:"enabled"`
	// Specifies a period in the object's expire. See Expiration below for details.
	Expirations []BucketV2LifecycleRuleExpiration `pulumi:"expirations"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id *string `pulumi:"id"`
	// Specifies when noncurrent object versions expire. See Noncurrent Version Expiration below for details.
	NoncurrentVersionExpirations []BucketV2LifecycleRuleNoncurrentVersionExpiration `pulumi:"noncurrentVersionExpirations"`
	// Specifies when noncurrent object versions transitions. See Noncurrent Version Transition below for details.
	NoncurrentVersionTransitions []BucketV2LifecycleRuleNoncurrentVersionTransition `pulumi:"noncurrentVersionTransitions"`
	// Object key prefix identifying one or more objects to which the rule applies.
	Prefix *string `pulumi:"prefix"`
	// Specifies object tags key and value.
	Tags map[string]string `pulumi:"tags"`
	// Specifies a period in the object's transitions. See Transition below for details.
	Transitions []BucketV2LifecycleRuleTransition `pulumi:"transitions"`
}

type BucketV2LifecycleRuleArgs struct {
	// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
	AbortIncompleteMultipartUploadDays pulumix.Input[*int] `pulumi:"abortIncompleteMultipartUploadDays"`
	// Specifies lifecycle rule status.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// Specifies a period in the object's expire. See Expiration below for details.
	Expirations pulumix.Input[[]*BucketV2LifecycleRuleExpirationArgs] `pulumi:"expirations"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Specifies when noncurrent object versions expire. See Noncurrent Version Expiration below for details.
	NoncurrentVersionExpirations pulumix.Input[[]*BucketV2LifecycleRuleNoncurrentVersionExpirationArgs] `pulumi:"noncurrentVersionExpirations"`
	// Specifies when noncurrent object versions transitions. See Noncurrent Version Transition below for details.
	NoncurrentVersionTransitions pulumix.Input[[]*BucketV2LifecycleRuleNoncurrentVersionTransitionArgs] `pulumi:"noncurrentVersionTransitions"`
	// Object key prefix identifying one or more objects to which the rule applies.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Specifies object tags key and value.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Specifies a period in the object's transitions. See Transition below for details.
	Transitions pulumix.Input[[]*BucketV2LifecycleRuleTransitionArgs] `pulumi:"transitions"`
}

func (BucketV2LifecycleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2LifecycleRule)(nil)).Elem()
}

func (i BucketV2LifecycleRuleArgs) ToBucketV2LifecycleRuleOutput() BucketV2LifecycleRuleOutput {
	return i.ToBucketV2LifecycleRuleOutputWithContext(context.Background())
}

func (i BucketV2LifecycleRuleArgs) ToBucketV2LifecycleRuleOutputWithContext(ctx context.Context) BucketV2LifecycleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2LifecycleRuleOutput)
}

func (i *BucketV2LifecycleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2LifecycleRuleArgs] {
	return pulumix.Val(i)
}

type BucketV2LifecycleRuleOutput struct{ *pulumi.OutputState }

func (BucketV2LifecycleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2LifecycleRule)(nil)).Elem()
}

func (o BucketV2LifecycleRuleOutput) ToBucketV2LifecycleRuleOutput() BucketV2LifecycleRuleOutput {
	return o
}

func (o BucketV2LifecycleRuleOutput) ToBucketV2LifecycleRuleOutputWithContext(ctx context.Context) BucketV2LifecycleRuleOutput {
	return o
}

func (o BucketV2LifecycleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2LifecycleRule] {
	return pulumix.Output[BucketV2LifecycleRule]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
func (o BucketV2LifecycleRuleOutput) AbortIncompleteMultipartUploadDays() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2LifecycleRule](o, func(v BucketV2LifecycleRule) *int { return v.AbortIncompleteMultipartUploadDays })
}

// Specifies lifecycle rule status.
func (o BucketV2LifecycleRuleOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[BucketV2LifecycleRule](o, func(v BucketV2LifecycleRule) bool { return v.Enabled })
}

// Specifies a period in the object's expire. See Expiration below for details.
func (o BucketV2LifecycleRuleOutput) Expirations() pulumix.GArrayOutput[BucketV2LifecycleRuleExpiration, BucketV2LifecycleRuleExpirationOutput] {
	value := pulumix.Apply[BucketV2LifecycleRule](o, func(v BucketV2LifecycleRule) []BucketV2LifecycleRuleExpiration { return v.Expirations })
	return pulumix.GArrayOutput[BucketV2LifecycleRuleExpiration, BucketV2LifecycleRuleExpirationOutput]{OutputState: value.OutputState}
}

// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
func (o BucketV2LifecycleRuleOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2LifecycleRule](o, func(v BucketV2LifecycleRule) *string { return v.Id })
}

// Specifies when noncurrent object versions expire. See Noncurrent Version Expiration below for details.
func (o BucketV2LifecycleRuleOutput) NoncurrentVersionExpirations() pulumix.GArrayOutput[BucketV2LifecycleRuleNoncurrentVersionExpiration, BucketV2LifecycleRuleNoncurrentVersionExpirationOutput] {
	value := pulumix.Apply[BucketV2LifecycleRule](o, func(v BucketV2LifecycleRule) []BucketV2LifecycleRuleNoncurrentVersionExpiration {
		return v.NoncurrentVersionExpirations
	})
	return pulumix.GArrayOutput[BucketV2LifecycleRuleNoncurrentVersionExpiration, BucketV2LifecycleRuleNoncurrentVersionExpirationOutput]{OutputState: value.OutputState}
}

// Specifies when noncurrent object versions transitions. See Noncurrent Version Transition below for details.
func (o BucketV2LifecycleRuleOutput) NoncurrentVersionTransitions() pulumix.GArrayOutput[BucketV2LifecycleRuleNoncurrentVersionTransition, BucketV2LifecycleRuleNoncurrentVersionTransitionOutput] {
	value := pulumix.Apply[BucketV2LifecycleRule](o, func(v BucketV2LifecycleRule) []BucketV2LifecycleRuleNoncurrentVersionTransition {
		return v.NoncurrentVersionTransitions
	})
	return pulumix.GArrayOutput[BucketV2LifecycleRuleNoncurrentVersionTransition, BucketV2LifecycleRuleNoncurrentVersionTransitionOutput]{OutputState: value.OutputState}
}

// Object key prefix identifying one or more objects to which the rule applies.
func (o BucketV2LifecycleRuleOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2LifecycleRule](o, func(v BucketV2LifecycleRule) *string { return v.Prefix })
}

// Specifies object tags key and value.
func (o BucketV2LifecycleRuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[BucketV2LifecycleRule](o, func(v BucketV2LifecycleRule) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Specifies a period in the object's transitions. See Transition below for details.
func (o BucketV2LifecycleRuleOutput) Transitions() pulumix.GArrayOutput[BucketV2LifecycleRuleTransition, BucketV2LifecycleRuleTransitionOutput] {
	value := pulumix.Apply[BucketV2LifecycleRule](o, func(v BucketV2LifecycleRule) []BucketV2LifecycleRuleTransition { return v.Transitions })
	return pulumix.GArrayOutput[BucketV2LifecycleRuleTransition, BucketV2LifecycleRuleTransitionOutput]{OutputState: value.OutputState}
}

type BucketV2LifecycleRuleExpiration struct {
	// Specifies the date after which you want the corresponding action to take effect.
	Date *string `pulumi:"date"`
	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *int `pulumi:"days"`
	// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
	ExpiredObjectDeleteMarker *bool `pulumi:"expiredObjectDeleteMarker"`
}

type BucketV2LifecycleRuleExpirationArgs struct {
	// Specifies the date after which you want the corresponding action to take effect.
	Date pulumix.Input[*string] `pulumi:"date"`
	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days pulumix.Input[*int] `pulumi:"days"`
	// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
	ExpiredObjectDeleteMarker pulumix.Input[*bool] `pulumi:"expiredObjectDeleteMarker"`
}

func (BucketV2LifecycleRuleExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2LifecycleRuleExpiration)(nil)).Elem()
}

func (i BucketV2LifecycleRuleExpirationArgs) ToBucketV2LifecycleRuleExpirationOutput() BucketV2LifecycleRuleExpirationOutput {
	return i.ToBucketV2LifecycleRuleExpirationOutputWithContext(context.Background())
}

func (i BucketV2LifecycleRuleExpirationArgs) ToBucketV2LifecycleRuleExpirationOutputWithContext(ctx context.Context) BucketV2LifecycleRuleExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2LifecycleRuleExpirationOutput)
}

func (i *BucketV2LifecycleRuleExpirationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2LifecycleRuleExpirationArgs] {
	return pulumix.Val(i)
}

type BucketV2LifecycleRuleExpirationOutput struct{ *pulumi.OutputState }

func (BucketV2LifecycleRuleExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2LifecycleRuleExpiration)(nil)).Elem()
}

func (o BucketV2LifecycleRuleExpirationOutput) ToBucketV2LifecycleRuleExpirationOutput() BucketV2LifecycleRuleExpirationOutput {
	return o
}

func (o BucketV2LifecycleRuleExpirationOutput) ToBucketV2LifecycleRuleExpirationOutputWithContext(ctx context.Context) BucketV2LifecycleRuleExpirationOutput {
	return o
}

func (o BucketV2LifecycleRuleExpirationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2LifecycleRuleExpiration] {
	return pulumix.Output[BucketV2LifecycleRuleExpiration]{
		OutputState: o.OutputState,
	}
}

// Specifies the date after which you want the corresponding action to take effect.
func (o BucketV2LifecycleRuleExpirationOutput) Date() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2LifecycleRuleExpiration](o, func(v BucketV2LifecycleRuleExpiration) *string { return v.Date })
}

// Specifies the number of days after object creation when the specific rule action takes effect.
func (o BucketV2LifecycleRuleExpirationOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2LifecycleRuleExpiration](o, func(v BucketV2LifecycleRuleExpiration) *int { return v.Days })
}

// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
func (o BucketV2LifecycleRuleExpirationOutput) ExpiredObjectDeleteMarker() pulumix.Output[*bool] {
	return pulumix.Apply[BucketV2LifecycleRuleExpiration](o, func(v BucketV2LifecycleRuleExpiration) *bool { return v.ExpiredObjectDeleteMarker })
}

type BucketV2LifecycleRuleNoncurrentVersionExpiration struct {
	// Specifies the number of days noncurrent object versions expire.
	Days *int `pulumi:"days"`
}

type BucketV2LifecycleRuleNoncurrentVersionExpirationArgs struct {
	// Specifies the number of days noncurrent object versions expire.
	Days pulumix.Input[*int] `pulumi:"days"`
}

func (BucketV2LifecycleRuleNoncurrentVersionExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2LifecycleRuleNoncurrentVersionExpiration)(nil)).Elem()
}

func (i BucketV2LifecycleRuleNoncurrentVersionExpirationArgs) ToBucketV2LifecycleRuleNoncurrentVersionExpirationOutput() BucketV2LifecycleRuleNoncurrentVersionExpirationOutput {
	return i.ToBucketV2LifecycleRuleNoncurrentVersionExpirationOutputWithContext(context.Background())
}

func (i BucketV2LifecycleRuleNoncurrentVersionExpirationArgs) ToBucketV2LifecycleRuleNoncurrentVersionExpirationOutputWithContext(ctx context.Context) BucketV2LifecycleRuleNoncurrentVersionExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2LifecycleRuleNoncurrentVersionExpirationOutput)
}

func (i *BucketV2LifecycleRuleNoncurrentVersionExpirationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2LifecycleRuleNoncurrentVersionExpirationArgs] {
	return pulumix.Val(i)
}

type BucketV2LifecycleRuleNoncurrentVersionExpirationOutput struct{ *pulumi.OutputState }

func (BucketV2LifecycleRuleNoncurrentVersionExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2LifecycleRuleNoncurrentVersionExpiration)(nil)).Elem()
}

func (o BucketV2LifecycleRuleNoncurrentVersionExpirationOutput) ToBucketV2LifecycleRuleNoncurrentVersionExpirationOutput() BucketV2LifecycleRuleNoncurrentVersionExpirationOutput {
	return o
}

func (o BucketV2LifecycleRuleNoncurrentVersionExpirationOutput) ToBucketV2LifecycleRuleNoncurrentVersionExpirationOutputWithContext(ctx context.Context) BucketV2LifecycleRuleNoncurrentVersionExpirationOutput {
	return o
}

func (o BucketV2LifecycleRuleNoncurrentVersionExpirationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2LifecycleRuleNoncurrentVersionExpiration] {
	return pulumix.Output[BucketV2LifecycleRuleNoncurrentVersionExpiration]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days noncurrent object versions expire.
func (o BucketV2LifecycleRuleNoncurrentVersionExpirationOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2LifecycleRuleNoncurrentVersionExpiration](o, func(v BucketV2LifecycleRuleNoncurrentVersionExpiration) *int { return v.Days })
}

type BucketV2LifecycleRuleNoncurrentVersionTransition struct {
	// Specifies the number of days noncurrent object versions transition.
	Days *int `pulumi:"days"`
	// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
	StorageClass string `pulumi:"storageClass"`
}

type BucketV2LifecycleRuleNoncurrentVersionTransitionArgs struct {
	// Specifies the number of days noncurrent object versions transition.
	Days pulumix.Input[*int] `pulumi:"days"`
	// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
	StorageClass pulumix.Input[string] `pulumi:"storageClass"`
}

func (BucketV2LifecycleRuleNoncurrentVersionTransitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2LifecycleRuleNoncurrentVersionTransition)(nil)).Elem()
}

func (i BucketV2LifecycleRuleNoncurrentVersionTransitionArgs) ToBucketV2LifecycleRuleNoncurrentVersionTransitionOutput() BucketV2LifecycleRuleNoncurrentVersionTransitionOutput {
	return i.ToBucketV2LifecycleRuleNoncurrentVersionTransitionOutputWithContext(context.Background())
}

func (i BucketV2LifecycleRuleNoncurrentVersionTransitionArgs) ToBucketV2LifecycleRuleNoncurrentVersionTransitionOutputWithContext(ctx context.Context) BucketV2LifecycleRuleNoncurrentVersionTransitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2LifecycleRuleNoncurrentVersionTransitionOutput)
}

func (i *BucketV2LifecycleRuleNoncurrentVersionTransitionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2LifecycleRuleNoncurrentVersionTransitionArgs] {
	return pulumix.Val(i)
}

type BucketV2LifecycleRuleNoncurrentVersionTransitionOutput struct{ *pulumi.OutputState }

func (BucketV2LifecycleRuleNoncurrentVersionTransitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2LifecycleRuleNoncurrentVersionTransition)(nil)).Elem()
}

func (o BucketV2LifecycleRuleNoncurrentVersionTransitionOutput) ToBucketV2LifecycleRuleNoncurrentVersionTransitionOutput() BucketV2LifecycleRuleNoncurrentVersionTransitionOutput {
	return o
}

func (o BucketV2LifecycleRuleNoncurrentVersionTransitionOutput) ToBucketV2LifecycleRuleNoncurrentVersionTransitionOutputWithContext(ctx context.Context) BucketV2LifecycleRuleNoncurrentVersionTransitionOutput {
	return o
}

func (o BucketV2LifecycleRuleNoncurrentVersionTransitionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2LifecycleRuleNoncurrentVersionTransition] {
	return pulumix.Output[BucketV2LifecycleRuleNoncurrentVersionTransition]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days noncurrent object versions transition.
func (o BucketV2LifecycleRuleNoncurrentVersionTransitionOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2LifecycleRuleNoncurrentVersionTransition](o, func(v BucketV2LifecycleRuleNoncurrentVersionTransition) *int { return v.Days })
}

// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
func (o BucketV2LifecycleRuleNoncurrentVersionTransitionOutput) StorageClass() pulumix.Output[string] {
	return pulumix.Apply[BucketV2LifecycleRuleNoncurrentVersionTransition](o, func(v BucketV2LifecycleRuleNoncurrentVersionTransition) string { return v.StorageClass })
}

type BucketV2LifecycleRuleTransition struct {
	// Specifies the date after which you want the corresponding action to take effect.
	Date *string `pulumi:"date"`
	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days *int `pulumi:"days"`
	// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
	StorageClass string `pulumi:"storageClass"`
}

type BucketV2LifecycleRuleTransitionArgs struct {
	// Specifies the date after which you want the corresponding action to take effect.
	Date pulumix.Input[*string] `pulumi:"date"`
	// Specifies the number of days after object creation when the specific rule action takes effect.
	Days pulumix.Input[*int] `pulumi:"days"`
	// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
	StorageClass pulumix.Input[string] `pulumi:"storageClass"`
}

func (BucketV2LifecycleRuleTransitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2LifecycleRuleTransition)(nil)).Elem()
}

func (i BucketV2LifecycleRuleTransitionArgs) ToBucketV2LifecycleRuleTransitionOutput() BucketV2LifecycleRuleTransitionOutput {
	return i.ToBucketV2LifecycleRuleTransitionOutputWithContext(context.Background())
}

func (i BucketV2LifecycleRuleTransitionArgs) ToBucketV2LifecycleRuleTransitionOutputWithContext(ctx context.Context) BucketV2LifecycleRuleTransitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2LifecycleRuleTransitionOutput)
}

func (i *BucketV2LifecycleRuleTransitionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2LifecycleRuleTransitionArgs] {
	return pulumix.Val(i)
}

type BucketV2LifecycleRuleTransitionOutput struct{ *pulumi.OutputState }

func (BucketV2LifecycleRuleTransitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2LifecycleRuleTransition)(nil)).Elem()
}

func (o BucketV2LifecycleRuleTransitionOutput) ToBucketV2LifecycleRuleTransitionOutput() BucketV2LifecycleRuleTransitionOutput {
	return o
}

func (o BucketV2LifecycleRuleTransitionOutput) ToBucketV2LifecycleRuleTransitionOutputWithContext(ctx context.Context) BucketV2LifecycleRuleTransitionOutput {
	return o
}

func (o BucketV2LifecycleRuleTransitionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2LifecycleRuleTransition] {
	return pulumix.Output[BucketV2LifecycleRuleTransition]{
		OutputState: o.OutputState,
	}
}

// Specifies the date after which you want the corresponding action to take effect.
func (o BucketV2LifecycleRuleTransitionOutput) Date() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2LifecycleRuleTransition](o, func(v BucketV2LifecycleRuleTransition) *string { return v.Date })
}

// Specifies the number of days after object creation when the specific rule action takes effect.
func (o BucketV2LifecycleRuleTransitionOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2LifecycleRuleTransition](o, func(v BucketV2LifecycleRuleTransition) *int { return v.Days })
}

// Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
func (o BucketV2LifecycleRuleTransitionOutput) StorageClass() pulumix.Output[string] {
	return pulumix.Apply[BucketV2LifecycleRuleTransition](o, func(v BucketV2LifecycleRuleTransition) string { return v.StorageClass })
}

type BucketV2Logging struct {
	// Name of the bucket that will receive the log objects.
	TargetBucket string `pulumi:"targetBucket"`
	// To specify a key prefix for log objects.
	TargetPrefix *string `pulumi:"targetPrefix"`
}

type BucketV2LoggingArgs struct {
	// Name of the bucket that will receive the log objects.
	TargetBucket pulumix.Input[string] `pulumi:"targetBucket"`
	// To specify a key prefix for log objects.
	TargetPrefix pulumix.Input[*string] `pulumi:"targetPrefix"`
}

func (BucketV2LoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2Logging)(nil)).Elem()
}

func (i BucketV2LoggingArgs) ToBucketV2LoggingOutput() BucketV2LoggingOutput {
	return i.ToBucketV2LoggingOutputWithContext(context.Background())
}

func (i BucketV2LoggingArgs) ToBucketV2LoggingOutputWithContext(ctx context.Context) BucketV2LoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2LoggingOutput)
}

func (i *BucketV2LoggingArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2LoggingArgs] {
	return pulumix.Val(i)
}

type BucketV2LoggingOutput struct{ *pulumi.OutputState }

func (BucketV2LoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2Logging)(nil)).Elem()
}

func (o BucketV2LoggingOutput) ToBucketV2LoggingOutput() BucketV2LoggingOutput {
	return o
}

func (o BucketV2LoggingOutput) ToBucketV2LoggingOutputWithContext(ctx context.Context) BucketV2LoggingOutput {
	return o
}

func (o BucketV2LoggingOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2Logging] {
	return pulumix.Output[BucketV2Logging]{
		OutputState: o.OutputState,
	}
}

// Name of the bucket that will receive the log objects.
func (o BucketV2LoggingOutput) TargetBucket() pulumix.Output[string] {
	return pulumix.Apply[BucketV2Logging](o, func(v BucketV2Logging) string { return v.TargetBucket })
}

// To specify a key prefix for log objects.
func (o BucketV2LoggingOutput) TargetPrefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2Logging](o, func(v BucketV2Logging) *string { return v.TargetPrefix })
}

type BucketV2ObjectLockConfiguration struct {
	// Indicates whether this bucket has an Object Lock configuration enabled. Valid values are `true` or `false`. This argument is not supported in all regions or partitions.
	//
	// Deprecated: Use the top-level parameter object_lock_enabled instead
	ObjectLockEnabled *string `pulumi:"objectLockEnabled"`
	// Object Lock rule in place for this bucket (documented below).
	//
	// Deprecated: Use the aws_s3_bucket_object_lock_configuration resource instead
	Rules []BucketV2ObjectLockConfigurationRule `pulumi:"rules"`
}

type BucketV2ObjectLockConfigurationArgs struct {
	// Indicates whether this bucket has an Object Lock configuration enabled. Valid values are `true` or `false`. This argument is not supported in all regions or partitions.
	//
	// Deprecated: Use the top-level parameter object_lock_enabled instead
	ObjectLockEnabled pulumix.Input[*string] `pulumi:"objectLockEnabled"`
	// Object Lock rule in place for this bucket (documented below).
	//
	// Deprecated: Use the aws_s3_bucket_object_lock_configuration resource instead
	Rules pulumix.Input[[]*BucketV2ObjectLockConfigurationRuleArgs] `pulumi:"rules"`
}

func (BucketV2ObjectLockConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ObjectLockConfiguration)(nil)).Elem()
}

func (i BucketV2ObjectLockConfigurationArgs) ToBucketV2ObjectLockConfigurationOutput() BucketV2ObjectLockConfigurationOutput {
	return i.ToBucketV2ObjectLockConfigurationOutputWithContext(context.Background())
}

func (i BucketV2ObjectLockConfigurationArgs) ToBucketV2ObjectLockConfigurationOutputWithContext(ctx context.Context) BucketV2ObjectLockConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ObjectLockConfigurationOutput)
}

func (i *BucketV2ObjectLockConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ObjectLockConfigurationArgs] {
	return pulumix.Val(i)
}

type BucketV2ObjectLockConfigurationOutput struct{ *pulumi.OutputState }

func (BucketV2ObjectLockConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ObjectLockConfiguration)(nil)).Elem()
}

func (o BucketV2ObjectLockConfigurationOutput) ToBucketV2ObjectLockConfigurationOutput() BucketV2ObjectLockConfigurationOutput {
	return o
}

func (o BucketV2ObjectLockConfigurationOutput) ToBucketV2ObjectLockConfigurationOutputWithContext(ctx context.Context) BucketV2ObjectLockConfigurationOutput {
	return o
}

func (o BucketV2ObjectLockConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ObjectLockConfiguration] {
	return pulumix.Output[BucketV2ObjectLockConfiguration]{
		OutputState: o.OutputState,
	}
}

// Indicates whether this bucket has an Object Lock configuration enabled. Valid values are `true` or `false`. This argument is not supported in all regions or partitions.
//
// Deprecated: Use the top-level parameter object_lock_enabled instead
func (o BucketV2ObjectLockConfigurationOutput) ObjectLockEnabled() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ObjectLockConfiguration](o, func(v BucketV2ObjectLockConfiguration) *string { return v.ObjectLockEnabled })
}

// Object Lock rule in place for this bucket (documented below).
//
// Deprecated: Use the aws_s3_bucket_object_lock_configuration resource instead
func (o BucketV2ObjectLockConfigurationOutput) Rules() pulumix.GArrayOutput[BucketV2ObjectLockConfigurationRule, BucketV2ObjectLockConfigurationRuleOutput] {
	value := pulumix.Apply[BucketV2ObjectLockConfiguration](o, func(v BucketV2ObjectLockConfiguration) []BucketV2ObjectLockConfigurationRule { return v.Rules })
	return pulumix.GArrayOutput[BucketV2ObjectLockConfigurationRule, BucketV2ObjectLockConfigurationRuleOutput]{OutputState: value.OutputState}
}

type BucketV2ObjectLockConfigurationRule struct {
	// Default retention period that you want to apply to new objects placed in this bucket (documented below).
	DefaultRetentions []BucketV2ObjectLockConfigurationRuleDefaultRetention `pulumi:"defaultRetentions"`
}

type BucketV2ObjectLockConfigurationRuleArgs struct {
	// Default retention period that you want to apply to new objects placed in this bucket (documented below).
	DefaultRetentions pulumix.Input[[]*BucketV2ObjectLockConfigurationRuleDefaultRetentionArgs] `pulumi:"defaultRetentions"`
}

func (BucketV2ObjectLockConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ObjectLockConfigurationRule)(nil)).Elem()
}

func (i BucketV2ObjectLockConfigurationRuleArgs) ToBucketV2ObjectLockConfigurationRuleOutput() BucketV2ObjectLockConfigurationRuleOutput {
	return i.ToBucketV2ObjectLockConfigurationRuleOutputWithContext(context.Background())
}

func (i BucketV2ObjectLockConfigurationRuleArgs) ToBucketV2ObjectLockConfigurationRuleOutputWithContext(ctx context.Context) BucketV2ObjectLockConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ObjectLockConfigurationRuleOutput)
}

func (i *BucketV2ObjectLockConfigurationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ObjectLockConfigurationRuleArgs] {
	return pulumix.Val(i)
}

type BucketV2ObjectLockConfigurationRuleOutput struct{ *pulumi.OutputState }

func (BucketV2ObjectLockConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ObjectLockConfigurationRule)(nil)).Elem()
}

func (o BucketV2ObjectLockConfigurationRuleOutput) ToBucketV2ObjectLockConfigurationRuleOutput() BucketV2ObjectLockConfigurationRuleOutput {
	return o
}

func (o BucketV2ObjectLockConfigurationRuleOutput) ToBucketV2ObjectLockConfigurationRuleOutputWithContext(ctx context.Context) BucketV2ObjectLockConfigurationRuleOutput {
	return o
}

func (o BucketV2ObjectLockConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ObjectLockConfigurationRule] {
	return pulumix.Output[BucketV2ObjectLockConfigurationRule]{
		OutputState: o.OutputState,
	}
}

// Default retention period that you want to apply to new objects placed in this bucket (documented below).
func (o BucketV2ObjectLockConfigurationRuleOutput) DefaultRetentions() pulumix.GArrayOutput[BucketV2ObjectLockConfigurationRuleDefaultRetention, BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput] {
	value := pulumix.Apply[BucketV2ObjectLockConfigurationRule](o, func(v BucketV2ObjectLockConfigurationRule) []BucketV2ObjectLockConfigurationRuleDefaultRetention {
		return v.DefaultRetentions
	})
	return pulumix.GArrayOutput[BucketV2ObjectLockConfigurationRuleDefaultRetention, BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput]{OutputState: value.OutputState}
}

type BucketV2ObjectLockConfigurationRuleDefaultRetention struct {
	// Number of days that you want to specify for the default retention period.
	Days *int `pulumi:"days"`
	// Default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are `GOVERNANCE` and `COMPLIANCE`.
	Mode string `pulumi:"mode"`
	// Number of years that you want to specify for the default retention period.
	Years *int `pulumi:"years"`
}

type BucketV2ObjectLockConfigurationRuleDefaultRetentionArgs struct {
	// Number of days that you want to specify for the default retention period.
	Days pulumix.Input[*int] `pulumi:"days"`
	// Default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are `GOVERNANCE` and `COMPLIANCE`.
	Mode pulumix.Input[string] `pulumi:"mode"`
	// Number of years that you want to specify for the default retention period.
	Years pulumix.Input[*int] `pulumi:"years"`
}

func (BucketV2ObjectLockConfigurationRuleDefaultRetentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ObjectLockConfigurationRuleDefaultRetention)(nil)).Elem()
}

func (i BucketV2ObjectLockConfigurationRuleDefaultRetentionArgs) ToBucketV2ObjectLockConfigurationRuleDefaultRetentionOutput() BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput {
	return i.ToBucketV2ObjectLockConfigurationRuleDefaultRetentionOutputWithContext(context.Background())
}

func (i BucketV2ObjectLockConfigurationRuleDefaultRetentionArgs) ToBucketV2ObjectLockConfigurationRuleDefaultRetentionOutputWithContext(ctx context.Context) BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput)
}

func (i *BucketV2ObjectLockConfigurationRuleDefaultRetentionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ObjectLockConfigurationRuleDefaultRetentionArgs] {
	return pulumix.Val(i)
}

type BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput struct{ *pulumi.OutputState }

func (BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ObjectLockConfigurationRuleDefaultRetention)(nil)).Elem()
}

func (o BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput) ToBucketV2ObjectLockConfigurationRuleDefaultRetentionOutput() BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput {
	return o
}

func (o BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput) ToBucketV2ObjectLockConfigurationRuleDefaultRetentionOutputWithContext(ctx context.Context) BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput {
	return o
}

func (o BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ObjectLockConfigurationRuleDefaultRetention] {
	return pulumix.Output[BucketV2ObjectLockConfigurationRuleDefaultRetention]{
		OutputState: o.OutputState,
	}
}

// Number of days that you want to specify for the default retention period.
func (o BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput) Days() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2ObjectLockConfigurationRuleDefaultRetention](o, func(v BucketV2ObjectLockConfigurationRuleDefaultRetention) *int { return v.Days })
}

// Default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are `GOVERNANCE` and `COMPLIANCE`.
func (o BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput) Mode() pulumix.Output[string] {
	return pulumix.Apply[BucketV2ObjectLockConfigurationRuleDefaultRetention](o, func(v BucketV2ObjectLockConfigurationRuleDefaultRetention) string { return v.Mode })
}

// Number of years that you want to specify for the default retention period.
func (o BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput) Years() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2ObjectLockConfigurationRuleDefaultRetention](o, func(v BucketV2ObjectLockConfigurationRuleDefaultRetention) *int { return v.Years })
}

type BucketV2ReplicationConfiguration struct {
	// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
	Role string `pulumi:"role"`
	// Specifies the rules managing the replication (documented below).
	Rules []BucketV2ReplicationConfigurationRule `pulumi:"rules"`
}

type BucketV2ReplicationConfigurationArgs struct {
	// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
	Role pulumix.Input[string] `pulumi:"role"`
	// Specifies the rules managing the replication (documented below).
	Rules pulumix.Input[[]*BucketV2ReplicationConfigurationRuleArgs] `pulumi:"rules"`
}

func (BucketV2ReplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfiguration)(nil)).Elem()
}

func (i BucketV2ReplicationConfigurationArgs) ToBucketV2ReplicationConfigurationOutput() BucketV2ReplicationConfigurationOutput {
	return i.ToBucketV2ReplicationConfigurationOutputWithContext(context.Background())
}

func (i BucketV2ReplicationConfigurationArgs) ToBucketV2ReplicationConfigurationOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ReplicationConfigurationOutput)
}

func (i *BucketV2ReplicationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ReplicationConfigurationArgs] {
	return pulumix.Val(i)
}

type BucketV2ReplicationConfigurationOutput struct{ *pulumi.OutputState }

func (BucketV2ReplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfiguration)(nil)).Elem()
}

func (o BucketV2ReplicationConfigurationOutput) ToBucketV2ReplicationConfigurationOutput() BucketV2ReplicationConfigurationOutput {
	return o
}

func (o BucketV2ReplicationConfigurationOutput) ToBucketV2ReplicationConfigurationOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationOutput {
	return o
}

func (o BucketV2ReplicationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ReplicationConfiguration] {
	return pulumix.Output[BucketV2ReplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
func (o BucketV2ReplicationConfigurationOutput) Role() pulumix.Output[string] {
	return pulumix.Apply[BucketV2ReplicationConfiguration](o, func(v BucketV2ReplicationConfiguration) string { return v.Role })
}

// Specifies the rules managing the replication (documented below).
func (o BucketV2ReplicationConfigurationOutput) Rules() pulumix.GArrayOutput[BucketV2ReplicationConfigurationRule, BucketV2ReplicationConfigurationRuleOutput] {
	value := pulumix.Apply[BucketV2ReplicationConfiguration](o, func(v BucketV2ReplicationConfiguration) []BucketV2ReplicationConfigurationRule { return v.Rules })
	return pulumix.GArrayOutput[BucketV2ReplicationConfigurationRule, BucketV2ReplicationConfigurationRuleOutput]{OutputState: value.OutputState}
}

type BucketV2ReplicationConfigurationRule struct {
	// Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
	DeleteMarkerReplicationStatus *string `pulumi:"deleteMarkerReplicationStatus"`
	// Specifies the destination for the rule (documented below).
	Destinations []BucketV2ReplicationConfigurationRuleDestination `pulumi:"destinations"`
	// Filter that identifies subset of objects to which the replication rule applies (documented below).
	Filters []BucketV2ReplicationConfigurationRuleFilter `pulumi:"filters"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id *string `pulumi:"id"`
	// Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix *string `pulumi:"prefix"`
	// Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
	Priority *int `pulumi:"priority"`
	// Specifies special object selection criteria (documented below).
	SourceSelectionCriterias []BucketV2ReplicationConfigurationRuleSourceSelectionCriteria `pulumi:"sourceSelectionCriterias"`
	// Status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
	Status string `pulumi:"status"`
}

type BucketV2ReplicationConfigurationRuleArgs struct {
	// Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
	DeleteMarkerReplicationStatus pulumix.Input[*string] `pulumi:"deleteMarkerReplicationStatus"`
	// Specifies the destination for the rule (documented below).
	Destinations pulumix.Input[[]*BucketV2ReplicationConfigurationRuleDestinationArgs] `pulumi:"destinations"`
	// Filter that identifies subset of objects to which the replication rule applies (documented below).
	Filters pulumix.Input[[]*BucketV2ReplicationConfigurationRuleFilterArgs] `pulumi:"filters"`
	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
	Priority pulumix.Input[*int] `pulumi:"priority"`
	// Specifies special object selection criteria (documented below).
	SourceSelectionCriterias pulumix.Input[[]*BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs] `pulumi:"sourceSelectionCriterias"`
	// Status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (BucketV2ReplicationConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRule)(nil)).Elem()
}

func (i BucketV2ReplicationConfigurationRuleArgs) ToBucketV2ReplicationConfigurationRuleOutput() BucketV2ReplicationConfigurationRuleOutput {
	return i.ToBucketV2ReplicationConfigurationRuleOutputWithContext(context.Background())
}

func (i BucketV2ReplicationConfigurationRuleArgs) ToBucketV2ReplicationConfigurationRuleOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ReplicationConfigurationRuleOutput)
}

func (i *BucketV2ReplicationConfigurationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ReplicationConfigurationRuleArgs] {
	return pulumix.Val(i)
}

type BucketV2ReplicationConfigurationRuleOutput struct{ *pulumi.OutputState }

func (BucketV2ReplicationConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRule)(nil)).Elem()
}

func (o BucketV2ReplicationConfigurationRuleOutput) ToBucketV2ReplicationConfigurationRuleOutput() BucketV2ReplicationConfigurationRuleOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleOutput) ToBucketV2ReplicationConfigurationRuleOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ReplicationConfigurationRule] {
	return pulumix.Output[BucketV2ReplicationConfigurationRule]{
		OutputState: o.OutputState,
	}
}

// Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
func (o BucketV2ReplicationConfigurationRuleOutput) DeleteMarkerReplicationStatus() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRule](o, func(v BucketV2ReplicationConfigurationRule) *string { return v.DeleteMarkerReplicationStatus })
}

// Specifies the destination for the rule (documented below).
func (o BucketV2ReplicationConfigurationRuleOutput) Destinations() pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleDestination, BucketV2ReplicationConfigurationRuleDestinationOutput] {
	value := pulumix.Apply[BucketV2ReplicationConfigurationRule](o, func(v BucketV2ReplicationConfigurationRule) []BucketV2ReplicationConfigurationRuleDestination {
		return v.Destinations
	})
	return pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleDestination, BucketV2ReplicationConfigurationRuleDestinationOutput]{OutputState: value.OutputState}
}

// Filter that identifies subset of objects to which the replication rule applies (documented below).
func (o BucketV2ReplicationConfigurationRuleOutput) Filters() pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleFilter, BucketV2ReplicationConfigurationRuleFilterOutput] {
	value := pulumix.Apply[BucketV2ReplicationConfigurationRule](o, func(v BucketV2ReplicationConfigurationRule) []BucketV2ReplicationConfigurationRuleFilter {
		return v.Filters
	})
	return pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleFilter, BucketV2ReplicationConfigurationRuleFilterOutput]{OutputState: value.OutputState}
}

// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
func (o BucketV2ReplicationConfigurationRuleOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRule](o, func(v BucketV2ReplicationConfigurationRule) *string { return v.Id })
}

// Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
func (o BucketV2ReplicationConfigurationRuleOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRule](o, func(v BucketV2ReplicationConfigurationRule) *string { return v.Prefix })
}

// Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
func (o BucketV2ReplicationConfigurationRuleOutput) Priority() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRule](o, func(v BucketV2ReplicationConfigurationRule) *int { return v.Priority })
}

// Specifies special object selection criteria (documented below).
func (o BucketV2ReplicationConfigurationRuleOutput) SourceSelectionCriterias() pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleSourceSelectionCriteria, BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput] {
	value := pulumix.Apply[BucketV2ReplicationConfigurationRule](o, func(v BucketV2ReplicationConfigurationRule) []BucketV2ReplicationConfigurationRuleSourceSelectionCriteria {
		return v.SourceSelectionCriterias
	})
	return pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleSourceSelectionCriteria, BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput]{OutputState: value.OutputState}
}

// Status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
func (o BucketV2ReplicationConfigurationRuleOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRule](o, func(v BucketV2ReplicationConfigurationRule) string { return v.Status })
}

type BucketV2ReplicationConfigurationRuleDestination struct {
	// Specifies the overrides to use for object owners on replication. Must be used in conjunction with `accountId` owner override configuration.
	AccessControlTranslations []BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation `pulumi:"accessControlTranslations"`
	// Account ID to use for overriding the object owner on replication. Must be used in conjunction with `accessControlTranslation` override configuration.
	AccountId *string `pulumi:"accountId"`
	// ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
	Bucket string `pulumi:"bucket"`
	// Enables replication metrics (required for S3 RTC) (documented below).
	Metrics []BucketV2ReplicationConfigurationRuleDestinationMetric `pulumi:"metrics"`
	// Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
	// `sseKmsEncryptedObjects` source selection criteria.
	ReplicaKmsKeyId *string `pulumi:"replicaKmsKeyId"`
	// Enables S3 Replication Time Control (S3 RTC) (documented below).
	ReplicationTimes []BucketV2ReplicationConfigurationRuleDestinationReplicationTime `pulumi:"replicationTimes"`
	// The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
	StorageClass *string `pulumi:"storageClass"`
}

type BucketV2ReplicationConfigurationRuleDestinationArgs struct {
	// Specifies the overrides to use for object owners on replication. Must be used in conjunction with `accountId` owner override configuration.
	AccessControlTranslations pulumix.Input[[]*BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationArgs] `pulumi:"accessControlTranslations"`
	// Account ID to use for overriding the object owner on replication. Must be used in conjunction with `accessControlTranslation` override configuration.
	AccountId pulumix.Input[*string] `pulumi:"accountId"`
	// ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
	Bucket pulumix.Input[string] `pulumi:"bucket"`
	// Enables replication metrics (required for S3 RTC) (documented below).
	Metrics pulumix.Input[[]*BucketV2ReplicationConfigurationRuleDestinationMetricArgs] `pulumi:"metrics"`
	// Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
	// `sseKmsEncryptedObjects` source selection criteria.
	ReplicaKmsKeyId pulumix.Input[*string] `pulumi:"replicaKmsKeyId"`
	// Enables S3 Replication Time Control (S3 RTC) (documented below).
	ReplicationTimes pulumix.Input[[]*BucketV2ReplicationConfigurationRuleDestinationReplicationTimeArgs] `pulumi:"replicationTimes"`
	// The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
	StorageClass pulumix.Input[*string] `pulumi:"storageClass"`
}

func (BucketV2ReplicationConfigurationRuleDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleDestination)(nil)).Elem()
}

func (i BucketV2ReplicationConfigurationRuleDestinationArgs) ToBucketV2ReplicationConfigurationRuleDestinationOutput() BucketV2ReplicationConfigurationRuleDestinationOutput {
	return i.ToBucketV2ReplicationConfigurationRuleDestinationOutputWithContext(context.Background())
}

func (i BucketV2ReplicationConfigurationRuleDestinationArgs) ToBucketV2ReplicationConfigurationRuleDestinationOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ReplicationConfigurationRuleDestinationOutput)
}

func (i *BucketV2ReplicationConfigurationRuleDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ReplicationConfigurationRuleDestinationArgs] {
	return pulumix.Val(i)
}

type BucketV2ReplicationConfigurationRuleDestinationOutput struct{ *pulumi.OutputState }

func (BucketV2ReplicationConfigurationRuleDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleDestination)(nil)).Elem()
}

func (o BucketV2ReplicationConfigurationRuleDestinationOutput) ToBucketV2ReplicationConfigurationRuleDestinationOutput() BucketV2ReplicationConfigurationRuleDestinationOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleDestinationOutput) ToBucketV2ReplicationConfigurationRuleDestinationOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleDestinationOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ReplicationConfigurationRuleDestination] {
	return pulumix.Output[BucketV2ReplicationConfigurationRuleDestination]{
		OutputState: o.OutputState,
	}
}

// Specifies the overrides to use for object owners on replication. Must be used in conjunction with `accountId` owner override configuration.
func (o BucketV2ReplicationConfigurationRuleDestinationOutput) AccessControlTranslations() pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation, BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput] {
	value := pulumix.Apply[BucketV2ReplicationConfigurationRuleDestination](o, func(v BucketV2ReplicationConfigurationRuleDestination) []BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation {
		return v.AccessControlTranslations
	})
	return pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation, BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput]{OutputState: value.OutputState}
}

// Account ID to use for overriding the object owner on replication. Must be used in conjunction with `accessControlTranslation` override configuration.
func (o BucketV2ReplicationConfigurationRuleDestinationOutput) AccountId() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleDestination](o, func(v BucketV2ReplicationConfigurationRuleDestination) *string { return v.AccountId })
}

// ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
func (o BucketV2ReplicationConfigurationRuleDestinationOutput) Bucket() pulumix.Output[string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleDestination](o, func(v BucketV2ReplicationConfigurationRuleDestination) string { return v.Bucket })
}

// Enables replication metrics (required for S3 RTC) (documented below).
func (o BucketV2ReplicationConfigurationRuleDestinationOutput) Metrics() pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleDestinationMetric, BucketV2ReplicationConfigurationRuleDestinationMetricOutput] {
	value := pulumix.Apply[BucketV2ReplicationConfigurationRuleDestination](o, func(v BucketV2ReplicationConfigurationRuleDestination) []BucketV2ReplicationConfigurationRuleDestinationMetric {
		return v.Metrics
	})
	return pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleDestinationMetric, BucketV2ReplicationConfigurationRuleDestinationMetricOutput]{OutputState: value.OutputState}
}

// Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
// `sseKmsEncryptedObjects` source selection criteria.
func (o BucketV2ReplicationConfigurationRuleDestinationOutput) ReplicaKmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleDestination](o, func(v BucketV2ReplicationConfigurationRuleDestination) *string { return v.ReplicaKmsKeyId })
}

// Enables S3 Replication Time Control (S3 RTC) (documented below).
func (o BucketV2ReplicationConfigurationRuleDestinationOutput) ReplicationTimes() pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleDestinationReplicationTime, BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput] {
	value := pulumix.Apply[BucketV2ReplicationConfigurationRuleDestination](o, func(v BucketV2ReplicationConfigurationRuleDestination) []BucketV2ReplicationConfigurationRuleDestinationReplicationTime {
		return v.ReplicationTimes
	})
	return pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleDestinationReplicationTime, BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput]{OutputState: value.OutputState}
}

// The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
func (o BucketV2ReplicationConfigurationRuleDestinationOutput) StorageClass() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleDestination](o, func(v BucketV2ReplicationConfigurationRuleDestination) *string { return v.StorageClass })
}

type BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation struct {
	Owner string `pulumi:"owner"`
}

type BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationArgs struct {
	Owner pulumix.Input[string] `pulumi:"owner"`
}

func (BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation)(nil)).Elem()
}

func (i BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationArgs) ToBucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput() BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput {
	return i.ToBucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutputWithContext(context.Background())
}

func (i BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationArgs) ToBucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput)
}

func (i *BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationArgs] {
	return pulumix.Val(i)
}

type BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput struct{ *pulumi.OutputState }

func (BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation)(nil)).Elem()
}

func (o BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput) ToBucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput() BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput) ToBucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation] {
	return pulumix.Output[BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation]{
		OutputState: o.OutputState,
	}
}

func (o BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation](o, func(v BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation) string { return v.Owner })
}

type BucketV2ReplicationConfigurationRuleDestinationMetric struct {
	// Threshold within which objects are to be replicated. The only valid value is `15`.
	Minutes *int `pulumi:"minutes"`
	// Status of replication metrics. Either `Enabled` or `Disabled`.
	Status *string `pulumi:"status"`
}

type BucketV2ReplicationConfigurationRuleDestinationMetricArgs struct {
	// Threshold within which objects are to be replicated. The only valid value is `15`.
	Minutes pulumix.Input[*int] `pulumi:"minutes"`
	// Status of replication metrics. Either `Enabled` or `Disabled`.
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (BucketV2ReplicationConfigurationRuleDestinationMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleDestinationMetric)(nil)).Elem()
}

func (i BucketV2ReplicationConfigurationRuleDestinationMetricArgs) ToBucketV2ReplicationConfigurationRuleDestinationMetricOutput() BucketV2ReplicationConfigurationRuleDestinationMetricOutput {
	return i.ToBucketV2ReplicationConfigurationRuleDestinationMetricOutputWithContext(context.Background())
}

func (i BucketV2ReplicationConfigurationRuleDestinationMetricArgs) ToBucketV2ReplicationConfigurationRuleDestinationMetricOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleDestinationMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ReplicationConfigurationRuleDestinationMetricOutput)
}

func (i *BucketV2ReplicationConfigurationRuleDestinationMetricArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ReplicationConfigurationRuleDestinationMetricArgs] {
	return pulumix.Val(i)
}

type BucketV2ReplicationConfigurationRuleDestinationMetricOutput struct{ *pulumi.OutputState }

func (BucketV2ReplicationConfigurationRuleDestinationMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleDestinationMetric)(nil)).Elem()
}

func (o BucketV2ReplicationConfigurationRuleDestinationMetricOutput) ToBucketV2ReplicationConfigurationRuleDestinationMetricOutput() BucketV2ReplicationConfigurationRuleDestinationMetricOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleDestinationMetricOutput) ToBucketV2ReplicationConfigurationRuleDestinationMetricOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleDestinationMetricOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleDestinationMetricOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ReplicationConfigurationRuleDestinationMetric] {
	return pulumix.Output[BucketV2ReplicationConfigurationRuleDestinationMetric]{
		OutputState: o.OutputState,
	}
}

// Threshold within which objects are to be replicated. The only valid value is `15`.
func (o BucketV2ReplicationConfigurationRuleDestinationMetricOutput) Minutes() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleDestinationMetric](o, func(v BucketV2ReplicationConfigurationRuleDestinationMetric) *int { return v.Minutes })
}

// Status of replication metrics. Either `Enabled` or `Disabled`.
func (o BucketV2ReplicationConfigurationRuleDestinationMetricOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleDestinationMetric](o, func(v BucketV2ReplicationConfigurationRuleDestinationMetric) *string { return v.Status })
}

type BucketV2ReplicationConfigurationRuleDestinationReplicationTime struct {
	// Threshold within which objects are to be replicated. The only valid value is `15`.
	Minutes *int `pulumi:"minutes"`
	// Status of RTC. Either `Enabled` or `Disabled`.
	Status *string `pulumi:"status"`
}

type BucketV2ReplicationConfigurationRuleDestinationReplicationTimeArgs struct {
	// Threshold within which objects are to be replicated. The only valid value is `15`.
	Minutes pulumix.Input[*int] `pulumi:"minutes"`
	// Status of RTC. Either `Enabled` or `Disabled`.
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (BucketV2ReplicationConfigurationRuleDestinationReplicationTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleDestinationReplicationTime)(nil)).Elem()
}

func (i BucketV2ReplicationConfigurationRuleDestinationReplicationTimeArgs) ToBucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput() BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput {
	return i.ToBucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutputWithContext(context.Background())
}

func (i BucketV2ReplicationConfigurationRuleDestinationReplicationTimeArgs) ToBucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput)
}

func (i *BucketV2ReplicationConfigurationRuleDestinationReplicationTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ReplicationConfigurationRuleDestinationReplicationTimeArgs] {
	return pulumix.Val(i)
}

type BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput struct{ *pulumi.OutputState }

func (BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleDestinationReplicationTime)(nil)).Elem()
}

func (o BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput) ToBucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput() BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput) ToBucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ReplicationConfigurationRuleDestinationReplicationTime] {
	return pulumix.Output[BucketV2ReplicationConfigurationRuleDestinationReplicationTime]{
		OutputState: o.OutputState,
	}
}

// Threshold within which objects are to be replicated. The only valid value is `15`.
func (o BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput) Minutes() pulumix.Output[*int] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleDestinationReplicationTime](o, func(v BucketV2ReplicationConfigurationRuleDestinationReplicationTime) *int { return v.Minutes })
}

// Status of RTC. Either `Enabled` or `Disabled`.
func (o BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleDestinationReplicationTime](o, func(v BucketV2ReplicationConfigurationRuleDestinationReplicationTime) *string { return v.Status })
}

type BucketV2ReplicationConfigurationRuleFilter struct {
	// Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix *string `pulumi:"prefix"`
	// A map of tags that identifies subset of objects to which the rule applies.
	// The rule applies only to objects having all the tags in its tagset.
	Tags map[string]string `pulumi:"tags"`
}

type BucketV2ReplicationConfigurationRuleFilterArgs struct {
	// Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// A map of tags that identifies subset of objects to which the rule applies.
	// The rule applies only to objects having all the tags in its tagset.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (BucketV2ReplicationConfigurationRuleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleFilter)(nil)).Elem()
}

func (i BucketV2ReplicationConfigurationRuleFilterArgs) ToBucketV2ReplicationConfigurationRuleFilterOutput() BucketV2ReplicationConfigurationRuleFilterOutput {
	return i.ToBucketV2ReplicationConfigurationRuleFilterOutputWithContext(context.Background())
}

func (i BucketV2ReplicationConfigurationRuleFilterArgs) ToBucketV2ReplicationConfigurationRuleFilterOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ReplicationConfigurationRuleFilterOutput)
}

func (i *BucketV2ReplicationConfigurationRuleFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ReplicationConfigurationRuleFilterArgs] {
	return pulumix.Val(i)
}

type BucketV2ReplicationConfigurationRuleFilterOutput struct{ *pulumi.OutputState }

func (BucketV2ReplicationConfigurationRuleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleFilter)(nil)).Elem()
}

func (o BucketV2ReplicationConfigurationRuleFilterOutput) ToBucketV2ReplicationConfigurationRuleFilterOutput() BucketV2ReplicationConfigurationRuleFilterOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleFilterOutput) ToBucketV2ReplicationConfigurationRuleFilterOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleFilterOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleFilterOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ReplicationConfigurationRuleFilter] {
	return pulumix.Output[BucketV2ReplicationConfigurationRuleFilter]{
		OutputState: o.OutputState,
	}
}

// Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
func (o BucketV2ReplicationConfigurationRuleFilterOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleFilter](o, func(v BucketV2ReplicationConfigurationRuleFilter) *string { return v.Prefix })
}

// A map of tags that identifies subset of objects to which the rule applies.
// The rule applies only to objects having all the tags in its tagset.
func (o BucketV2ReplicationConfigurationRuleFilterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[BucketV2ReplicationConfigurationRuleFilter](o, func(v BucketV2ReplicationConfigurationRuleFilter) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type BucketV2ReplicationConfigurationRuleSourceSelectionCriteria struct {
	// Match SSE-KMS encrypted objects (documented below). If specified, `replicaKmsKeyId`
	// in `destination` must be specified as well.
	SseKmsEncryptedObjects []BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject `pulumi:"sseKmsEncryptedObjects"`
}

type BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs struct {
	// Match SSE-KMS encrypted objects (documented below). If specified, `replicaKmsKeyId`
	// in `destination` must be specified as well.
	SseKmsEncryptedObjects pulumix.Input[[]*BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectArgs] `pulumi:"sseKmsEncryptedObjects"`
}

func (BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleSourceSelectionCriteria)(nil)).Elem()
}

func (i BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs) ToBucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput() BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput {
	return i.ToBucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutputWithContext(context.Background())
}

func (i BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs) ToBucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput)
}

func (i *BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaArgs] {
	return pulumix.Val(i)
}

type BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput struct{ *pulumi.OutputState }

func (BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleSourceSelectionCriteria)(nil)).Elem()
}

func (o BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput) ToBucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput() BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput) ToBucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ReplicationConfigurationRuleSourceSelectionCriteria] {
	return pulumix.Output[BucketV2ReplicationConfigurationRuleSourceSelectionCriteria]{
		OutputState: o.OutputState,
	}
}

// Match SSE-KMS encrypted objects (documented below). If specified, `replicaKmsKeyId`
// in `destination` must be specified as well.
func (o BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput) SseKmsEncryptedObjects() pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject, BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput] {
	value := pulumix.Apply[BucketV2ReplicationConfigurationRuleSourceSelectionCriteria](o, func(v BucketV2ReplicationConfigurationRuleSourceSelectionCriteria) []BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject {
		return v.SseKmsEncryptedObjects
	})
	return pulumix.GArrayOutput[BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject, BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput]{OutputState: value.OutputState}
}

type BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject struct {
	// Boolean which indicates if this criteria is enabled.
	Enabled bool `pulumi:"enabled"`
}

type BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectArgs struct {
	// Boolean which indicates if this criteria is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject)(nil)).Elem()
}

func (i BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectArgs) ToBucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput() BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput {
	return i.ToBucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutputWithContext(context.Background())
}

func (i BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectArgs) ToBucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput)
}

func (i *BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectArgs] {
	return pulumix.Val(i)
}

type BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput struct{ *pulumi.OutputState }

func (BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject)(nil)).Elem()
}

func (o BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput) ToBucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput() BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput) ToBucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutputWithContext(ctx context.Context) BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput {
	return o
}

func (o BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject] {
	return pulumix.Output[BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject]{
		OutputState: o.OutputState,
	}
}

// Boolean which indicates if this criteria is enabled.
func (o BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject](o, func(v BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject) bool {
		return v.Enabled
	})
}

type BucketV2ServerSideEncryptionConfiguration struct {
	// Single object for server-side encryption by default configuration. (documented below)
	Rules []BucketV2ServerSideEncryptionConfigurationRule `pulumi:"rules"`
}

type BucketV2ServerSideEncryptionConfigurationArgs struct {
	// Single object for server-side encryption by default configuration. (documented below)
	Rules pulumix.Input[[]*BucketV2ServerSideEncryptionConfigurationRuleArgs] `pulumi:"rules"`
}

func (BucketV2ServerSideEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ServerSideEncryptionConfiguration)(nil)).Elem()
}

func (i BucketV2ServerSideEncryptionConfigurationArgs) ToBucketV2ServerSideEncryptionConfigurationOutput() BucketV2ServerSideEncryptionConfigurationOutput {
	return i.ToBucketV2ServerSideEncryptionConfigurationOutputWithContext(context.Background())
}

func (i BucketV2ServerSideEncryptionConfigurationArgs) ToBucketV2ServerSideEncryptionConfigurationOutputWithContext(ctx context.Context) BucketV2ServerSideEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ServerSideEncryptionConfigurationOutput)
}

func (i *BucketV2ServerSideEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ServerSideEncryptionConfigurationArgs] {
	return pulumix.Val(i)
}

type BucketV2ServerSideEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (BucketV2ServerSideEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ServerSideEncryptionConfiguration)(nil)).Elem()
}

func (o BucketV2ServerSideEncryptionConfigurationOutput) ToBucketV2ServerSideEncryptionConfigurationOutput() BucketV2ServerSideEncryptionConfigurationOutput {
	return o
}

func (o BucketV2ServerSideEncryptionConfigurationOutput) ToBucketV2ServerSideEncryptionConfigurationOutputWithContext(ctx context.Context) BucketV2ServerSideEncryptionConfigurationOutput {
	return o
}

func (o BucketV2ServerSideEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ServerSideEncryptionConfiguration] {
	return pulumix.Output[BucketV2ServerSideEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Single object for server-side encryption by default configuration. (documented below)
func (o BucketV2ServerSideEncryptionConfigurationOutput) Rules() pulumix.GArrayOutput[BucketV2ServerSideEncryptionConfigurationRule, BucketV2ServerSideEncryptionConfigurationRuleOutput] {
	value := pulumix.Apply[BucketV2ServerSideEncryptionConfiguration](o, func(v BucketV2ServerSideEncryptionConfiguration) []BucketV2ServerSideEncryptionConfigurationRule {
		return v.Rules
	})
	return pulumix.GArrayOutput[BucketV2ServerSideEncryptionConfigurationRule, BucketV2ServerSideEncryptionConfigurationRuleOutput]{OutputState: value.OutputState}
}

type BucketV2ServerSideEncryptionConfigurationRule struct {
	// Single object for setting server-side encryption by default. (documented below)
	ApplyServerSideEncryptionByDefaults []BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault `pulumi:"applyServerSideEncryptionByDefaults"`
	// Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
	BucketKeyEnabled *bool `pulumi:"bucketKeyEnabled"`
}

type BucketV2ServerSideEncryptionConfigurationRuleArgs struct {
	// Single object for setting server-side encryption by default. (documented below)
	ApplyServerSideEncryptionByDefaults pulumix.Input[[]*BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs] `pulumi:"applyServerSideEncryptionByDefaults"`
	// Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
	BucketKeyEnabled pulumix.Input[*bool] `pulumi:"bucketKeyEnabled"`
}

func (BucketV2ServerSideEncryptionConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ServerSideEncryptionConfigurationRule)(nil)).Elem()
}

func (i BucketV2ServerSideEncryptionConfigurationRuleArgs) ToBucketV2ServerSideEncryptionConfigurationRuleOutput() BucketV2ServerSideEncryptionConfigurationRuleOutput {
	return i.ToBucketV2ServerSideEncryptionConfigurationRuleOutputWithContext(context.Background())
}

func (i BucketV2ServerSideEncryptionConfigurationRuleArgs) ToBucketV2ServerSideEncryptionConfigurationRuleOutputWithContext(ctx context.Context) BucketV2ServerSideEncryptionConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ServerSideEncryptionConfigurationRuleOutput)
}

func (i *BucketV2ServerSideEncryptionConfigurationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ServerSideEncryptionConfigurationRuleArgs] {
	return pulumix.Val(i)
}

type BucketV2ServerSideEncryptionConfigurationRuleOutput struct{ *pulumi.OutputState }

func (BucketV2ServerSideEncryptionConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ServerSideEncryptionConfigurationRule)(nil)).Elem()
}

func (o BucketV2ServerSideEncryptionConfigurationRuleOutput) ToBucketV2ServerSideEncryptionConfigurationRuleOutput() BucketV2ServerSideEncryptionConfigurationRuleOutput {
	return o
}

func (o BucketV2ServerSideEncryptionConfigurationRuleOutput) ToBucketV2ServerSideEncryptionConfigurationRuleOutputWithContext(ctx context.Context) BucketV2ServerSideEncryptionConfigurationRuleOutput {
	return o
}

func (o BucketV2ServerSideEncryptionConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ServerSideEncryptionConfigurationRule] {
	return pulumix.Output[BucketV2ServerSideEncryptionConfigurationRule]{
		OutputState: o.OutputState,
	}
}

// Single object for setting server-side encryption by default. (documented below)
func (o BucketV2ServerSideEncryptionConfigurationRuleOutput) ApplyServerSideEncryptionByDefaults() pulumix.GArrayOutput[BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault, BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput] {
	value := pulumix.Apply[BucketV2ServerSideEncryptionConfigurationRule](o, func(v BucketV2ServerSideEncryptionConfigurationRule) []BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault {
		return v.ApplyServerSideEncryptionByDefaults
	})
	return pulumix.GArrayOutput[BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault, BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput]{OutputState: value.OutputState}
}

// Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
func (o BucketV2ServerSideEncryptionConfigurationRuleOutput) BucketKeyEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[BucketV2ServerSideEncryptionConfigurationRule](o, func(v BucketV2ServerSideEncryptionConfigurationRule) *bool { return v.BucketKeyEnabled })
}

type BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault struct {
	// AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
	KmsMasterKeyId *string `pulumi:"kmsMasterKeyId"`
	// Server-side encryption algorithm to use. Valid values are `AES256` and `aws:kms`
	SseAlgorithm string `pulumi:"sseAlgorithm"`
}

type BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs struct {
	// AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
	KmsMasterKeyId pulumix.Input[*string] `pulumi:"kmsMasterKeyId"`
	// Server-side encryption algorithm to use. Valid values are `AES256` and `aws:kms`
	SseAlgorithm pulumix.Input[string] `pulumi:"sseAlgorithm"`
}

func (BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault)(nil)).Elem()
}

func (i BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs) ToBucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput() BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput {
	return i.ToBucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutputWithContext(context.Background())
}

func (i BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs) ToBucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutputWithContext(ctx context.Context) BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput)
}

func (i *BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs] {
	return pulumix.Val(i)
}

type BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput struct{ *pulumi.OutputState }

func (BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault)(nil)).Elem()
}

func (o BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) ToBucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput() BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput {
	return o
}

func (o BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) ToBucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutputWithContext(ctx context.Context) BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput {
	return o
}

func (o BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault] {
	return pulumix.Output[BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault]{
		OutputState: o.OutputState,
	}
}

// AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
func (o BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) KmsMasterKeyId() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault](o, func(v BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault) *string {
		return v.KmsMasterKeyId
	})
}

// Server-side encryption algorithm to use. Valid values are `AES256` and `aws:kms`
func (o BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput) SseAlgorithm() pulumix.Output[string] {
	return pulumix.Apply[BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault](o, func(v BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault) string {
		return v.SseAlgorithm
	})
}

type BucketV2Versioning struct {
	// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
	Enabled *bool `pulumi:"enabled"`
	// Enable MFA delete for either `Change the versioning state of your bucket` or `Permanently delete an object version`. Default is `false`. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
	MfaDelete *bool `pulumi:"mfaDelete"`
}

type BucketV2VersioningArgs struct {
	// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Enable MFA delete for either `Change the versioning state of your bucket` or `Permanently delete an object version`. Default is `false`. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
	MfaDelete pulumix.Input[*bool] `pulumi:"mfaDelete"`
}

func (BucketV2VersioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2Versioning)(nil)).Elem()
}

func (i BucketV2VersioningArgs) ToBucketV2VersioningOutput() BucketV2VersioningOutput {
	return i.ToBucketV2VersioningOutputWithContext(context.Background())
}

func (i BucketV2VersioningArgs) ToBucketV2VersioningOutputWithContext(ctx context.Context) BucketV2VersioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2VersioningOutput)
}

func (i *BucketV2VersioningArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2VersioningArgs] {
	return pulumix.Val(i)
}

type BucketV2VersioningOutput struct{ *pulumi.OutputState }

func (BucketV2VersioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2Versioning)(nil)).Elem()
}

func (o BucketV2VersioningOutput) ToBucketV2VersioningOutput() BucketV2VersioningOutput {
	return o
}

func (o BucketV2VersioningOutput) ToBucketV2VersioningOutputWithContext(ctx context.Context) BucketV2VersioningOutput {
	return o
}

func (o BucketV2VersioningOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2Versioning] {
	return pulumix.Output[BucketV2Versioning]{
		OutputState: o.OutputState,
	}
}

// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
func (o BucketV2VersioningOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[BucketV2Versioning](o, func(v BucketV2Versioning) *bool { return v.Enabled })
}

// Enable MFA delete for either `Change the versioning state of your bucket` or `Permanently delete an object version`. Default is `false`. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
func (o BucketV2VersioningOutput) MfaDelete() pulumix.Output[*bool] {
	return pulumix.Apply[BucketV2Versioning](o, func(v BucketV2Versioning) *bool { return v.MfaDelete })
}

type BucketV2Website struct {
	// Absolute path to the document to return in case of a 4XX error.
	ErrorDocument *string `pulumi:"errorDocument"`
	// Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
	IndexDocument *string `pulumi:"indexDocument"`
	// Hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
	RedirectAllRequestsTo *string `pulumi:"redirectAllRequestsTo"`
	// JSON array containing [routing rules](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html)
	// describing redirect behavior and when redirects are applied.
	RoutingRules *string `pulumi:"routingRules"`
}

type BucketV2WebsiteArgs struct {
	// Absolute path to the document to return in case of a 4XX error.
	ErrorDocument pulumix.Input[*string] `pulumi:"errorDocument"`
	// Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
	IndexDocument pulumix.Input[*string] `pulumi:"indexDocument"`
	// Hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
	RedirectAllRequestsTo pulumix.Input[*string] `pulumi:"redirectAllRequestsTo"`
	// JSON array containing [routing rules](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html)
	// describing redirect behavior and when redirects are applied.
	RoutingRules pulumix.Input[*string] `pulumi:"routingRules"`
}

func (BucketV2WebsiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2Website)(nil)).Elem()
}

func (i BucketV2WebsiteArgs) ToBucketV2WebsiteOutput() BucketV2WebsiteOutput {
	return i.ToBucketV2WebsiteOutputWithContext(context.Background())
}

func (i BucketV2WebsiteArgs) ToBucketV2WebsiteOutputWithContext(ctx context.Context) BucketV2WebsiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketV2WebsiteOutput)
}

func (i *BucketV2WebsiteArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketV2WebsiteArgs] {
	return pulumix.Val(i)
}

type BucketV2WebsiteOutput struct{ *pulumi.OutputState }

func (BucketV2WebsiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketV2Website)(nil)).Elem()
}

func (o BucketV2WebsiteOutput) ToBucketV2WebsiteOutput() BucketV2WebsiteOutput {
	return o
}

func (o BucketV2WebsiteOutput) ToBucketV2WebsiteOutputWithContext(ctx context.Context) BucketV2WebsiteOutput {
	return o
}

func (o BucketV2WebsiteOutput) ToOutput(ctx context.Context) pulumix.Output[BucketV2Website] {
	return pulumix.Output[BucketV2Website]{
		OutputState: o.OutputState,
	}
}

// Absolute path to the document to return in case of a 4XX error.
func (o BucketV2WebsiteOutput) ErrorDocument() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2Website](o, func(v BucketV2Website) *string { return v.ErrorDocument })
}

// Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
func (o BucketV2WebsiteOutput) IndexDocument() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2Website](o, func(v BucketV2Website) *string { return v.IndexDocument })
}

// Hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
func (o BucketV2WebsiteOutput) RedirectAllRequestsTo() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2Website](o, func(v BucketV2Website) *string { return v.RedirectAllRequestsTo })
}

// JSON array containing [routing rules](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html)
// describing redirect behavior and when redirects are applied.
func (o BucketV2WebsiteOutput) RoutingRules() pulumix.Output[*string] {
	return pulumix.Apply[BucketV2Website](o, func(v BucketV2Website) *string { return v.RoutingRules })
}

type BucketVersioning struct {
	// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
	Enabled *bool `pulumi:"enabled"`
	// Enable MFA delete for either `Change the versioning state of your bucket` or `Permanently delete an object version`. Default is `false`. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
	MfaDelete *bool `pulumi:"mfaDelete"`
}

type BucketVersioningArgs struct {
	// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Enable MFA delete for either `Change the versioning state of your bucket` or `Permanently delete an object version`. Default is `false`. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
	MfaDelete pulumix.Input[*bool] `pulumi:"mfaDelete"`
}

func (BucketVersioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketVersioning)(nil)).Elem()
}

func (i BucketVersioningArgs) ToBucketVersioningOutput() BucketVersioningOutput {
	return i.ToBucketVersioningOutputWithContext(context.Background())
}

func (i BucketVersioningArgs) ToBucketVersioningOutputWithContext(ctx context.Context) BucketVersioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersioningOutput)
}

func (i *BucketVersioningArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketVersioningArgs] {
	return pulumix.Val(i)
}

type BucketVersioningOutput struct{ *pulumi.OutputState }

func (BucketVersioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketVersioning)(nil)).Elem()
}

func (o BucketVersioningOutput) ToBucketVersioningOutput() BucketVersioningOutput {
	return o
}

func (o BucketVersioningOutput) ToBucketVersioningOutputWithContext(ctx context.Context) BucketVersioningOutput {
	return o
}

func (o BucketVersioningOutput) ToOutput(ctx context.Context) pulumix.Output[BucketVersioning] {
	return pulumix.Output[BucketVersioning]{
		OutputState: o.OutputState,
	}
}

// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
func (o BucketVersioningOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[BucketVersioning](o, func(v BucketVersioning) *bool { return v.Enabled })
}

// Enable MFA delete for either `Change the versioning state of your bucket` or `Permanently delete an object version`. Default is `false`. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
func (o BucketVersioningOutput) MfaDelete() pulumix.Output[*bool] {
	return pulumix.Apply[BucketVersioning](o, func(v BucketVersioning) *bool { return v.MfaDelete })
}

type BucketVersioningV2VersioningConfiguration struct {
	// Specifies whether MFA delete is enabled in the bucket versioning configuration. Valid values: `Enabled` or `Disabled`.
	MfaDelete *string `pulumi:"mfaDelete"`
	// Versioning state of the bucket. Valid values: `Enabled`, `Suspended`, or `Disabled`. `Disabled` should only be used when creating or importing resources that correspond to unversioned S3 buckets.
	Status string `pulumi:"status"`
}

type BucketVersioningV2VersioningConfigurationArgs struct {
	// Specifies whether MFA delete is enabled in the bucket versioning configuration. Valid values: `Enabled` or `Disabled`.
	MfaDelete pulumix.Input[*string] `pulumi:"mfaDelete"`
	// Versioning state of the bucket. Valid values: `Enabled`, `Suspended`, or `Disabled`. `Disabled` should only be used when creating or importing resources that correspond to unversioned S3 buckets.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (BucketVersioningV2VersioningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketVersioningV2VersioningConfiguration)(nil)).Elem()
}

func (i BucketVersioningV2VersioningConfigurationArgs) ToBucketVersioningV2VersioningConfigurationOutput() BucketVersioningV2VersioningConfigurationOutput {
	return i.ToBucketVersioningV2VersioningConfigurationOutputWithContext(context.Background())
}

func (i BucketVersioningV2VersioningConfigurationArgs) ToBucketVersioningV2VersioningConfigurationOutputWithContext(ctx context.Context) BucketVersioningV2VersioningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersioningV2VersioningConfigurationOutput)
}

func (i *BucketVersioningV2VersioningConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketVersioningV2VersioningConfigurationArgs] {
	return pulumix.Val(i)
}

type BucketVersioningV2VersioningConfigurationOutput struct{ *pulumi.OutputState }

func (BucketVersioningV2VersioningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketVersioningV2VersioningConfiguration)(nil)).Elem()
}

func (o BucketVersioningV2VersioningConfigurationOutput) ToBucketVersioningV2VersioningConfigurationOutput() BucketVersioningV2VersioningConfigurationOutput {
	return o
}

func (o BucketVersioningV2VersioningConfigurationOutput) ToBucketVersioningV2VersioningConfigurationOutputWithContext(ctx context.Context) BucketVersioningV2VersioningConfigurationOutput {
	return o
}

func (o BucketVersioningV2VersioningConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BucketVersioningV2VersioningConfiguration] {
	return pulumix.Output[BucketVersioningV2VersioningConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies whether MFA delete is enabled in the bucket versioning configuration. Valid values: `Enabled` or `Disabled`.
func (o BucketVersioningV2VersioningConfigurationOutput) MfaDelete() pulumix.Output[*string] {
	return pulumix.Apply[BucketVersioningV2VersioningConfiguration](o, func(v BucketVersioningV2VersioningConfiguration) *string { return v.MfaDelete })
}

// Versioning state of the bucket. Valid values: `Enabled`, `Suspended`, or `Disabled`. `Disabled` should only be used when creating or importing resources that correspond to unversioned S3 buckets.
func (o BucketVersioningV2VersioningConfigurationOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[BucketVersioningV2VersioningConfiguration](o, func(v BucketVersioningV2VersioningConfiguration) string { return v.Status })
}

type BucketWebsite struct {
	// An absolute path to the document to return in case of a 4XX error.
	ErrorDocument *string `pulumi:"errorDocument"`
	// Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
	IndexDocument *string `pulumi:"indexDocument"`
	// A hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
	RedirectAllRequestsTo *string `pulumi:"redirectAllRequestsTo"`
	// A json array containing [routing rules](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html)
	// describing redirect behavior and when redirects are applied.
	//
	// The `CORS` object supports the following:
	RoutingRules interface{} `pulumi:"routingRules"`
}

type BucketWebsiteArgs struct {
	// An absolute path to the document to return in case of a 4XX error.
	ErrorDocument pulumix.Input[*string] `pulumi:"errorDocument"`
	// Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
	IndexDocument pulumix.Input[*string] `pulumi:"indexDocument"`
	// A hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
	RedirectAllRequestsTo pulumix.Input[*string] `pulumi:"redirectAllRequestsTo"`
	// A json array containing [routing rules](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html)
	// describing redirect behavior and when redirects are applied.
	//
	// The `CORS` object supports the following:
	RoutingRules pulumix.Input[*any] `pulumi:"routingRules"`
}

func (BucketWebsiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsite)(nil)).Elem()
}

func (i BucketWebsiteArgs) ToBucketWebsiteOutput() BucketWebsiteOutput {
	return i.ToBucketWebsiteOutputWithContext(context.Background())
}

func (i BucketWebsiteArgs) ToBucketWebsiteOutputWithContext(ctx context.Context) BucketWebsiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketWebsiteOutput)
}

func (i *BucketWebsiteArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketWebsiteArgs] {
	return pulumix.Val(i)
}

type BucketWebsiteOutput struct{ *pulumi.OutputState }

func (BucketWebsiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsite)(nil)).Elem()
}

func (o BucketWebsiteOutput) ToBucketWebsiteOutput() BucketWebsiteOutput {
	return o
}

func (o BucketWebsiteOutput) ToBucketWebsiteOutputWithContext(ctx context.Context) BucketWebsiteOutput {
	return o
}

func (o BucketWebsiteOutput) ToOutput(ctx context.Context) pulumix.Output[BucketWebsite] {
	return pulumix.Output[BucketWebsite]{
		OutputState: o.OutputState,
	}
}

// An absolute path to the document to return in case of a 4XX error.
func (o BucketWebsiteOutput) ErrorDocument() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsite](o, func(v BucketWebsite) *string { return v.ErrorDocument })
}

// Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
func (o BucketWebsiteOutput) IndexDocument() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsite](o, func(v BucketWebsite) *string { return v.IndexDocument })
}

// A hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
func (o BucketWebsiteOutput) RedirectAllRequestsTo() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsite](o, func(v BucketWebsite) *string { return v.RedirectAllRequestsTo })
}

// A json array containing [routing rules](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html)
// describing redirect behavior and when redirects are applied.
//
// The `CORS` object supports the following:
func (o BucketWebsiteOutput) RoutingRules() pulumix.Output[any] {
	return pulumix.Apply[BucketWebsite](o, func(v BucketWebsite) interface{} { return v.RoutingRules })
}

type BucketWebsiteConfigurationV2ErrorDocument struct {
	// Object key name to use when a 4XX class error occurs.
	Key string `pulumi:"key"`
}

type BucketWebsiteConfigurationV2ErrorDocumentArgs struct {
	// Object key name to use when a 4XX class error occurs.
	Key pulumix.Input[string] `pulumi:"key"`
}

func (BucketWebsiteConfigurationV2ErrorDocumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2ErrorDocument)(nil)).Elem()
}

func (i BucketWebsiteConfigurationV2ErrorDocumentArgs) ToBucketWebsiteConfigurationV2ErrorDocumentOutput() BucketWebsiteConfigurationV2ErrorDocumentOutput {
	return i.ToBucketWebsiteConfigurationV2ErrorDocumentOutputWithContext(context.Background())
}

func (i BucketWebsiteConfigurationV2ErrorDocumentArgs) ToBucketWebsiteConfigurationV2ErrorDocumentOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2ErrorDocumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketWebsiteConfigurationV2ErrorDocumentOutput)
}

func (i *BucketWebsiteConfigurationV2ErrorDocumentArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketWebsiteConfigurationV2ErrorDocumentArgs] {
	return pulumix.Val(i)
}

type BucketWebsiteConfigurationV2ErrorDocumentOutput struct{ *pulumi.OutputState }

func (BucketWebsiteConfigurationV2ErrorDocumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2ErrorDocument)(nil)).Elem()
}

func (o BucketWebsiteConfigurationV2ErrorDocumentOutput) ToBucketWebsiteConfigurationV2ErrorDocumentOutput() BucketWebsiteConfigurationV2ErrorDocumentOutput {
	return o
}

func (o BucketWebsiteConfigurationV2ErrorDocumentOutput) ToBucketWebsiteConfigurationV2ErrorDocumentOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2ErrorDocumentOutput {
	return o
}

func (o BucketWebsiteConfigurationV2ErrorDocumentOutput) ToOutput(ctx context.Context) pulumix.Output[BucketWebsiteConfigurationV2ErrorDocument] {
	return pulumix.Output[BucketWebsiteConfigurationV2ErrorDocument]{
		OutputState: o.OutputState,
	}
}

// Object key name to use when a 4XX class error occurs.
func (o BucketWebsiteConfigurationV2ErrorDocumentOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2ErrorDocument](o, func(v BucketWebsiteConfigurationV2ErrorDocument) string { return v.Key })
}

type BucketWebsiteConfigurationV2IndexDocument struct {
	// Suffix that is appended to a request that is for a directory on the website endpoint.
	// For example, if the suffix is `index.html` and you make a request to `samplebucket/images/`, the data that is returned will be for the object with the key name `images/index.html`.
	// The suffix must not be empty and must not include a slash character.
	Suffix string `pulumi:"suffix"`
}

type BucketWebsiteConfigurationV2IndexDocumentArgs struct {
	// Suffix that is appended to a request that is for a directory on the website endpoint.
	// For example, if the suffix is `index.html` and you make a request to `samplebucket/images/`, the data that is returned will be for the object with the key name `images/index.html`.
	// The suffix must not be empty and must not include a slash character.
	Suffix pulumix.Input[string] `pulumi:"suffix"`
}

func (BucketWebsiteConfigurationV2IndexDocumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2IndexDocument)(nil)).Elem()
}

func (i BucketWebsiteConfigurationV2IndexDocumentArgs) ToBucketWebsiteConfigurationV2IndexDocumentOutput() BucketWebsiteConfigurationV2IndexDocumentOutput {
	return i.ToBucketWebsiteConfigurationV2IndexDocumentOutputWithContext(context.Background())
}

func (i BucketWebsiteConfigurationV2IndexDocumentArgs) ToBucketWebsiteConfigurationV2IndexDocumentOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2IndexDocumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketWebsiteConfigurationV2IndexDocumentOutput)
}

func (i *BucketWebsiteConfigurationV2IndexDocumentArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketWebsiteConfigurationV2IndexDocumentArgs] {
	return pulumix.Val(i)
}

type BucketWebsiteConfigurationV2IndexDocumentOutput struct{ *pulumi.OutputState }

func (BucketWebsiteConfigurationV2IndexDocumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2IndexDocument)(nil)).Elem()
}

func (o BucketWebsiteConfigurationV2IndexDocumentOutput) ToBucketWebsiteConfigurationV2IndexDocumentOutput() BucketWebsiteConfigurationV2IndexDocumentOutput {
	return o
}

func (o BucketWebsiteConfigurationV2IndexDocumentOutput) ToBucketWebsiteConfigurationV2IndexDocumentOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2IndexDocumentOutput {
	return o
}

func (o BucketWebsiteConfigurationV2IndexDocumentOutput) ToOutput(ctx context.Context) pulumix.Output[BucketWebsiteConfigurationV2IndexDocument] {
	return pulumix.Output[BucketWebsiteConfigurationV2IndexDocument]{
		OutputState: o.OutputState,
	}
}

// Suffix that is appended to a request that is for a directory on the website endpoint.
// For example, if the suffix is `index.html` and you make a request to `samplebucket/images/`, the data that is returned will be for the object with the key name `images/index.html`.
// The suffix must not be empty and must not include a slash character.
func (o BucketWebsiteConfigurationV2IndexDocumentOutput) Suffix() pulumix.Output[string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2IndexDocument](o, func(v BucketWebsiteConfigurationV2IndexDocument) string { return v.Suffix })
}

type BucketWebsiteConfigurationV2RedirectAllRequestsTo struct {
	// Name of the host where requests are redirected.
	HostName string `pulumi:"hostName"`
	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: `http`, `https`.
	Protocol *string `pulumi:"protocol"`
}

type BucketWebsiteConfigurationV2RedirectAllRequestsToArgs struct {
	// Name of the host where requests are redirected.
	HostName pulumix.Input[string] `pulumi:"hostName"`
	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: `http`, `https`.
	Protocol pulumix.Input[*string] `pulumi:"protocol"`
}

func (BucketWebsiteConfigurationV2RedirectAllRequestsToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2RedirectAllRequestsTo)(nil)).Elem()
}

func (i BucketWebsiteConfigurationV2RedirectAllRequestsToArgs) ToBucketWebsiteConfigurationV2RedirectAllRequestsToOutput() BucketWebsiteConfigurationV2RedirectAllRequestsToOutput {
	return i.ToBucketWebsiteConfigurationV2RedirectAllRequestsToOutputWithContext(context.Background())
}

func (i BucketWebsiteConfigurationV2RedirectAllRequestsToArgs) ToBucketWebsiteConfigurationV2RedirectAllRequestsToOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2RedirectAllRequestsToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketWebsiteConfigurationV2RedirectAllRequestsToOutput)
}

func (i *BucketWebsiteConfigurationV2RedirectAllRequestsToArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketWebsiteConfigurationV2RedirectAllRequestsToArgs] {
	return pulumix.Val(i)
}

type BucketWebsiteConfigurationV2RedirectAllRequestsToOutput struct{ *pulumi.OutputState }

func (BucketWebsiteConfigurationV2RedirectAllRequestsToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2RedirectAllRequestsTo)(nil)).Elem()
}

func (o BucketWebsiteConfigurationV2RedirectAllRequestsToOutput) ToBucketWebsiteConfigurationV2RedirectAllRequestsToOutput() BucketWebsiteConfigurationV2RedirectAllRequestsToOutput {
	return o
}

func (o BucketWebsiteConfigurationV2RedirectAllRequestsToOutput) ToBucketWebsiteConfigurationV2RedirectAllRequestsToOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2RedirectAllRequestsToOutput {
	return o
}

func (o BucketWebsiteConfigurationV2RedirectAllRequestsToOutput) ToOutput(ctx context.Context) pulumix.Output[BucketWebsiteConfigurationV2RedirectAllRequestsTo] {
	return pulumix.Output[BucketWebsiteConfigurationV2RedirectAllRequestsTo]{
		OutputState: o.OutputState,
	}
}

// Name of the host where requests are redirected.
func (o BucketWebsiteConfigurationV2RedirectAllRequestsToOutput) HostName() pulumix.Output[string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2RedirectAllRequestsTo](o, func(v BucketWebsiteConfigurationV2RedirectAllRequestsTo) string { return v.HostName })
}

// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: `http`, `https`.
func (o BucketWebsiteConfigurationV2RedirectAllRequestsToOutput) Protocol() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2RedirectAllRequestsTo](o, func(v BucketWebsiteConfigurationV2RedirectAllRequestsTo) *string { return v.Protocol })
}

type BucketWebsiteConfigurationV2RoutingRule struct {
	// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
	Condition *BucketWebsiteConfigurationV2RoutingRuleCondition `pulumi:"condition"`
	// Configuration block for redirect information. See below.
	Redirect BucketWebsiteConfigurationV2RoutingRuleRedirect `pulumi:"redirect"`
}

type BucketWebsiteConfigurationV2RoutingRuleArgs struct {
	// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
	Condition pulumix.Input[*BucketWebsiteConfigurationV2RoutingRuleConditionArgs] `pulumi:"condition"`
	// Configuration block for redirect information. See below.
	Redirect pulumix.Input[*BucketWebsiteConfigurationV2RoutingRuleRedirectArgs] `pulumi:"redirect"`
}

func (BucketWebsiteConfigurationV2RoutingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2RoutingRule)(nil)).Elem()
}

func (i BucketWebsiteConfigurationV2RoutingRuleArgs) ToBucketWebsiteConfigurationV2RoutingRuleOutput() BucketWebsiteConfigurationV2RoutingRuleOutput {
	return i.ToBucketWebsiteConfigurationV2RoutingRuleOutputWithContext(context.Background())
}

func (i BucketWebsiteConfigurationV2RoutingRuleArgs) ToBucketWebsiteConfigurationV2RoutingRuleOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2RoutingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketWebsiteConfigurationV2RoutingRuleOutput)
}

func (i *BucketWebsiteConfigurationV2RoutingRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketWebsiteConfigurationV2RoutingRuleArgs] {
	return pulumix.Val(i)
}

type BucketWebsiteConfigurationV2RoutingRuleOutput struct{ *pulumi.OutputState }

func (BucketWebsiteConfigurationV2RoutingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2RoutingRule)(nil)).Elem()
}

func (o BucketWebsiteConfigurationV2RoutingRuleOutput) ToBucketWebsiteConfigurationV2RoutingRuleOutput() BucketWebsiteConfigurationV2RoutingRuleOutput {
	return o
}

func (o BucketWebsiteConfigurationV2RoutingRuleOutput) ToBucketWebsiteConfigurationV2RoutingRuleOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2RoutingRuleOutput {
	return o
}

func (o BucketWebsiteConfigurationV2RoutingRuleOutput) ToOutput(ctx context.Context) pulumix.Output[BucketWebsiteConfigurationV2RoutingRule] {
	return pulumix.Output[BucketWebsiteConfigurationV2RoutingRule]{
		OutputState: o.OutputState,
	}
}

// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
func (o BucketWebsiteConfigurationV2RoutingRuleOutput) Condition() pulumix.GPtrOutput[BucketWebsiteConfigurationV2RoutingRuleCondition, BucketWebsiteConfigurationV2RoutingRuleConditionOutput] {
	value := pulumix.Apply[BucketWebsiteConfigurationV2RoutingRule](o, func(v BucketWebsiteConfigurationV2RoutingRule) *BucketWebsiteConfigurationV2RoutingRuleCondition {
		return v.Condition
	})
	return pulumix.GPtrOutput[BucketWebsiteConfigurationV2RoutingRuleCondition, BucketWebsiteConfigurationV2RoutingRuleConditionOutput]{OutputState: value.OutputState}
}

// Configuration block for redirect information. See below.
func (o BucketWebsiteConfigurationV2RoutingRuleOutput) Redirect() pulumix.GPtrOutput[BucketWebsiteConfigurationV2RoutingRuleRedirect, BucketWebsiteConfigurationV2RoutingRuleRedirectOutput] {
	value := pulumix.Apply[BucketWebsiteConfigurationV2RoutingRule](o, func(v BucketWebsiteConfigurationV2RoutingRule) BucketWebsiteConfigurationV2RoutingRuleRedirect {
		return v.Redirect
	})
	return pulumix.GPtrOutput[BucketWebsiteConfigurationV2RoutingRuleRedirect, BucketWebsiteConfigurationV2RoutingRuleRedirectOutput]{OutputState: value.OutputState}
}

type BucketWebsiteConfigurationV2RoutingRuleCondition struct {
	// HTTP error code when the redirect is applied. If specified with `keyPrefixEquals`, then both must be true for the redirect to be applied.
	HttpErrorCodeReturnedEquals *string `pulumi:"httpErrorCodeReturnedEquals"`
	// Object key name prefix when the redirect is applied. If specified with `httpErrorCodeReturnedEquals`, then both must be true for the redirect to be applied.
	KeyPrefixEquals *string `pulumi:"keyPrefixEquals"`
}

type BucketWebsiteConfigurationV2RoutingRuleConditionArgs struct {
	// HTTP error code when the redirect is applied. If specified with `keyPrefixEquals`, then both must be true for the redirect to be applied.
	HttpErrorCodeReturnedEquals pulumix.Input[*string] `pulumi:"httpErrorCodeReturnedEquals"`
	// Object key name prefix when the redirect is applied. If specified with `httpErrorCodeReturnedEquals`, then both must be true for the redirect to be applied.
	KeyPrefixEquals pulumix.Input[*string] `pulumi:"keyPrefixEquals"`
}

func (BucketWebsiteConfigurationV2RoutingRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2RoutingRuleCondition)(nil)).Elem()
}

func (i BucketWebsiteConfigurationV2RoutingRuleConditionArgs) ToBucketWebsiteConfigurationV2RoutingRuleConditionOutput() BucketWebsiteConfigurationV2RoutingRuleConditionOutput {
	return i.ToBucketWebsiteConfigurationV2RoutingRuleConditionOutputWithContext(context.Background())
}

func (i BucketWebsiteConfigurationV2RoutingRuleConditionArgs) ToBucketWebsiteConfigurationV2RoutingRuleConditionOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2RoutingRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketWebsiteConfigurationV2RoutingRuleConditionOutput)
}

func (i *BucketWebsiteConfigurationV2RoutingRuleConditionArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketWebsiteConfigurationV2RoutingRuleConditionArgs] {
	return pulumix.Val(i)
}

type BucketWebsiteConfigurationV2RoutingRuleConditionOutput struct{ *pulumi.OutputState }

func (BucketWebsiteConfigurationV2RoutingRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2RoutingRuleCondition)(nil)).Elem()
}

func (o BucketWebsiteConfigurationV2RoutingRuleConditionOutput) ToBucketWebsiteConfigurationV2RoutingRuleConditionOutput() BucketWebsiteConfigurationV2RoutingRuleConditionOutput {
	return o
}

func (o BucketWebsiteConfigurationV2RoutingRuleConditionOutput) ToBucketWebsiteConfigurationV2RoutingRuleConditionOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2RoutingRuleConditionOutput {
	return o
}

func (o BucketWebsiteConfigurationV2RoutingRuleConditionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketWebsiteConfigurationV2RoutingRuleCondition] {
	return pulumix.Output[BucketWebsiteConfigurationV2RoutingRuleCondition]{
		OutputState: o.OutputState,
	}
}

// HTTP error code when the redirect is applied. If specified with `keyPrefixEquals`, then both must be true for the redirect to be applied.
func (o BucketWebsiteConfigurationV2RoutingRuleConditionOutput) HttpErrorCodeReturnedEquals() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2RoutingRuleCondition](o, func(v BucketWebsiteConfigurationV2RoutingRuleCondition) *string { return v.HttpErrorCodeReturnedEquals })
}

// Object key name prefix when the redirect is applied. If specified with `httpErrorCodeReturnedEquals`, then both must be true for the redirect to be applied.
func (o BucketWebsiteConfigurationV2RoutingRuleConditionOutput) KeyPrefixEquals() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2RoutingRuleCondition](o, func(v BucketWebsiteConfigurationV2RoutingRuleCondition) *string { return v.KeyPrefixEquals })
}

type BucketWebsiteConfigurationV2RoutingRuleRedirect struct {
	// Host name to use in the redirect request.
	HostName *string `pulumi:"hostName"`
	// HTTP redirect code to use on the response.
	HttpRedirectCode *string `pulumi:"httpRedirectCode"`
	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: `http`, `https`.
	Protocol *string `pulumi:"protocol"`
	// Object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix `docs/` (objects in the `docs/` folder) to `documents/`, you can set a `condition` block with `keyPrefixEquals` set to `docs/` and in the `redirect` set `replaceKeyPrefixWith` to `/documents`.
	ReplaceKeyPrefixWith *string `pulumi:"replaceKeyPrefixWith"`
	// Specific object key to use in the redirect request. For example, redirect request to `error.html`.
	ReplaceKeyWith *string `pulumi:"replaceKeyWith"`
}

type BucketWebsiteConfigurationV2RoutingRuleRedirectArgs struct {
	// Host name to use in the redirect request.
	HostName pulumix.Input[*string] `pulumi:"hostName"`
	// HTTP redirect code to use on the response.
	HttpRedirectCode pulumix.Input[*string] `pulumi:"httpRedirectCode"`
	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: `http`, `https`.
	Protocol pulumix.Input[*string] `pulumi:"protocol"`
	// Object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix `docs/` (objects in the `docs/` folder) to `documents/`, you can set a `condition` block with `keyPrefixEquals` set to `docs/` and in the `redirect` set `replaceKeyPrefixWith` to `/documents`.
	ReplaceKeyPrefixWith pulumix.Input[*string] `pulumi:"replaceKeyPrefixWith"`
	// Specific object key to use in the redirect request. For example, redirect request to `error.html`.
	ReplaceKeyWith pulumix.Input[*string] `pulumi:"replaceKeyWith"`
}

func (BucketWebsiteConfigurationV2RoutingRuleRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2RoutingRuleRedirect)(nil)).Elem()
}

func (i BucketWebsiteConfigurationV2RoutingRuleRedirectArgs) ToBucketWebsiteConfigurationV2RoutingRuleRedirectOutput() BucketWebsiteConfigurationV2RoutingRuleRedirectOutput {
	return i.ToBucketWebsiteConfigurationV2RoutingRuleRedirectOutputWithContext(context.Background())
}

func (i BucketWebsiteConfigurationV2RoutingRuleRedirectArgs) ToBucketWebsiteConfigurationV2RoutingRuleRedirectOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2RoutingRuleRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketWebsiteConfigurationV2RoutingRuleRedirectOutput)
}

func (i *BucketWebsiteConfigurationV2RoutingRuleRedirectArgs) ToOutput(ctx context.Context) pulumix.Output[*BucketWebsiteConfigurationV2RoutingRuleRedirectArgs] {
	return pulumix.Val(i)
}

type BucketWebsiteConfigurationV2RoutingRuleRedirectOutput struct{ *pulumi.OutputState }

func (BucketWebsiteConfigurationV2RoutingRuleRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketWebsiteConfigurationV2RoutingRuleRedirect)(nil)).Elem()
}

func (o BucketWebsiteConfigurationV2RoutingRuleRedirectOutput) ToBucketWebsiteConfigurationV2RoutingRuleRedirectOutput() BucketWebsiteConfigurationV2RoutingRuleRedirectOutput {
	return o
}

func (o BucketWebsiteConfigurationV2RoutingRuleRedirectOutput) ToBucketWebsiteConfigurationV2RoutingRuleRedirectOutputWithContext(ctx context.Context) BucketWebsiteConfigurationV2RoutingRuleRedirectOutput {
	return o
}

func (o BucketWebsiteConfigurationV2RoutingRuleRedirectOutput) ToOutput(ctx context.Context) pulumix.Output[BucketWebsiteConfigurationV2RoutingRuleRedirect] {
	return pulumix.Output[BucketWebsiteConfigurationV2RoutingRuleRedirect]{
		OutputState: o.OutputState,
	}
}

// Host name to use in the redirect request.
func (o BucketWebsiteConfigurationV2RoutingRuleRedirectOutput) HostName() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2RoutingRuleRedirect](o, func(v BucketWebsiteConfigurationV2RoutingRuleRedirect) *string { return v.HostName })
}

// HTTP redirect code to use on the response.
func (o BucketWebsiteConfigurationV2RoutingRuleRedirectOutput) HttpRedirectCode() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2RoutingRuleRedirect](o, func(v BucketWebsiteConfigurationV2RoutingRuleRedirect) *string { return v.HttpRedirectCode })
}

// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: `http`, `https`.
func (o BucketWebsiteConfigurationV2RoutingRuleRedirectOutput) Protocol() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2RoutingRuleRedirect](o, func(v BucketWebsiteConfigurationV2RoutingRuleRedirect) *string { return v.Protocol })
}

// Object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix `docs/` (objects in the `docs/` folder) to `documents/`, you can set a `condition` block with `keyPrefixEquals` set to `docs/` and in the `redirect` set `replaceKeyPrefixWith` to `/documents`.
func (o BucketWebsiteConfigurationV2RoutingRuleRedirectOutput) ReplaceKeyPrefixWith() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2RoutingRuleRedirect](o, func(v BucketWebsiteConfigurationV2RoutingRuleRedirect) *string { return v.ReplaceKeyPrefixWith })
}

// Specific object key to use in the redirect request. For example, redirect request to `error.html`.
func (o BucketWebsiteConfigurationV2RoutingRuleRedirectOutput) ReplaceKeyWith() pulumix.Output[*string] {
	return pulumix.Apply[BucketWebsiteConfigurationV2RoutingRuleRedirect](o, func(v BucketWebsiteConfigurationV2RoutingRuleRedirect) *string { return v.ReplaceKeyWith })
}

type InventoryDestination struct {
	// S3 bucket configuration where inventory results are published (documented below).
	Bucket InventoryDestinationBucket `pulumi:"bucket"`
}

type InventoryDestinationArgs struct {
	// S3 bucket configuration where inventory results are published (documented below).
	Bucket pulumix.Input[*InventoryDestinationBucketArgs] `pulumi:"bucket"`
}

func (InventoryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDestination)(nil)).Elem()
}

func (i InventoryDestinationArgs) ToInventoryDestinationOutput() InventoryDestinationOutput {
	return i.ToInventoryDestinationOutputWithContext(context.Background())
}

func (i InventoryDestinationArgs) ToInventoryDestinationOutputWithContext(ctx context.Context) InventoryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryDestinationOutput)
}

func (i *InventoryDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*InventoryDestinationArgs] {
	return pulumix.Val(i)
}

type InventoryDestinationOutput struct{ *pulumi.OutputState }

func (InventoryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDestination)(nil)).Elem()
}

func (o InventoryDestinationOutput) ToInventoryDestinationOutput() InventoryDestinationOutput {
	return o
}

func (o InventoryDestinationOutput) ToInventoryDestinationOutputWithContext(ctx context.Context) InventoryDestinationOutput {
	return o
}

func (o InventoryDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[InventoryDestination] {
	return pulumix.Output[InventoryDestination]{
		OutputState: o.OutputState,
	}
}

// S3 bucket configuration where inventory results are published (documented below).
func (o InventoryDestinationOutput) Bucket() pulumix.GPtrOutput[InventoryDestinationBucket, InventoryDestinationBucketOutput] {
	value := pulumix.Apply[InventoryDestination](o, func(v InventoryDestination) InventoryDestinationBucket { return v.Bucket })
	return pulumix.GPtrOutput[InventoryDestinationBucket, InventoryDestinationBucketOutput]{OutputState: value.OutputState}
}

type InventoryDestinationBucket struct {
	// ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
	AccountId *string `pulumi:"accountId"`
	// Amazon S3 bucket ARN of the destination.
	BucketArn string `pulumi:"bucketArn"`
	// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
	Encryption *InventoryDestinationBucketEncryption `pulumi:"encryption"`
	// Specifies the output format of the inventory results. Can be `CSV`, [`ORC`](https://orc.apache.org/) or [`Parquet`](https://parquet.apache.org/).
	Format string `pulumi:"format"`
	// Prefix that is prepended to all inventory results.
	Prefix *string `pulumi:"prefix"`
}

type InventoryDestinationBucketArgs struct {
	// ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
	AccountId pulumix.Input[*string] `pulumi:"accountId"`
	// Amazon S3 bucket ARN of the destination.
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
	Encryption pulumix.Input[*InventoryDestinationBucketEncryptionArgs] `pulumi:"encryption"`
	// Specifies the output format of the inventory results. Can be `CSV`, [`ORC`](https://orc.apache.org/) or [`Parquet`](https://parquet.apache.org/).
	Format pulumix.Input[string] `pulumi:"format"`
	// Prefix that is prepended to all inventory results.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (InventoryDestinationBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDestinationBucket)(nil)).Elem()
}

func (i InventoryDestinationBucketArgs) ToInventoryDestinationBucketOutput() InventoryDestinationBucketOutput {
	return i.ToInventoryDestinationBucketOutputWithContext(context.Background())
}

func (i InventoryDestinationBucketArgs) ToInventoryDestinationBucketOutputWithContext(ctx context.Context) InventoryDestinationBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryDestinationBucketOutput)
}

func (i *InventoryDestinationBucketArgs) ToOutput(ctx context.Context) pulumix.Output[*InventoryDestinationBucketArgs] {
	return pulumix.Val(i)
}

type InventoryDestinationBucketOutput struct{ *pulumi.OutputState }

func (InventoryDestinationBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDestinationBucket)(nil)).Elem()
}

func (o InventoryDestinationBucketOutput) ToInventoryDestinationBucketOutput() InventoryDestinationBucketOutput {
	return o
}

func (o InventoryDestinationBucketOutput) ToInventoryDestinationBucketOutputWithContext(ctx context.Context) InventoryDestinationBucketOutput {
	return o
}

func (o InventoryDestinationBucketOutput) ToOutput(ctx context.Context) pulumix.Output[InventoryDestinationBucket] {
	return pulumix.Output[InventoryDestinationBucket]{
		OutputState: o.OutputState,
	}
}

// ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
func (o InventoryDestinationBucketOutput) AccountId() pulumix.Output[*string] {
	return pulumix.Apply[InventoryDestinationBucket](o, func(v InventoryDestinationBucket) *string { return v.AccountId })
}

// Amazon S3 bucket ARN of the destination.
func (o InventoryDestinationBucketOutput) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[InventoryDestinationBucket](o, func(v InventoryDestinationBucket) string { return v.BucketArn })
}

// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
func (o InventoryDestinationBucketOutput) Encryption() pulumix.GPtrOutput[InventoryDestinationBucketEncryption, InventoryDestinationBucketEncryptionOutput] {
	value := pulumix.Apply[InventoryDestinationBucket](o, func(v InventoryDestinationBucket) *InventoryDestinationBucketEncryption { return v.Encryption })
	return pulumix.GPtrOutput[InventoryDestinationBucketEncryption, InventoryDestinationBucketEncryptionOutput]{OutputState: value.OutputState}
}

// Specifies the output format of the inventory results. Can be `CSV`, [`ORC`](https://orc.apache.org/) or [`Parquet`](https://parquet.apache.org/).
func (o InventoryDestinationBucketOutput) Format() pulumix.Output[string] {
	return pulumix.Apply[InventoryDestinationBucket](o, func(v InventoryDestinationBucket) string { return v.Format })
}

// Prefix that is prepended to all inventory results.
func (o InventoryDestinationBucketOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[InventoryDestinationBucket](o, func(v InventoryDestinationBucket) *string { return v.Prefix })
}

type InventoryDestinationBucketEncryption struct {
	// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
	SseKms *InventoryDestinationBucketEncryptionSseKms `pulumi:"sseKms"`
	// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
	SseS3 *InventoryDestinationBucketEncryptionSseS3 `pulumi:"sseS3"`
}

type InventoryDestinationBucketEncryptionArgs struct {
	// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
	SseKms pulumix.Input[*InventoryDestinationBucketEncryptionSseKmsArgs] `pulumi:"sseKms"`
	// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
	SseS3 pulumix.Input[*InventoryDestinationBucketEncryptionSseS3Args] `pulumi:"sseS3"`
}

func (InventoryDestinationBucketEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDestinationBucketEncryption)(nil)).Elem()
}

func (i InventoryDestinationBucketEncryptionArgs) ToInventoryDestinationBucketEncryptionOutput() InventoryDestinationBucketEncryptionOutput {
	return i.ToInventoryDestinationBucketEncryptionOutputWithContext(context.Background())
}

func (i InventoryDestinationBucketEncryptionArgs) ToInventoryDestinationBucketEncryptionOutputWithContext(ctx context.Context) InventoryDestinationBucketEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryDestinationBucketEncryptionOutput)
}

func (i *InventoryDestinationBucketEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*InventoryDestinationBucketEncryptionArgs] {
	return pulumix.Val(i)
}

type InventoryDestinationBucketEncryptionOutput struct{ *pulumi.OutputState }

func (InventoryDestinationBucketEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDestinationBucketEncryption)(nil)).Elem()
}

func (o InventoryDestinationBucketEncryptionOutput) ToInventoryDestinationBucketEncryptionOutput() InventoryDestinationBucketEncryptionOutput {
	return o
}

func (o InventoryDestinationBucketEncryptionOutput) ToInventoryDestinationBucketEncryptionOutputWithContext(ctx context.Context) InventoryDestinationBucketEncryptionOutput {
	return o
}

func (o InventoryDestinationBucketEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[InventoryDestinationBucketEncryption] {
	return pulumix.Output[InventoryDestinationBucketEncryption]{
		OutputState: o.OutputState,
	}
}

// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
func (o InventoryDestinationBucketEncryptionOutput) SseKms() pulumix.GPtrOutput[InventoryDestinationBucketEncryptionSseKms, InventoryDestinationBucketEncryptionSseKmsOutput] {
	value := pulumix.Apply[InventoryDestinationBucketEncryption](o, func(v InventoryDestinationBucketEncryption) *InventoryDestinationBucketEncryptionSseKms {
		return v.SseKms
	})
	return pulumix.GPtrOutput[InventoryDestinationBucketEncryptionSseKms, InventoryDestinationBucketEncryptionSseKmsOutput]{OutputState: value.OutputState}
}

// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
func (o InventoryDestinationBucketEncryptionOutput) SseS3() pulumix.GPtrOutput[InventoryDestinationBucketEncryptionSseS3, InventoryDestinationBucketEncryptionSseS3Output] {
	value := pulumix.Apply[InventoryDestinationBucketEncryption](o, func(v InventoryDestinationBucketEncryption) *InventoryDestinationBucketEncryptionSseS3 {
		return v.SseS3
	})
	return pulumix.GPtrOutput[InventoryDestinationBucketEncryptionSseS3, InventoryDestinationBucketEncryptionSseS3Output]{OutputState: value.OutputState}
}

type InventoryDestinationBucketEncryptionSseKms struct {
	// ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
	KeyId string `pulumi:"keyId"`
}

type InventoryDestinationBucketEncryptionSseKmsArgs struct {
	// ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
	KeyId pulumix.Input[string] `pulumi:"keyId"`
}

func (InventoryDestinationBucketEncryptionSseKmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDestinationBucketEncryptionSseKms)(nil)).Elem()
}

func (i InventoryDestinationBucketEncryptionSseKmsArgs) ToInventoryDestinationBucketEncryptionSseKmsOutput() InventoryDestinationBucketEncryptionSseKmsOutput {
	return i.ToInventoryDestinationBucketEncryptionSseKmsOutputWithContext(context.Background())
}

func (i InventoryDestinationBucketEncryptionSseKmsArgs) ToInventoryDestinationBucketEncryptionSseKmsOutputWithContext(ctx context.Context) InventoryDestinationBucketEncryptionSseKmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryDestinationBucketEncryptionSseKmsOutput)
}

func (i *InventoryDestinationBucketEncryptionSseKmsArgs) ToOutput(ctx context.Context) pulumix.Output[*InventoryDestinationBucketEncryptionSseKmsArgs] {
	return pulumix.Val(i)
}

type InventoryDestinationBucketEncryptionSseKmsOutput struct{ *pulumi.OutputState }

func (InventoryDestinationBucketEncryptionSseKmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDestinationBucketEncryptionSseKms)(nil)).Elem()
}

func (o InventoryDestinationBucketEncryptionSseKmsOutput) ToInventoryDestinationBucketEncryptionSseKmsOutput() InventoryDestinationBucketEncryptionSseKmsOutput {
	return o
}

func (o InventoryDestinationBucketEncryptionSseKmsOutput) ToInventoryDestinationBucketEncryptionSseKmsOutputWithContext(ctx context.Context) InventoryDestinationBucketEncryptionSseKmsOutput {
	return o
}

func (o InventoryDestinationBucketEncryptionSseKmsOutput) ToOutput(ctx context.Context) pulumix.Output[InventoryDestinationBucketEncryptionSseKms] {
	return pulumix.Output[InventoryDestinationBucketEncryptionSseKms]{
		OutputState: o.OutputState,
	}
}

// ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
func (o InventoryDestinationBucketEncryptionSseKmsOutput) KeyId() pulumix.Output[string] {
	return pulumix.Apply[InventoryDestinationBucketEncryptionSseKms](o, func(v InventoryDestinationBucketEncryptionSseKms) string { return v.KeyId })
}

type InventoryDestinationBucketEncryptionSseS3 struct {
}

type InventoryDestinationBucketEncryptionSseS3Args struct {
}

func (InventoryDestinationBucketEncryptionSseS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDestinationBucketEncryptionSseS3)(nil)).Elem()
}

func (i InventoryDestinationBucketEncryptionSseS3Args) ToInventoryDestinationBucketEncryptionSseS3Output() InventoryDestinationBucketEncryptionSseS3Output {
	return i.ToInventoryDestinationBucketEncryptionSseS3OutputWithContext(context.Background())
}

func (i InventoryDestinationBucketEncryptionSseS3Args) ToInventoryDestinationBucketEncryptionSseS3OutputWithContext(ctx context.Context) InventoryDestinationBucketEncryptionSseS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryDestinationBucketEncryptionSseS3Output)
}

func (i *InventoryDestinationBucketEncryptionSseS3Args) ToOutput(ctx context.Context) pulumix.Output[*InventoryDestinationBucketEncryptionSseS3Args] {
	return pulumix.Val(i)
}

type InventoryDestinationBucketEncryptionSseS3Output struct{ *pulumi.OutputState }

func (InventoryDestinationBucketEncryptionSseS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDestinationBucketEncryptionSseS3)(nil)).Elem()
}

func (o InventoryDestinationBucketEncryptionSseS3Output) ToInventoryDestinationBucketEncryptionSseS3Output() InventoryDestinationBucketEncryptionSseS3Output {
	return o
}

func (o InventoryDestinationBucketEncryptionSseS3Output) ToInventoryDestinationBucketEncryptionSseS3OutputWithContext(ctx context.Context) InventoryDestinationBucketEncryptionSseS3Output {
	return o
}

func (o InventoryDestinationBucketEncryptionSseS3Output) ToOutput(ctx context.Context) pulumix.Output[InventoryDestinationBucketEncryptionSseS3] {
	return pulumix.Output[InventoryDestinationBucketEncryptionSseS3]{
		OutputState: o.OutputState,
	}
}

type InventoryFilter struct {
	// Prefix that an object must have to be included in the inventory results.
	Prefix *string `pulumi:"prefix"`
}

type InventoryFilterArgs struct {
	// Prefix that an object must have to be included in the inventory results.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (InventoryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryFilter)(nil)).Elem()
}

func (i InventoryFilterArgs) ToInventoryFilterOutput() InventoryFilterOutput {
	return i.ToInventoryFilterOutputWithContext(context.Background())
}

func (i InventoryFilterArgs) ToInventoryFilterOutputWithContext(ctx context.Context) InventoryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryFilterOutput)
}

func (i *InventoryFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*InventoryFilterArgs] {
	return pulumix.Val(i)
}

type InventoryFilterOutput struct{ *pulumi.OutputState }

func (InventoryFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryFilter)(nil)).Elem()
}

func (o InventoryFilterOutput) ToInventoryFilterOutput() InventoryFilterOutput {
	return o
}

func (o InventoryFilterOutput) ToInventoryFilterOutputWithContext(ctx context.Context) InventoryFilterOutput {
	return o
}

func (o InventoryFilterOutput) ToOutput(ctx context.Context) pulumix.Output[InventoryFilter] {
	return pulumix.Output[InventoryFilter]{
		OutputState: o.OutputState,
	}
}

// Prefix that an object must have to be included in the inventory results.
func (o InventoryFilterOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[InventoryFilter](o, func(v InventoryFilter) *string { return v.Prefix })
}

type InventorySchedule struct {
	// Specifies how frequently inventory results are produced. Valid values: `Daily`, `Weekly`.
	Frequency string `pulumi:"frequency"`
}

type InventoryScheduleArgs struct {
	// Specifies how frequently inventory results are produced. Valid values: `Daily`, `Weekly`.
	Frequency pulumix.Input[string] `pulumi:"frequency"`
}

func (InventoryScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InventorySchedule)(nil)).Elem()
}

func (i InventoryScheduleArgs) ToInventoryScheduleOutput() InventoryScheduleOutput {
	return i.ToInventoryScheduleOutputWithContext(context.Background())
}

func (i InventoryScheduleArgs) ToInventoryScheduleOutputWithContext(ctx context.Context) InventoryScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryScheduleOutput)
}

func (i *InventoryScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[*InventoryScheduleArgs] {
	return pulumix.Val(i)
}

type InventoryScheduleOutput struct{ *pulumi.OutputState }

func (InventoryScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InventorySchedule)(nil)).Elem()
}

func (o InventoryScheduleOutput) ToInventoryScheduleOutput() InventoryScheduleOutput {
	return o
}

func (o InventoryScheduleOutput) ToInventoryScheduleOutputWithContext(ctx context.Context) InventoryScheduleOutput {
	return o
}

func (o InventoryScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[InventorySchedule] {
	return pulumix.Output[InventorySchedule]{
		OutputState: o.OutputState,
	}
}

// Specifies how frequently inventory results are produced. Valid values: `Daily`, `Weekly`.
func (o InventoryScheduleOutput) Frequency() pulumix.Output[string] {
	return pulumix.Apply[InventorySchedule](o, func(v InventorySchedule) string { return v.Frequency })
}

type ObjectCopyGrant struct {
	// Email address of the grantee. Used only when `type` is `AmazonCustomerByEmail`.
	Email *string `pulumi:"email"`
	// Canonical user ID of the grantee. Used only when `type` is `CanonicalUser`.
	Id *string `pulumi:"id"`
	// List of permissions to grant to grantee. Valid values are `READ`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
	Permissions []string `pulumi:"permissions"`
	// Type of grantee. Valid values are `CanonicalUser`, `Group`, and `AmazonCustomerByEmail`.
	//
	// This configuration block has the following optional arguments (one of the three is required):
	Type string `pulumi:"type"`
	// URI of the grantee group. Used only when `type` is `Group`.
	Uri *string `pulumi:"uri"`
}

type ObjectCopyGrantArgs struct {
	// Email address of the grantee. Used only when `type` is `AmazonCustomerByEmail`.
	Email pulumix.Input[*string] `pulumi:"email"`
	// Canonical user ID of the grantee. Used only when `type` is `CanonicalUser`.
	Id pulumix.Input[*string] `pulumi:"id"`
	// List of permissions to grant to grantee. Valid values are `READ`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
	Permissions pulumix.Input[[]string] `pulumi:"permissions"`
	// Type of grantee. Valid values are `CanonicalUser`, `Group`, and `AmazonCustomerByEmail`.
	//
	// This configuration block has the following optional arguments (one of the three is required):
	Type pulumix.Input[string] `pulumi:"type"`
	// URI of the grantee group. Used only when `type` is `Group`.
	Uri pulumix.Input[*string] `pulumi:"uri"`
}

func (ObjectCopyGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectCopyGrant)(nil)).Elem()
}

func (i ObjectCopyGrantArgs) ToObjectCopyGrantOutput() ObjectCopyGrantOutput {
	return i.ToObjectCopyGrantOutputWithContext(context.Background())
}

func (i ObjectCopyGrantArgs) ToObjectCopyGrantOutputWithContext(ctx context.Context) ObjectCopyGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectCopyGrantOutput)
}

func (i *ObjectCopyGrantArgs) ToOutput(ctx context.Context) pulumix.Output[*ObjectCopyGrantArgs] {
	return pulumix.Val(i)
}

type ObjectCopyGrantOutput struct{ *pulumi.OutputState }

func (ObjectCopyGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectCopyGrant)(nil)).Elem()
}

func (o ObjectCopyGrantOutput) ToObjectCopyGrantOutput() ObjectCopyGrantOutput {
	return o
}

func (o ObjectCopyGrantOutput) ToObjectCopyGrantOutputWithContext(ctx context.Context) ObjectCopyGrantOutput {
	return o
}

func (o ObjectCopyGrantOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectCopyGrant] {
	return pulumix.Output[ObjectCopyGrant]{
		OutputState: o.OutputState,
	}
}

// Email address of the grantee. Used only when `type` is `AmazonCustomerByEmail`.
func (o ObjectCopyGrantOutput) Email() pulumix.Output[*string] {
	return pulumix.Apply[ObjectCopyGrant](o, func(v ObjectCopyGrant) *string { return v.Email })
}

// Canonical user ID of the grantee. Used only when `type` is `CanonicalUser`.
func (o ObjectCopyGrantOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[ObjectCopyGrant](o, func(v ObjectCopyGrant) *string { return v.Id })
}

// List of permissions to grant to grantee. Valid values are `READ`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
func (o ObjectCopyGrantOutput) Permissions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ObjectCopyGrant](o, func(v ObjectCopyGrant) []string { return v.Permissions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Type of grantee. Valid values are `CanonicalUser`, `Group`, and `AmazonCustomerByEmail`.
//
// This configuration block has the following optional arguments (one of the three is required):
func (o ObjectCopyGrantOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ObjectCopyGrant](o, func(v ObjectCopyGrant) string { return v.Type })
}

// URI of the grantee group. Used only when `type` is `Group`.
func (o ObjectCopyGrantOutput) Uri() pulumix.Output[*string] {
	return pulumix.Apply[ObjectCopyGrant](o, func(v ObjectCopyGrant) *string { return v.Uri })
}

func init() {
	pulumi.RegisterOutputType(AccessPointPublicAccessBlockConfigurationOutput{})
	pulumi.RegisterOutputType(AccessPointVpcConfigurationOutput{})
	pulumi.RegisterOutputType(AnalyticsConfigurationFilterOutput{})
	pulumi.RegisterOutputType(AnalyticsConfigurationStorageClassAnalysisOutput{})
	pulumi.RegisterOutputType(AnalyticsConfigurationStorageClassAnalysisDataExportOutput{})
	pulumi.RegisterOutputType(AnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutput{})
	pulumi.RegisterOutputType(AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutput{})
	pulumi.RegisterOutputType(BucketAclV2AccessControlPolicyOutput{})
	pulumi.RegisterOutputType(BucketAclV2AccessControlPolicyGrantOutput{})
	pulumi.RegisterOutputType(BucketAclV2AccessControlPolicyGrantGranteeOutput{})
	pulumi.RegisterOutputType(BucketAclV2AccessControlPolicyOwnerOutput{})
	pulumi.RegisterOutputType(BucketCorsConfigurationV2CorsRuleOutput{})
	pulumi.RegisterOutputType(BucketCorsRuleOutput{})
	pulumi.RegisterOutputType(BucketGrantOutput{})
	pulumi.RegisterOutputType(BucketIntelligentTieringConfigurationFilterOutput{})
	pulumi.RegisterOutputType(BucketIntelligentTieringConfigurationTieringOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2RuleOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2RuleExpirationOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2RuleFilterOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2RuleFilterAndOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2RuleFilterTagOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2RuleTransitionOutput{})
	pulumi.RegisterOutputType(BucketLifecycleRuleOutput{})
	pulumi.RegisterOutputType(BucketLifecycleRuleExpirationOutput{})
	pulumi.RegisterOutputType(BucketLifecycleRuleNoncurrentVersionExpirationOutput{})
	pulumi.RegisterOutputType(BucketLifecycleRuleNoncurrentVersionTransitionOutput{})
	pulumi.RegisterOutputType(BucketLifecycleRuleTransitionOutput{})
	pulumi.RegisterOutputType(BucketLoggingOutput{})
	pulumi.RegisterOutputType(BucketLoggingV2TargetGrantOutput{})
	pulumi.RegisterOutputType(BucketLoggingV2TargetGrantGranteeOutput{})
	pulumi.RegisterOutputType(BucketMetricFilterOutput{})
	pulumi.RegisterOutputType(BucketNotificationLambdaFunctionOutput{})
	pulumi.RegisterOutputType(BucketNotificationQueueOutput{})
	pulumi.RegisterOutputType(BucketNotificationTopicOutput{})
	pulumi.RegisterOutputType(BucketObjectLockConfigurationOutput{})
	pulumi.RegisterOutputType(BucketObjectLockConfigurationRuleOutput{})
	pulumi.RegisterOutputType(BucketObjectLockConfigurationRuleDefaultRetentionOutput{})
	pulumi.RegisterOutputType(BucketObjectLockConfigurationV2RuleOutput{})
	pulumi.RegisterOutputType(BucketObjectLockConfigurationV2RuleDefaultRetentionOutput{})
	pulumi.RegisterOutputType(BucketOwnershipControlsRuleOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleDeleteMarkerReplicationOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleDestinationOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleDestinationAccessControlTranslationOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleDestinationEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleDestinationMetricsOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleDestinationMetricsEventThresholdOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleDestinationReplicationTimeOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleDestinationReplicationTimeTimeOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleExistingObjectReplicationOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleFilterOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleFilterAndOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleFilterTagOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleSourceSelectionCriteriaOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModificationsOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigurationOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigurationRuleOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigurationRuleDestinationOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigurationRuleDestinationAccessControlTranslationOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigurationRuleDestinationMetricsOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigurationRuleDestinationReplicationTimeOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigurationRuleFilterOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigurationRuleSourceSelectionCriteriaOutput{})
	pulumi.RegisterOutputType(BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectsOutput{})
	pulumi.RegisterOutputType(BucketServerSideEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(BucketServerSideEncryptionConfigurationRuleOutput{})
	pulumi.RegisterOutputType(BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput{})
	pulumi.RegisterOutputType(BucketServerSideEncryptionConfigurationV2RuleOutput{})
	pulumi.RegisterOutputType(BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultOutput{})
	pulumi.RegisterOutputType(BucketV2CorsRuleOutput{})
	pulumi.RegisterOutputType(BucketV2GrantOutput{})
	pulumi.RegisterOutputType(BucketV2LifecycleRuleOutput{})
	pulumi.RegisterOutputType(BucketV2LifecycleRuleExpirationOutput{})
	pulumi.RegisterOutputType(BucketV2LifecycleRuleNoncurrentVersionExpirationOutput{})
	pulumi.RegisterOutputType(BucketV2LifecycleRuleNoncurrentVersionTransitionOutput{})
	pulumi.RegisterOutputType(BucketV2LifecycleRuleTransitionOutput{})
	pulumi.RegisterOutputType(BucketV2LoggingOutput{})
	pulumi.RegisterOutputType(BucketV2ObjectLockConfigurationOutput{})
	pulumi.RegisterOutputType(BucketV2ObjectLockConfigurationRuleOutput{})
	pulumi.RegisterOutputType(BucketV2ObjectLockConfigurationRuleDefaultRetentionOutput{})
	pulumi.RegisterOutputType(BucketV2ReplicationConfigurationOutput{})
	pulumi.RegisterOutputType(BucketV2ReplicationConfigurationRuleOutput{})
	pulumi.RegisterOutputType(BucketV2ReplicationConfigurationRuleDestinationOutput{})
	pulumi.RegisterOutputType(BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslationOutput{})
	pulumi.RegisterOutputType(BucketV2ReplicationConfigurationRuleDestinationMetricOutput{})
	pulumi.RegisterOutputType(BucketV2ReplicationConfigurationRuleDestinationReplicationTimeOutput{})
	pulumi.RegisterOutputType(BucketV2ReplicationConfigurationRuleFilterOutput{})
	pulumi.RegisterOutputType(BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaOutput{})
	pulumi.RegisterOutputType(BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjectOutput{})
	pulumi.RegisterOutputType(BucketV2ServerSideEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(BucketV2ServerSideEncryptionConfigurationRuleOutput{})
	pulumi.RegisterOutputType(BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultOutput{})
	pulumi.RegisterOutputType(BucketV2VersioningOutput{})
	pulumi.RegisterOutputType(BucketV2WebsiteOutput{})
	pulumi.RegisterOutputType(BucketVersioningOutput{})
	pulumi.RegisterOutputType(BucketVersioningV2VersioningConfigurationOutput{})
	pulumi.RegisterOutputType(BucketWebsiteOutput{})
	pulumi.RegisterOutputType(BucketWebsiteConfigurationV2ErrorDocumentOutput{})
	pulumi.RegisterOutputType(BucketWebsiteConfigurationV2IndexDocumentOutput{})
	pulumi.RegisterOutputType(BucketWebsiteConfigurationV2RedirectAllRequestsToOutput{})
	pulumi.RegisterOutputType(BucketWebsiteConfigurationV2RoutingRuleOutput{})
	pulumi.RegisterOutputType(BucketWebsiteConfigurationV2RoutingRuleConditionOutput{})
	pulumi.RegisterOutputType(BucketWebsiteConfigurationV2RoutingRuleRedirectOutput{})
	pulumi.RegisterOutputType(InventoryDestinationOutput{})
	pulumi.RegisterOutputType(InventoryDestinationBucketOutput{})
	pulumi.RegisterOutputType(InventoryDestinationBucketEncryptionOutput{})
	pulumi.RegisterOutputType(InventoryDestinationBucketEncryptionSseKmsOutput{})
	pulumi.RegisterOutputType(InventoryDestinationBucketEncryptionSseS3Output{})
	pulumi.RegisterOutputType(InventoryFilterOutput{})
	pulumi.RegisterOutputType(InventoryScheduleOutput{})
	pulumi.RegisterOutputType(ObjectCopyGrantOutput{})
}
