// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about multiple Elastic File System (EFS) Access Points.
func GetAccessPoints(ctx *pulumi.Context, args *GetAccessPointsArgs, opts ...pulumi.InvokeOption) (*GetAccessPointsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAccessPointsResult
	err := ctx.Invoke("aws:efs/getAccessPoints:getAccessPoints", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessPoints.
type GetAccessPointsArgs struct {
	// EFS File System identifier.
	FileSystemId string `pulumi:"fileSystemId"`
}

// A collection of values returned by getAccessPoints.
type GetAccessPointsResult struct {
	// Set of Amazon Resource Names (ARNs).
	Arns         []string `pulumi:"arns"`
	FileSystemId string   `pulumi:"fileSystemId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set of identifiers.
	Ids []string `pulumi:"ids"`
}

func GetAccessPointsOutput(ctx *pulumi.Context, args GetAccessPointsOutputArgs, opts ...pulumi.InvokeOption) GetAccessPointsResultOutput {
	outputResult := pulumix.ApplyErr[*GetAccessPointsArgs](args.ToOutput(), func(plainArgs *GetAccessPointsArgs) (*GetAccessPointsResult, error) {
		return GetAccessPoints(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetAccessPointsResultOutput, *GetAccessPointsResult](outputResult)
}

// A collection of arguments for invoking getAccessPoints.
type GetAccessPointsOutputArgs struct {
	// EFS File System identifier.
	FileSystemId pulumix.Input[string] `pulumi:"fileSystemId"`
}

func (args GetAccessPointsOutputArgs) ToOutput() pulumix.Output[*GetAccessPointsArgs] {
	allArgs := pulumix.All(
		args.FileSystemId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetAccessPointsArgs {
		return &GetAccessPointsArgs{
			FileSystemId: resolvedArgs[0].(string),
		}
	})
}

type GetAccessPointsResultOutput struct{ *pulumi.OutputState }

func (GetAccessPointsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessPointsResult)(nil)).Elem()
}

func (o GetAccessPointsResultOutput) ToOutput(context.Context) pulumix.Output[*GetAccessPointsResult] {
	return pulumix.Output[*GetAccessPointsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetAccessPointsResultOutput) Arns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetAccessPointsResult](o, func(v *GetAccessPointsResult) []string { return v.Arns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetAccessPointsResultOutput) FileSystemId() pulumix.Output[string] {
	return pulumix.Apply[*GetAccessPointsResult](o, func(v *GetAccessPointsResult) string { return v.FileSystemId })
}

func (o GetAccessPointsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetAccessPointsResult](o, func(v *GetAccessPointsResult) string { return v.Id })
}

func (o GetAccessPointsResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetAccessPointsResult](o, func(v *GetAccessPointsResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
