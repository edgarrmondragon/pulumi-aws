// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Load Balancer resource.
//
// > **Note:** `alb.LoadBalancer` is known as `lb.LoadBalancer`. The functionality is identical.
type LoadBalancer struct {
	pulumi.CustomResourceState

	// An Access Logs block. Access Logs documented below.
	AccessLogs pulumix.GPtrOutput[LoadBalancerAccessLogs, LoadBalancerAccessLogsOutput] `pulumi:"accessLogs"`
	// The ARN of the load balancer (matches `id`).
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ARN suffix for use with CloudWatch Metrics.
	ArnSuffix pulumix.Output[string] `pulumi:"arnSuffix"`
	// The ID of the customer owned ipv4 pool to use for this load balancer.
	CustomerOwnedIpv4Pool pulumix.Output[*string] `pulumi:"customerOwnedIpv4Pool"`
	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode pulumix.Output[*string] `pulumi:"desyncMitigationMode"`
	// The DNS name of the load balancer.
	DnsName pulumix.Output[string] `pulumi:"dnsName"`
	// Indicates whether HTTP headers with header fields that are not valid are removed by the load balancer (true) or routed to targets (false). The default is false. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. Only valid for Load Balancers of type `application`.
	DropInvalidHeaderFields pulumix.Output[*bool] `pulumi:"dropInvalidHeaderFields"`
	// If true, cross-zone load balancing of the load balancer will be enabled. For `network` and `gateway` type load balancers, this feature is disabled by default (`false`). For `application` load balancer this feature is always enabled (`true`) and cannot be disabled. Defaults to `false`.
	EnableCrossZoneLoadBalancing pulumix.Output[*bool] `pulumi:"enableCrossZoneLoadBalancing"`
	// If true, deletion of the load balancer will be disabled via the AWS API. This will prevent this provider from deleting the load balancer. Defaults to `false`.
	EnableDeletionProtection pulumix.Output[*bool] `pulumi:"enableDeletionProtection"`
	// Indicates whether HTTP/2 is enabled in `application` load balancers. Defaults to `true`.
	EnableHttp2 pulumix.Output[*bool] `pulumi:"enableHttp2"`
	// Indicates whether the two headers (`x-amzn-tls-version` and `x-amzn-tls-cipher-suite`), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. Only valid for Load Balancers of type `application`. Defaults to `false`
	EnableTlsVersionAndCipherSuiteHeaders pulumix.Output[*bool] `pulumi:"enableTlsVersionAndCipherSuiteHeaders"`
	// Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. Defaults to `false`.
	EnableWafFailOpen pulumix.Output[*bool] `pulumi:"enableWafFailOpen"`
	// Indicates whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer in `application` load balancers. Defaults to `false`.
	EnableXffClientPort pulumix.Output[*bool] `pulumi:"enableXffClientPort"`
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`. Default: 60.
	IdleTimeout pulumix.Output[*int] `pulumi:"idleTimeout"`
	// If true, the LB will be internal. Defaults to `false`.
	Internal pulumix.Output[bool] `pulumi:"internal"`
	// The type of IP addresses used by the subnets for your load balancer. The possible values are `ipv4` and `dualstack`.
	IpAddressType pulumix.Output[string] `pulumi:"ipAddressType"`
	// The type of load balancer to create. Possible values are `application`, `gateway`, or `network`. The default value is `application`.
	LoadBalancerType pulumix.Output[*string] `pulumi:"loadBalancerType"`
	// The name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters,
	// must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. If not specified,
	// this provider will autogenerate a name beginning with `tf-lb`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[*string] `pulumi:"namePrefix"`
	// Indicates whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. Defaults to `false`.
	PreserveHostHeader pulumix.Output[*bool] `pulumi:"preserveHostHeader"`
	// A list of security group IDs to assign to the LB. Only valid for Load Balancers of type `application` or `network`. For load balancers of type `network` security groups cannot be added if none are currently present, and cannot all be removed once added. If either of these conditions are met, this will force a recreation of the resource.
	SecurityGroups pulumix.ArrayOutput[string] `pulumi:"securityGroups"`
	// A subnet mapping block as documented below.
	SubnetMappings pulumix.GArrayOutput[LoadBalancerSubnetMapping, LoadBalancerSubnetMappingOutput] `pulumi:"subnetMappings"`
	// A list of subnet IDs to attach to the LB. Subnets
	// cannot be updated for Load Balancers of type `network`. Changing this value
	// for load balancers of type `network` will force a recreation of the resource.
	Subnets pulumix.ArrayOutput[string] `pulumi:"subnets"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	VpcId   pulumix.Output[string]    `pulumi:"vpcId"`
	// Determines how the load balancer modifies the `X-Forwarded-For` header in the HTTP request before sending the request to the target. The possible values are `append`, `preserve`, and `remove`. Only valid for Load Balancers of type `application`. The default is `append`.
	XffHeaderProcessingMode pulumix.Output[*string] `pulumi:"xffHeaderProcessingMode"`
	// The canonical hosted zone ID of the load balancer (to be used in a Route 53 Alias record).
	ZoneId pulumix.Output[string] `pulumi:"zoneId"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		args = &LoadBalancerArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:applicationloadbalancing/loadBalancer:LoadBalancer"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("aws:alb/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("aws:alb/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs *LoadBalancerAccessLogs `pulumi:"accessLogs"`
	// The ARN of the load balancer (matches `id`).
	Arn *string `pulumi:"arn"`
	// The ARN suffix for use with CloudWatch Metrics.
	ArnSuffix *string `pulumi:"arnSuffix"`
	// The ID of the customer owned ipv4 pool to use for this load balancer.
	CustomerOwnedIpv4Pool *string `pulumi:"customerOwnedIpv4Pool"`
	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode *string `pulumi:"desyncMitigationMode"`
	// The DNS name of the load balancer.
	DnsName *string `pulumi:"dnsName"`
	// Indicates whether HTTP headers with header fields that are not valid are removed by the load balancer (true) or routed to targets (false). The default is false. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. Only valid for Load Balancers of type `application`.
	DropInvalidHeaderFields *bool `pulumi:"dropInvalidHeaderFields"`
	// If true, cross-zone load balancing of the load balancer will be enabled. For `network` and `gateway` type load balancers, this feature is disabled by default (`false`). For `application` load balancer this feature is always enabled (`true`) and cannot be disabled. Defaults to `false`.
	EnableCrossZoneLoadBalancing *bool `pulumi:"enableCrossZoneLoadBalancing"`
	// If true, deletion of the load balancer will be disabled via the AWS API. This will prevent this provider from deleting the load balancer. Defaults to `false`.
	EnableDeletionProtection *bool `pulumi:"enableDeletionProtection"`
	// Indicates whether HTTP/2 is enabled in `application` load balancers. Defaults to `true`.
	EnableHttp2 *bool `pulumi:"enableHttp2"`
	// Indicates whether the two headers (`x-amzn-tls-version` and `x-amzn-tls-cipher-suite`), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. Only valid for Load Balancers of type `application`. Defaults to `false`
	EnableTlsVersionAndCipherSuiteHeaders *bool `pulumi:"enableTlsVersionAndCipherSuiteHeaders"`
	// Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. Defaults to `false`.
	EnableWafFailOpen *bool `pulumi:"enableWafFailOpen"`
	// Indicates whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer in `application` load balancers. Defaults to `false`.
	EnableXffClientPort *bool `pulumi:"enableXffClientPort"`
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`. Default: 60.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// If true, the LB will be internal. Defaults to `false`.
	Internal *bool `pulumi:"internal"`
	// The type of IP addresses used by the subnets for your load balancer. The possible values are `ipv4` and `dualstack`.
	IpAddressType *string `pulumi:"ipAddressType"`
	// The type of load balancer to create. Possible values are `application`, `gateway`, or `network`. The default value is `application`.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// The name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters,
	// must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. If not specified,
	// this provider will autogenerate a name beginning with `tf-lb`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Indicates whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. Defaults to `false`.
	PreserveHostHeader *bool `pulumi:"preserveHostHeader"`
	// A list of security group IDs to assign to the LB. Only valid for Load Balancers of type `application` or `network`. For load balancers of type `network` security groups cannot be added if none are currently present, and cannot all be removed once added. If either of these conditions are met, this will force a recreation of the resource.
	SecurityGroups []string `pulumi:"securityGroups"`
	// A subnet mapping block as documented below.
	SubnetMappings []LoadBalancerSubnetMapping `pulumi:"subnetMappings"`
	// A list of subnet IDs to attach to the LB. Subnets
	// cannot be updated for Load Balancers of type `network`. Changing this value
	// for load balancers of type `network` will force a recreation of the resource.
	Subnets []string `pulumi:"subnets"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	VpcId   *string           `pulumi:"vpcId"`
	// Determines how the load balancer modifies the `X-Forwarded-For` header in the HTTP request before sending the request to the target. The possible values are `append`, `preserve`, and `remove`. Only valid for Load Balancers of type `application`. The default is `append`.
	XffHeaderProcessingMode *string `pulumi:"xffHeaderProcessingMode"`
	// The canonical hosted zone ID of the load balancer (to be used in a Route 53 Alias record).
	ZoneId *string `pulumi:"zoneId"`
}

type LoadBalancerState struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs pulumix.Input[*LoadBalancerAccessLogsArgs]
	// The ARN of the load balancer (matches `id`).
	Arn pulumix.Input[*string]
	// The ARN suffix for use with CloudWatch Metrics.
	ArnSuffix pulumix.Input[*string]
	// The ID of the customer owned ipv4 pool to use for this load balancer.
	CustomerOwnedIpv4Pool pulumix.Input[*string]
	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode pulumix.Input[*string]
	// The DNS name of the load balancer.
	DnsName pulumix.Input[*string]
	// Indicates whether HTTP headers with header fields that are not valid are removed by the load balancer (true) or routed to targets (false). The default is false. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. Only valid for Load Balancers of type `application`.
	DropInvalidHeaderFields pulumix.Input[*bool]
	// If true, cross-zone load balancing of the load balancer will be enabled. For `network` and `gateway` type load balancers, this feature is disabled by default (`false`). For `application` load balancer this feature is always enabled (`true`) and cannot be disabled. Defaults to `false`.
	EnableCrossZoneLoadBalancing pulumix.Input[*bool]
	// If true, deletion of the load balancer will be disabled via the AWS API. This will prevent this provider from deleting the load balancer. Defaults to `false`.
	EnableDeletionProtection pulumix.Input[*bool]
	// Indicates whether HTTP/2 is enabled in `application` load balancers. Defaults to `true`.
	EnableHttp2 pulumix.Input[*bool]
	// Indicates whether the two headers (`x-amzn-tls-version` and `x-amzn-tls-cipher-suite`), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. Only valid for Load Balancers of type `application`. Defaults to `false`
	EnableTlsVersionAndCipherSuiteHeaders pulumix.Input[*bool]
	// Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. Defaults to `false`.
	EnableWafFailOpen pulumix.Input[*bool]
	// Indicates whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer in `application` load balancers. Defaults to `false`.
	EnableXffClientPort pulumix.Input[*bool]
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`. Default: 60.
	IdleTimeout pulumix.Input[*int]
	// If true, the LB will be internal. Defaults to `false`.
	Internal pulumix.Input[*bool]
	// The type of IP addresses used by the subnets for your load balancer. The possible values are `ipv4` and `dualstack`.
	IpAddressType pulumix.Input[*string]
	// The type of load balancer to create. Possible values are `application`, `gateway`, or `network`. The default value is `application`.
	LoadBalancerType pulumix.Input[*string]
	// The name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters,
	// must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. If not specified,
	// this provider will autogenerate a name beginning with `tf-lb`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Indicates whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. Defaults to `false`.
	PreserveHostHeader pulumix.Input[*bool]
	// A list of security group IDs to assign to the LB. Only valid for Load Balancers of type `application` or `network`. For load balancers of type `network` security groups cannot be added if none are currently present, and cannot all be removed once added. If either of these conditions are met, this will force a recreation of the resource.
	SecurityGroups pulumix.Input[[]string]
	// A subnet mapping block as documented below.
	SubnetMappings pulumix.Input[[]*LoadBalancerSubnetMappingArgs]
	// A list of subnet IDs to attach to the LB. Subnets
	// cannot be updated for Load Balancers of type `network`. Changing this value
	// for load balancers of type `network` will force a recreation of the resource.
	Subnets pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	VpcId   pulumix.Input[*string]
	// Determines how the load balancer modifies the `X-Forwarded-For` header in the HTTP request before sending the request to the target. The possible values are `append`, `preserve`, and `remove`. Only valid for Load Balancers of type `application`. The default is `append`.
	XffHeaderProcessingMode pulumix.Input[*string]
	// The canonical hosted zone ID of the load balancer (to be used in a Route 53 Alias record).
	ZoneId pulumix.Input[*string]
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs *LoadBalancerAccessLogs `pulumi:"accessLogs"`
	// The ID of the customer owned ipv4 pool to use for this load balancer.
	CustomerOwnedIpv4Pool *string `pulumi:"customerOwnedIpv4Pool"`
	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode *string `pulumi:"desyncMitigationMode"`
	// Indicates whether HTTP headers with header fields that are not valid are removed by the load balancer (true) or routed to targets (false). The default is false. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. Only valid for Load Balancers of type `application`.
	DropInvalidHeaderFields *bool `pulumi:"dropInvalidHeaderFields"`
	// If true, cross-zone load balancing of the load balancer will be enabled. For `network` and `gateway` type load balancers, this feature is disabled by default (`false`). For `application` load balancer this feature is always enabled (`true`) and cannot be disabled. Defaults to `false`.
	EnableCrossZoneLoadBalancing *bool `pulumi:"enableCrossZoneLoadBalancing"`
	// If true, deletion of the load balancer will be disabled via the AWS API. This will prevent this provider from deleting the load balancer. Defaults to `false`.
	EnableDeletionProtection *bool `pulumi:"enableDeletionProtection"`
	// Indicates whether HTTP/2 is enabled in `application` load balancers. Defaults to `true`.
	EnableHttp2 *bool `pulumi:"enableHttp2"`
	// Indicates whether the two headers (`x-amzn-tls-version` and `x-amzn-tls-cipher-suite`), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. Only valid for Load Balancers of type `application`. Defaults to `false`
	EnableTlsVersionAndCipherSuiteHeaders *bool `pulumi:"enableTlsVersionAndCipherSuiteHeaders"`
	// Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. Defaults to `false`.
	EnableWafFailOpen *bool `pulumi:"enableWafFailOpen"`
	// Indicates whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer in `application` load balancers. Defaults to `false`.
	EnableXffClientPort *bool `pulumi:"enableXffClientPort"`
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`. Default: 60.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// If true, the LB will be internal. Defaults to `false`.
	Internal *bool `pulumi:"internal"`
	// The type of IP addresses used by the subnets for your load balancer. The possible values are `ipv4` and `dualstack`.
	IpAddressType *string `pulumi:"ipAddressType"`
	// The type of load balancer to create. Possible values are `application`, `gateway`, or `network`. The default value is `application`.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// The name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters,
	// must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. If not specified,
	// this provider will autogenerate a name beginning with `tf-lb`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Indicates whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. Defaults to `false`.
	PreserveHostHeader *bool `pulumi:"preserveHostHeader"`
	// A list of security group IDs to assign to the LB. Only valid for Load Balancers of type `application` or `network`. For load balancers of type `network` security groups cannot be added if none are currently present, and cannot all be removed once added. If either of these conditions are met, this will force a recreation of the resource.
	SecurityGroups []string `pulumi:"securityGroups"`
	// A subnet mapping block as documented below.
	SubnetMappings []LoadBalancerSubnetMapping `pulumi:"subnetMappings"`
	// A list of subnet IDs to attach to the LB. Subnets
	// cannot be updated for Load Balancers of type `network`. Changing this value
	// for load balancers of type `network` will force a recreation of the resource.
	Subnets []string `pulumi:"subnets"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Determines how the load balancer modifies the `X-Forwarded-For` header in the HTTP request before sending the request to the target. The possible values are `append`, `preserve`, and `remove`. Only valid for Load Balancers of type `application`. The default is `append`.
	XffHeaderProcessingMode *string `pulumi:"xffHeaderProcessingMode"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs pulumix.Input[*LoadBalancerAccessLogsArgs]
	// The ID of the customer owned ipv4 pool to use for this load balancer.
	CustomerOwnedIpv4Pool pulumix.Input[*string]
	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode pulumix.Input[*string]
	// Indicates whether HTTP headers with header fields that are not valid are removed by the load balancer (true) or routed to targets (false). The default is false. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. Only valid for Load Balancers of type `application`.
	DropInvalidHeaderFields pulumix.Input[*bool]
	// If true, cross-zone load balancing of the load balancer will be enabled. For `network` and `gateway` type load balancers, this feature is disabled by default (`false`). For `application` load balancer this feature is always enabled (`true`) and cannot be disabled. Defaults to `false`.
	EnableCrossZoneLoadBalancing pulumix.Input[*bool]
	// If true, deletion of the load balancer will be disabled via the AWS API. This will prevent this provider from deleting the load balancer. Defaults to `false`.
	EnableDeletionProtection pulumix.Input[*bool]
	// Indicates whether HTTP/2 is enabled in `application` load balancers. Defaults to `true`.
	EnableHttp2 pulumix.Input[*bool]
	// Indicates whether the two headers (`x-amzn-tls-version` and `x-amzn-tls-cipher-suite`), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. Only valid for Load Balancers of type `application`. Defaults to `false`
	EnableTlsVersionAndCipherSuiteHeaders pulumix.Input[*bool]
	// Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. Defaults to `false`.
	EnableWafFailOpen pulumix.Input[*bool]
	// Indicates whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer in `application` load balancers. Defaults to `false`.
	EnableXffClientPort pulumix.Input[*bool]
	// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`. Default: 60.
	IdleTimeout pulumix.Input[*int]
	// If true, the LB will be internal. Defaults to `false`.
	Internal pulumix.Input[*bool]
	// The type of IP addresses used by the subnets for your load balancer. The possible values are `ipv4` and `dualstack`.
	IpAddressType pulumix.Input[*string]
	// The type of load balancer to create. Possible values are `application`, `gateway`, or `network`. The default value is `application`.
	LoadBalancerType pulumix.Input[*string]
	// The name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters,
	// must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. If not specified,
	// this provider will autogenerate a name beginning with `tf-lb`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Indicates whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. Defaults to `false`.
	PreserveHostHeader pulumix.Input[*bool]
	// A list of security group IDs to assign to the LB. Only valid for Load Balancers of type `application` or `network`. For load balancers of type `network` security groups cannot be added if none are currently present, and cannot all be removed once added. If either of these conditions are met, this will force a recreation of the resource.
	SecurityGroups pulumix.Input[[]string]
	// A subnet mapping block as documented below.
	SubnetMappings pulumix.Input[[]*LoadBalancerSubnetMappingArgs]
	// A list of subnet IDs to attach to the LB. Subnets
	// cannot be updated for Load Balancers of type `network`. Changing this value
	// for load balancers of type `network` will force a recreation of the resource.
	Subnets pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Determines how the load balancer modifies the `X-Forwarded-For` header in the HTTP request before sending the request to the target. The possible values are `append`, `preserve`, and `remove`. Only valid for Load Balancers of type `application`. The default is `append`.
	XffHeaderProcessingMode pulumix.Input[*string]
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancer] {
	return pulumix.Output[LoadBalancer]{
		OutputState: o.OutputState,
	}
}

// An Access Logs block. Access Logs documented below.
func (o LoadBalancerOutput) AccessLogs() pulumix.GPtrOutput[LoadBalancerAccessLogs, LoadBalancerAccessLogsOutput] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.GPtrOutput[LoadBalancerAccessLogs, LoadBalancerAccessLogsOutput] {
		return v.AccessLogs
	})
	unwrapped := pulumix.Flatten[*LoadBalancerAccessLogs, pulumix.GPtrOutput[LoadBalancerAccessLogs, LoadBalancerAccessLogsOutput]](value)
	return pulumix.GPtrOutput[LoadBalancerAccessLogs, LoadBalancerAccessLogsOutput]{OutputState: unwrapped.OutputState}
}

// The ARN of the load balancer (matches `id`).
func (o LoadBalancerOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN suffix for use with CloudWatch Metrics.
func (o LoadBalancerOutput) ArnSuffix() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.ArnSuffix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the customer owned ipv4 pool to use for this load balancer.
func (o LoadBalancerOutput) CustomerOwnedIpv4Pool() pulumix.Output[*string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*string] { return v.CustomerOwnedIpv4Pool })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
func (o LoadBalancerOutput) DesyncMitigationMode() pulumix.Output[*string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*string] { return v.DesyncMitigationMode })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The DNS name of the load balancer.
func (o LoadBalancerOutput) DnsName() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.DnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether HTTP headers with header fields that are not valid are removed by the load balancer (true) or routed to targets (false). The default is false. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. Only valid for Load Balancers of type `application`.
func (o LoadBalancerOutput) DropInvalidHeaderFields() pulumix.Output[*bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*bool] { return v.DropInvalidHeaderFields })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// If true, cross-zone load balancing of the load balancer will be enabled. For `network` and `gateway` type load balancers, this feature is disabled by default (`false`). For `application` load balancer this feature is always enabled (`true`) and cannot be disabled. Defaults to `false`.
func (o LoadBalancerOutput) EnableCrossZoneLoadBalancing() pulumix.Output[*bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*bool] { return v.EnableCrossZoneLoadBalancing })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// If true, deletion of the load balancer will be disabled via the AWS API. This will prevent this provider from deleting the load balancer. Defaults to `false`.
func (o LoadBalancerOutput) EnableDeletionProtection() pulumix.Output[*bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*bool] { return v.EnableDeletionProtection })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Indicates whether HTTP/2 is enabled in `application` load balancers. Defaults to `true`.
func (o LoadBalancerOutput) EnableHttp2() pulumix.Output[*bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*bool] { return v.EnableHttp2 })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Indicates whether the two headers (`x-amzn-tls-version` and `x-amzn-tls-cipher-suite`), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. Only valid for Load Balancers of type `application`. Defaults to `false`
func (o LoadBalancerOutput) EnableTlsVersionAndCipherSuiteHeaders() pulumix.Output[*bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*bool] { return v.EnableTlsVersionAndCipherSuiteHeaders })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. Defaults to `false`.
func (o LoadBalancerOutput) EnableWafFailOpen() pulumix.Output[*bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*bool] { return v.EnableWafFailOpen })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Indicates whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer in `application` load balancers. Defaults to `false`.
func (o LoadBalancerOutput) EnableXffClientPort() pulumix.Output[*bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*bool] { return v.EnableXffClientPort })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`. Default: 60.
func (o LoadBalancerOutput) IdleTimeout() pulumix.Output[*int] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*int] { return v.IdleTimeout })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// If true, the LB will be internal. Defaults to `false`.
func (o LoadBalancerOutput) Internal() pulumix.Output[bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[bool] { return v.Internal })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The type of IP addresses used by the subnets for your load balancer. The possible values are `ipv4` and `dualstack`.
func (o LoadBalancerOutput) IpAddressType() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.IpAddressType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of load balancer to create. Possible values are `application`, `gateway`, or `network`. The default value is `application`.
func (o LoadBalancerOutput) LoadBalancerType() pulumix.Output[*string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*string] { return v.LoadBalancerType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters,
// must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. If not specified,
// this provider will autogenerate a name beginning with `tf-lb`.
func (o LoadBalancerOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o LoadBalancerOutput) NamePrefix() pulumix.Output[*string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*string] { return v.NamePrefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Indicates whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. Defaults to `false`.
func (o LoadBalancerOutput) PreserveHostHeader() pulumix.Output[*bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*bool] { return v.PreserveHostHeader })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A list of security group IDs to assign to the LB. Only valid for Load Balancers of type `application` or `network`. For load balancers of type `network` security groups cannot be added if none are currently present, and cannot all be removed once added. If either of these conditions are met, this will force a recreation of the resource.
func (o LoadBalancerOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.ArrayOutput[string] { return v.SecurityGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A subnet mapping block as documented below.
func (o LoadBalancerOutput) SubnetMappings() pulumix.GArrayOutput[LoadBalancerSubnetMapping, LoadBalancerSubnetMappingOutput] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.GArrayOutput[LoadBalancerSubnetMapping, LoadBalancerSubnetMappingOutput] {
		return v.SubnetMappings
	})
	unwrapped := pulumix.Flatten[[]LoadBalancerSubnetMapping, pulumix.GArrayOutput[LoadBalancerSubnetMapping, LoadBalancerSubnetMappingOutput]](value)
	return pulumix.GArrayOutput[LoadBalancerSubnetMapping, LoadBalancerSubnetMappingOutput]{OutputState: unwrapped.OutputState}
}

// A list of subnet IDs to attach to the LB. Subnets
// cannot be updated for Load Balancers of type `network`. Changing this value
// for load balancers of type `network` will force a recreation of the resource.
func (o LoadBalancerOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.ArrayOutput[string] { return v.Subnets })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LoadBalancerOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LoadBalancerOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o LoadBalancerOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Determines how the load balancer modifies the `X-Forwarded-For` header in the HTTP request before sending the request to the target. The possible values are `append`, `preserve`, and `remove`. Only valid for Load Balancers of type `application`. The default is `append`.
func (o LoadBalancerOutput) XffHeaderProcessingMode() pulumix.Output[*string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*string] { return v.XffHeaderProcessingMode })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The canonical hosted zone ID of the load balancer (to be used in a Route 53 Alias record).
func (o LoadBalancerOutput) ZoneId() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.ZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerOutput{})
}
