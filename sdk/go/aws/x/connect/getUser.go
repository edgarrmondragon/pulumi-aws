// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Connect User.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("aws:connect/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific User by name
	Name *string `pulumi:"name"`
	// A map of tags to assign to the User.
	Tags map[string]string `pulumi:"tags"`
	// Returns information on a specific User by User id
	UserId *string `pulumi:"userId"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// The Amazon Resource Name (ARN) of the User.
	Arn string `pulumi:"arn"`
	// The identifier of the user account in the directory used for identity management.
	DirectoryUserId string `pulumi:"directoryUserId"`
	// The identifier of the hierarchy group for the user.
	HierarchyGroupId string `pulumi:"hierarchyGroupId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A block that contains information about the identity of the user. Documented below.
	IdentityInfos []GetUserIdentityInfo `pulumi:"identityInfos"`
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId string `pulumi:"instanceId"`
	Name       string `pulumi:"name"`
	// A block that contains information about the phone settings for the user. Documented below.
	PhoneConfigs []GetUserPhoneConfig `pulumi:"phoneConfigs"`
	// The identifier of the routing profile for the user.
	RoutingProfileId string `pulumi:"routingProfileId"`
	// A list of identifiers for the security profiles for the user.
	SecurityProfileIds []string `pulumi:"securityProfileIds"`
	// A map of tags to assign to the User.
	Tags   map[string]string `pulumi:"tags"`
	UserId string            `pulumi:"userId"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	outputResult := pulumix.ApplyErr[*LookupUserArgs](args.ToOutput(), func(plainArgs *LookupUserArgs) (*LookupUserResult, error) {
		return LookupUser(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupUserResultOutput, *LookupUserResult](outputResult)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
	// Returns information on a specific User by name
	Name pulumix.Input[*string] `pulumi:"name"`
	// A map of tags to assign to the User.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Returns information on a specific User by User id
	UserId pulumix.Input[*string] `pulumi:"userId"`
}

func (args LookupUserOutputArgs) ToOutput() pulumix.Output[*LookupUserArgs] {
	allArgs := pulumix.All(
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.UserId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupUserArgs {
		return &LookupUserArgs{
			InstanceId: resolvedArgs[0].(string),
			Name:       resolvedArgs[1].(*string),
			Tags:       resolvedArgs[2].(map[string]string),
			UserId:     resolvedArgs[3].(*string),
		}
	})
}

type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToOutput(context.Context) pulumix.Output[*LookupUserResult] {
	return pulumix.Output[*LookupUserResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupUserResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Arn })
}

func (o LookupUserResultOutput) DirectoryUserId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.DirectoryUserId })
}

func (o LookupUserResultOutput) HierarchyGroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.HierarchyGroupId })
}

func (o LookupUserResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Id })
}

func (o LookupUserResultOutput) IdentityInfos() pulumix.GArrayOutput[GetUserIdentityInfo, GetUserIdentityInfoOutput] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []GetUserIdentityInfo { return v.IdentityInfos })
	return pulumix.GArrayOutput[GetUserIdentityInfo, GetUserIdentityInfoOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.InstanceId })
}

func (o LookupUserResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Name })
}

func (o LookupUserResultOutput) PhoneConfigs() pulumix.GArrayOutput[GetUserPhoneConfig, GetUserPhoneConfigOutput] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []GetUserPhoneConfig { return v.PhoneConfigs })
	return pulumix.GArrayOutput[GetUserPhoneConfig, GetUserPhoneConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) RoutingProfileId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.RoutingProfileId })
}

func (o LookupUserResultOutput) SecurityProfileIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []string { return v.SecurityProfileIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) UserId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.UserId })
}
