// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about an EC2 Dedicated Host.
func LookupDedicatedHost(ctx *pulumi.Context, args *LookupDedicatedHostArgs, opts ...pulumi.InvokeOption) (*LookupDedicatedHostResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDedicatedHostResult
	err := ctx.Invoke("aws:ec2/getDedicatedHost:getDedicatedHost", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDedicatedHost.
type LookupDedicatedHostArgs struct {
	// Configuration block. Detailed below.
	Filters []GetDedicatedHostFilter `pulumi:"filters"`
	// ID of the Dedicated Host.
	HostId *string           `pulumi:"hostId"`
	Tags   map[string]string `pulumi:"tags"`
}

// A collection of values returned by getDedicatedHost.
type LookupDedicatedHostResult struct {
	// ARN of the Dedicated Host.
	Arn string `pulumi:"arn"`
	// The ID of the Outpost hardware asset on which the Dedicated Host is allocated.
	AssetId string `pulumi:"assetId"`
	// Whether auto-placement is on or off.
	AutoPlacement string `pulumi:"autoPlacement"`
	// Availability Zone of the Dedicated Host.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Number of cores on the Dedicated Host.
	Cores   int                      `pulumi:"cores"`
	Filters []GetDedicatedHostFilter `pulumi:"filters"`
	HostId  string                   `pulumi:"hostId"`
	// Whether host recovery is enabled or disabled for the Dedicated Host.
	HostRecovery string `pulumi:"hostRecovery"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Instance family supported by the Dedicated Host. For example, "m5".
	InstanceFamily string `pulumi:"instanceFamily"`
	// Instance type supported by the Dedicated Host. For example, "m5.large". If the host supports multiple instance types, no instanceType is returned.
	InstanceType string `pulumi:"instanceType"`
	// ARN of the AWS Outpost on which the Dedicated Host is allocated.
	OutpostArn string `pulumi:"outpostArn"`
	// ID of the AWS account that owns the Dedicated Host.
	OwnerId string `pulumi:"ownerId"`
	// Number of sockets on the Dedicated Host.
	Sockets int               `pulumi:"sockets"`
	Tags    map[string]string `pulumi:"tags"`
	// Total number of vCPUs on the Dedicated Host.
	TotalVcpus int `pulumi:"totalVcpus"`
}

func LookupDedicatedHostOutput(ctx *pulumi.Context, args LookupDedicatedHostOutputArgs, opts ...pulumi.InvokeOption) LookupDedicatedHostResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDedicatedHostArgs](args.ToOutput(), func(plainArgs *LookupDedicatedHostArgs) (*LookupDedicatedHostResult, error) {
		return LookupDedicatedHost(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDedicatedHostResultOutput, *LookupDedicatedHostResult](outputResult)
}

// A collection of arguments for invoking getDedicatedHost.
type LookupDedicatedHostOutputArgs struct {
	// Configuration block. Detailed below.
	Filters pulumix.Input[[]*GetDedicatedHostFilterArgs] `pulumi:"filters"`
	// ID of the Dedicated Host.
	HostId pulumix.Input[*string]           `pulumi:"hostId"`
	Tags   pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupDedicatedHostOutputArgs) ToOutput() pulumix.Output[*LookupDedicatedHostArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.HostId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDedicatedHostArgs {
		return &LookupDedicatedHostArgs{
			Filters: resolvedArgs[0].([]GetDedicatedHostFilter),
			HostId:  resolvedArgs[1].(*string),
			Tags:    resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupDedicatedHostResultOutput struct{ *pulumi.OutputState }

func (LookupDedicatedHostResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDedicatedHostResult)(nil)).Elem()
}

func (o LookupDedicatedHostResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDedicatedHostResult] {
	return pulumix.Output[*LookupDedicatedHostResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDedicatedHostResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.Arn })
}

func (o LookupDedicatedHostResultOutput) AssetId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.AssetId })
}

func (o LookupDedicatedHostResultOutput) AutoPlacement() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.AutoPlacement })
}

func (o LookupDedicatedHostResultOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.AvailabilityZone })
}

func (o LookupDedicatedHostResultOutput) Cores() pulumix.Output[int] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) int { return v.Cores })
}

func (o LookupDedicatedHostResultOutput) Filters() pulumix.GArrayOutput[GetDedicatedHostFilter, GetDedicatedHostFilterOutput] {
	value := pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) []GetDedicatedHostFilter { return v.Filters })
	return pulumix.GArrayOutput[GetDedicatedHostFilter, GetDedicatedHostFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDedicatedHostResultOutput) HostId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.HostId })
}

func (o LookupDedicatedHostResultOutput) HostRecovery() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.HostRecovery })
}

func (o LookupDedicatedHostResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.Id })
}

func (o LookupDedicatedHostResultOutput) InstanceFamily() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.InstanceFamily })
}

func (o LookupDedicatedHostResultOutput) InstanceType() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.InstanceType })
}

func (o LookupDedicatedHostResultOutput) OutpostArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.OutpostArn })
}

func (o LookupDedicatedHostResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) string { return v.OwnerId })
}

func (o LookupDedicatedHostResultOutput) Sockets() pulumix.Output[int] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) int { return v.Sockets })
}

func (o LookupDedicatedHostResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupDedicatedHostResultOutput) TotalVcpus() pulumix.Output[int] {
	return pulumix.Apply[*LookupDedicatedHostResult](o, func(v *LookupDedicatedHostResult) int { return v.TotalVcpus })
}
