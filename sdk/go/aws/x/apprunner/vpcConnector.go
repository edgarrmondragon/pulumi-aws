// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apprunner

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an App Runner VPC Connector.
type VpcConnector struct {
	pulumi.CustomResourceState

	// ARN of VPC connector.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// List of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets. If not specified, App Runner uses the default security group of the Amazon VPC. The default security group allows all outbound traffic.
	SecurityGroups pulumix.ArrayOutput[string] `pulumi:"securityGroups"`
	// Current state of the VPC connector. If the status of a connector revision is INACTIVE, it was deleted and can't be used. Inactive connector revisions are permanently removed some time after they are deleted.
	Status pulumix.Output[string] `pulumi:"status"`
	// List of IDs of subnets that App Runner should use when it associates your service with a custom Amazon VPC. Specify IDs of subnets of a single Amazon VPC. App Runner determines the Amazon VPC from the subnets you specify.
	Subnets pulumix.ArrayOutput[string] `pulumi:"subnets"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Name for the VPC connector.
	VpcConnectorName pulumix.Output[string] `pulumi:"vpcConnectorName"`
	// The revision of VPC connector. It's unique among all the active connectors ("Status": "ACTIVE") that share the same Name.
	VpcConnectorRevision pulumix.Output[int] `pulumi:"vpcConnectorRevision"`
}

// NewVpcConnector registers a new resource with the given unique name, arguments, and options.
func NewVpcConnector(ctx *pulumi.Context,
	name string, args *VpcConnectorArgs, opts ...pulumi.ResourceOption) (*VpcConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecurityGroups == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroups'")
	}
	if args.Subnets == nil {
		return nil, errors.New("invalid value for required argument 'Subnets'")
	}
	if args.VpcConnectorName == nil {
		return nil, errors.New("invalid value for required argument 'VpcConnectorName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcConnector
	err := ctx.RegisterResource("aws:apprunner/vpcConnector:VpcConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcConnector gets an existing VpcConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcConnectorState, opts ...pulumi.ResourceOption) (*VpcConnector, error) {
	var resource VpcConnector
	err := ctx.ReadResource("aws:apprunner/vpcConnector:VpcConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcConnector resources.
type vpcConnectorState struct {
	// ARN of VPC connector.
	Arn *string `pulumi:"arn"`
	// List of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets. If not specified, App Runner uses the default security group of the Amazon VPC. The default security group allows all outbound traffic.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Current state of the VPC connector. If the status of a connector revision is INACTIVE, it was deleted and can't be used. Inactive connector revisions are permanently removed some time after they are deleted.
	Status *string `pulumi:"status"`
	// List of IDs of subnets that App Runner should use when it associates your service with a custom Amazon VPC. Specify IDs of subnets of a single Amazon VPC. App Runner determines the Amazon VPC from the subnets you specify.
	Subnets []string `pulumi:"subnets"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Name for the VPC connector.
	VpcConnectorName *string `pulumi:"vpcConnectorName"`
	// The revision of VPC connector. It's unique among all the active connectors ("Status": "ACTIVE") that share the same Name.
	VpcConnectorRevision *int `pulumi:"vpcConnectorRevision"`
}

type VpcConnectorState struct {
	// ARN of VPC connector.
	Arn pulumix.Input[*string]
	// List of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets. If not specified, App Runner uses the default security group of the Amazon VPC. The default security group allows all outbound traffic.
	SecurityGroups pulumix.Input[[]string]
	// Current state of the VPC connector. If the status of a connector revision is INACTIVE, it was deleted and can't be used. Inactive connector revisions are permanently removed some time after they are deleted.
	Status pulumix.Input[*string]
	// List of IDs of subnets that App Runner should use when it associates your service with a custom Amazon VPC. Specify IDs of subnets of a single Amazon VPC. App Runner determines the Amazon VPC from the subnets you specify.
	Subnets pulumix.Input[[]string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Name for the VPC connector.
	VpcConnectorName pulumix.Input[*string]
	// The revision of VPC connector. It's unique among all the active connectors ("Status": "ACTIVE") that share the same Name.
	VpcConnectorRevision pulumix.Input[*int]
}

func (VpcConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectorState)(nil)).Elem()
}

type vpcConnectorArgs struct {
	// List of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets. If not specified, App Runner uses the default security group of the Amazon VPC. The default security group allows all outbound traffic.
	SecurityGroups []string `pulumi:"securityGroups"`
	// List of IDs of subnets that App Runner should use when it associates your service with a custom Amazon VPC. Specify IDs of subnets of a single Amazon VPC. App Runner determines the Amazon VPC from the subnets you specify.
	Subnets []string `pulumi:"subnets"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Name for the VPC connector.
	VpcConnectorName string `pulumi:"vpcConnectorName"`
}

// The set of arguments for constructing a VpcConnector resource.
type VpcConnectorArgs struct {
	// List of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets. If not specified, App Runner uses the default security group of the Amazon VPC. The default security group allows all outbound traffic.
	SecurityGroups pulumix.Input[[]string]
	// List of IDs of subnets that App Runner should use when it associates your service with a custom Amazon VPC. Specify IDs of subnets of a single Amazon VPC. App Runner determines the Amazon VPC from the subnets you specify.
	Subnets pulumix.Input[[]string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Name for the VPC connector.
	VpcConnectorName pulumix.Input[string]
}

func (VpcConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectorArgs)(nil)).Elem()
}

type VpcConnectorOutput struct{ *pulumi.OutputState }

func (VpcConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnector)(nil)).Elem()
}

func (o VpcConnectorOutput) ToVpcConnectorOutput() VpcConnectorOutput {
	return o
}

func (o VpcConnectorOutput) ToVpcConnectorOutputWithContext(ctx context.Context) VpcConnectorOutput {
	return o
}

func (o VpcConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[VpcConnector] {
	return pulumix.Output[VpcConnector]{
		OutputState: o.OutputState,
	}
}

// ARN of VPC connector.
func (o VpcConnectorOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnector](o, func(v VpcConnector) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets. If not specified, App Runner uses the default security group of the Amazon VPC. The default security group allows all outbound traffic.
func (o VpcConnectorOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcConnector](o, func(v VpcConnector) pulumix.ArrayOutput[string] { return v.SecurityGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Current state of the VPC connector. If the status of a connector revision is INACTIVE, it was deleted and can't be used. Inactive connector revisions are permanently removed some time after they are deleted.
func (o VpcConnectorOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnector](o, func(v VpcConnector) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of IDs of subnets that App Runner should use when it associates your service with a custom Amazon VPC. Specify IDs of subnets of a single Amazon VPC. App Runner determines the Amazon VPC from the subnets you specify.
func (o VpcConnectorOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcConnector](o, func(v VpcConnector) pulumix.ArrayOutput[string] { return v.Subnets })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcConnectorOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcConnector](o, func(v VpcConnector) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcConnectorOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcConnector](o, func(v VpcConnector) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Name for the VPC connector.
func (o VpcConnectorOutput) VpcConnectorName() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnector](o, func(v VpcConnector) pulumix.Output[string] { return v.VpcConnectorName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The revision of VPC connector. It's unique among all the active connectors ("Status": "ACTIVE") that share the same Name.
func (o VpcConnectorOutput) VpcConnectorRevision() pulumix.Output[int] {
	value := pulumix.Apply[VpcConnector](o, func(v VpcConnector) pulumix.Output[int] { return v.VpcConnectorRevision })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcConnectorOutput{})
}
