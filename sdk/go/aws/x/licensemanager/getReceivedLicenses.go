// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can be used to get a set of license ARNs matching a filter.
func GetReceivedLicenses(ctx *pulumi.Context, args *GetReceivedLicensesArgs, opts ...pulumi.InvokeOption) (*GetReceivedLicensesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetReceivedLicensesResult
	err := ctx.Invoke("aws:licensemanager/getReceivedLicenses:getReceivedLicenses", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReceivedLicenses.
type GetReceivedLicensesArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters []GetReceivedLicensesFilter `pulumi:"filters"`
}

// A collection of values returned by getReceivedLicenses.
type GetReceivedLicensesResult struct {
	// List of all the license ARNs found.
	Arns    []string                    `pulumi:"arns"`
	Filters []GetReceivedLicensesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetReceivedLicensesOutput(ctx *pulumi.Context, args GetReceivedLicensesOutputArgs, opts ...pulumi.InvokeOption) GetReceivedLicensesResultOutput {
	outputResult := pulumix.ApplyErr[*GetReceivedLicensesArgs](args.ToOutput(), func(plainArgs *GetReceivedLicensesArgs) (*GetReceivedLicensesResult, error) {
		return GetReceivedLicenses(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetReceivedLicensesResultOutput, *GetReceivedLicensesResult](outputResult)
}

// A collection of arguments for invoking getReceivedLicenses.
type GetReceivedLicensesOutputArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters pulumix.Input[[]*GetReceivedLicensesFilterArgs] `pulumi:"filters"`
}

func (args GetReceivedLicensesOutputArgs) ToOutput() pulumix.Output[*GetReceivedLicensesArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetReceivedLicensesArgs {
		return &GetReceivedLicensesArgs{
			Filters: resolvedArgs[0].([]GetReceivedLicensesFilter),
		}
	})
}

type GetReceivedLicensesResultOutput struct{ *pulumi.OutputState }

func (GetReceivedLicensesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicensesResult)(nil)).Elem()
}

func (o GetReceivedLicensesResultOutput) ToOutput(context.Context) pulumix.Output[*GetReceivedLicensesResult] {
	return pulumix.Output[*GetReceivedLicensesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicensesResultOutput) Arns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetReceivedLicensesResult](o, func(v *GetReceivedLicensesResult) []string { return v.Arns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetReceivedLicensesResultOutput) Filters() pulumix.GArrayOutput[GetReceivedLicensesFilter, GetReceivedLicensesFilterOutput] {
	value := pulumix.Apply[*GetReceivedLicensesResult](o, func(v *GetReceivedLicensesResult) []GetReceivedLicensesFilter { return v.Filters })
	return pulumix.GArrayOutput[GetReceivedLicensesFilter, GetReceivedLicensesFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetReceivedLicensesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicensesResult](o, func(v *GetReceivedLicensesResult) string { return v.Id })
}
