// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chimesdkmediapipelines

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Chime SDK Media Pipelines Media Insights Pipeline Configuration.
// Consult the [Call analytics developer guide](https://docs.aws.amazon.com/chime-sdk/latest/dg/call-analytics.html) for more detailed information about usage.
type MediaInsightsPipelineConfiguration struct {
	pulumi.CustomResourceState

	// ARN of the Media Insights Pipeline Configuration.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Collection of processors and sinks to transform media and deliver data.
	Elements pulumix.GArrayOutput[MediaInsightsPipelineConfigurationElement, MediaInsightsPipelineConfigurationElementOutput] `pulumi:"elements"`
	// Configuration name.
	Name pulumix.Output[string] `pulumi:"name"`
	// Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
	RealTimeAlertConfiguration pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput] `pulumi:"realTimeAlertConfiguration"`
	// ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
	ResourceAccessRoleArn pulumix.Output[string] `pulumi:"resourceAccessRoleArn"`
	// Key-value map of tags for the resource.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewMediaInsightsPipelineConfiguration registers a new resource with the given unique name, arguments, and options.
func NewMediaInsightsPipelineConfiguration(ctx *pulumi.Context,
	name string, args *MediaInsightsPipelineConfigurationArgs, opts ...pulumi.ResourceOption) (*MediaInsightsPipelineConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Elements == nil {
		return nil, errors.New("invalid value for required argument 'Elements'")
	}
	if args.ResourceAccessRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ResourceAccessRoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MediaInsightsPipelineConfiguration
	err := ctx.RegisterResource("aws:chimesdkmediapipelines/mediaInsightsPipelineConfiguration:MediaInsightsPipelineConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaInsightsPipelineConfiguration gets an existing MediaInsightsPipelineConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaInsightsPipelineConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaInsightsPipelineConfigurationState, opts ...pulumi.ResourceOption) (*MediaInsightsPipelineConfiguration, error) {
	var resource MediaInsightsPipelineConfiguration
	err := ctx.ReadResource("aws:chimesdkmediapipelines/mediaInsightsPipelineConfiguration:MediaInsightsPipelineConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaInsightsPipelineConfiguration resources.
type mediaInsightsPipelineConfigurationState struct {
	// ARN of the Media Insights Pipeline Configuration.
	Arn *string `pulumi:"arn"`
	// Collection of processors and sinks to transform media and deliver data.
	Elements []MediaInsightsPipelineConfigurationElement `pulumi:"elements"`
	// Configuration name.
	Name *string `pulumi:"name"`
	// Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
	RealTimeAlertConfiguration *MediaInsightsPipelineConfigurationRealTimeAlertConfiguration `pulumi:"realTimeAlertConfiguration"`
	// ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
	ResourceAccessRoleArn *string `pulumi:"resourceAccessRoleArn"`
	// Key-value map of tags for the resource.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type MediaInsightsPipelineConfigurationState struct {
	// ARN of the Media Insights Pipeline Configuration.
	Arn pulumix.Input[*string]
	// Collection of processors and sinks to transform media and deliver data.
	Elements pulumix.Input[[]*MediaInsightsPipelineConfigurationElementArgs]
	// Configuration name.
	Name pulumix.Input[*string]
	// Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
	RealTimeAlertConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs]
	// ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
	ResourceAccessRoleArn pulumix.Input[*string]
	// Key-value map of tags for the resource.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (MediaInsightsPipelineConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaInsightsPipelineConfigurationState)(nil)).Elem()
}

type mediaInsightsPipelineConfigurationArgs struct {
	// Collection of processors and sinks to transform media and deliver data.
	Elements []MediaInsightsPipelineConfigurationElement `pulumi:"elements"`
	// Configuration name.
	Name *string `pulumi:"name"`
	// Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
	RealTimeAlertConfiguration *MediaInsightsPipelineConfigurationRealTimeAlertConfiguration `pulumi:"realTimeAlertConfiguration"`
	// ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
	ResourceAccessRoleArn string `pulumi:"resourceAccessRoleArn"`
	// Key-value map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a MediaInsightsPipelineConfiguration resource.
type MediaInsightsPipelineConfigurationArgs struct {
	// Collection of processors and sinks to transform media and deliver data.
	Elements pulumix.Input[[]*MediaInsightsPipelineConfigurationElementArgs]
	// Configuration name.
	Name pulumix.Input[*string]
	// Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
	RealTimeAlertConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs]
	// ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
	ResourceAccessRoleArn pulumix.Input[string]
	// Key-value map of tags for the resource.
	Tags pulumix.Input[map[string]string]
}

func (MediaInsightsPipelineConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaInsightsPipelineConfigurationArgs)(nil)).Elem()
}

type MediaInsightsPipelineConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationOutput) ToMediaInsightsPipelineConfigurationOutput() MediaInsightsPipelineConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationOutput) ToMediaInsightsPipelineConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfiguration]{
		OutputState: o.OutputState,
	}
}

// ARN of the Media Insights Pipeline Configuration.
func (o MediaInsightsPipelineConfigurationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[MediaInsightsPipelineConfiguration](o, func(v MediaInsightsPipelineConfiguration) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Collection of processors and sinks to transform media and deliver data.
func (o MediaInsightsPipelineConfigurationOutput) Elements() pulumix.GArrayOutput[MediaInsightsPipelineConfigurationElement, MediaInsightsPipelineConfigurationElementOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfiguration](o, func(v MediaInsightsPipelineConfiguration) pulumix.GArrayOutput[MediaInsightsPipelineConfigurationElement, MediaInsightsPipelineConfigurationElementOutput] {
		return v.Elements
	})
	unwrapped := pulumix.Flatten[[]MediaInsightsPipelineConfigurationElement, pulumix.GArrayOutput[MediaInsightsPipelineConfigurationElement, MediaInsightsPipelineConfigurationElementOutput]](value)
	return pulumix.GArrayOutput[MediaInsightsPipelineConfigurationElement, MediaInsightsPipelineConfigurationElementOutput]{OutputState: unwrapped.OutputState}
}

// Configuration name.
func (o MediaInsightsPipelineConfigurationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MediaInsightsPipelineConfiguration](o, func(v MediaInsightsPipelineConfiguration) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
func (o MediaInsightsPipelineConfigurationOutput) RealTimeAlertConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfiguration](o, func(v MediaInsightsPipelineConfiguration) pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput] {
		return v.RealTimeAlertConfiguration
	})
	unwrapped := pulumix.Flatten[*MediaInsightsPipelineConfigurationRealTimeAlertConfiguration, pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput]](value)
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
func (o MediaInsightsPipelineConfigurationOutput) ResourceAccessRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[MediaInsightsPipelineConfiguration](o, func(v MediaInsightsPipelineConfiguration) pulumix.Output[string] { return v.ResourceAccessRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of tags for the resource.
func (o MediaInsightsPipelineConfigurationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[MediaInsightsPipelineConfiguration](o, func(v MediaInsightsPipelineConfiguration) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o MediaInsightsPipelineConfigurationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[MediaInsightsPipelineConfiguration](o, func(v MediaInsightsPipelineConfiguration) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationOutput{})
}
