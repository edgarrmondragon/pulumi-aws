// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoverycontrol

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Route 53 Recovery Control Config Cluster.
type Cluster struct {
	pulumi.CustomResourceState

	// ARN of the cluster
	Arn pulumix.Output[string] `pulumi:"arn"`
	// List of 5 endpoints in 5 regions that can be used to talk to the cluster. See below.
	ClusterEndpoints pulumix.GArrayOutput[ClusterClusterEndpoint, ClusterClusterEndpointOutput] `pulumi:"clusterEndpoints"`
	// Unique name describing the cluster.
	Name pulumix.Output[string] `pulumi:"name"`
	// Status of cluster. `PENDING` when it is being created, `PENDING_DELETION` when it is being deleted and `DEPLOYED` otherwise.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws:route53recoverycontrol/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:route53recoverycontrol/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// ARN of the cluster
	Arn *string `pulumi:"arn"`
	// List of 5 endpoints in 5 regions that can be used to talk to the cluster. See below.
	ClusterEndpoints []ClusterClusterEndpoint `pulumi:"clusterEndpoints"`
	// Unique name describing the cluster.
	Name *string `pulumi:"name"`
	// Status of cluster. `PENDING` when it is being created, `PENDING_DELETION` when it is being deleted and `DEPLOYED` otherwise.
	Status *string `pulumi:"status"`
}

type ClusterState struct {
	// ARN of the cluster
	Arn pulumix.Input[*string]
	// List of 5 endpoints in 5 regions that can be used to talk to the cluster. See below.
	ClusterEndpoints pulumix.Input[[]*ClusterClusterEndpointArgs]
	// Unique name describing the cluster.
	Name pulumix.Input[*string]
	// Status of cluster. `PENDING` when it is being created, `PENDING_DELETION` when it is being deleted and `DEPLOYED` otherwise.
	Status pulumix.Input[*string]
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Unique name describing the cluster.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Unique name describing the cluster.
	Name pulumix.Input[*string]
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToOutput(ctx context.Context) pulumix.Output[Cluster] {
	return pulumix.Output[Cluster]{
		OutputState: o.OutputState,
	}
}

// ARN of the cluster
func (o ClusterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of 5 endpoints in 5 regions that can be used to talk to the cluster. See below.
func (o ClusterOutput) ClusterEndpoints() pulumix.GArrayOutput[ClusterClusterEndpoint, ClusterClusterEndpointOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GArrayOutput[ClusterClusterEndpoint, ClusterClusterEndpointOutput] {
		return v.ClusterEndpoints
	})
	unwrapped := pulumix.Flatten[[]ClusterClusterEndpoint, pulumix.GArrayOutput[ClusterClusterEndpoint, ClusterClusterEndpointOutput]](value)
	return pulumix.GArrayOutput[ClusterClusterEndpoint, ClusterClusterEndpointOutput]{OutputState: unwrapped.OutputState}
}

// Unique name describing the cluster.
func (o ClusterOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of cluster. `PENDING` when it is being created, `PENDING_DELETION` when it is being deleted and `DEPLOYED` otherwise.
func (o ClusterOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
