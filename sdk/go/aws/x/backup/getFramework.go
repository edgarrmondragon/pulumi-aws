// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information on an existing backup framework.
func LookupFramework(ctx *pulumi.Context, args *LookupFrameworkArgs, opts ...pulumi.InvokeOption) (*LookupFrameworkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFrameworkResult
	err := ctx.Invoke("aws:backup/getFramework:getFramework", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFramework.
type LookupFrameworkArgs struct {
	// Backup framework name.
	Name string `pulumi:"name"`
	// Tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getFramework.
type LookupFrameworkResult struct {
	// ARN of the backup framework.
	Arn string `pulumi:"arn"`
	// One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
	Controls []GetFrameworkControl `pulumi:"controls"`
	// Date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC).
	CreationTime string `pulumi:"creationTime"`
	// Deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED`| `FAILED`.
	DeploymentStatus string `pulumi:"deploymentStatus"`
	// Description of the framework.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of a parameter, for example, BackupPlanFrequency.
	Name string `pulumi:"name"`
	// Framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. The statuses are: `ACTIVE`, `PARTIALLY_ACTIVE`, `INACTIVE`, `UNAVAILABLE`. For more information refer to the [AWS documentation for Framework Status](https://docs.aws.amazon.com/aws-backup/latest/devguide/API_DescribeFramework.html#Backup-DescribeFramework-response-FrameworkStatus)
	Status string `pulumi:"status"`
	// Tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags map[string]string `pulumi:"tags"`
}

func LookupFrameworkOutput(ctx *pulumi.Context, args LookupFrameworkOutputArgs, opts ...pulumi.InvokeOption) LookupFrameworkResultOutput {
	outputResult := pulumix.ApplyErr[*LookupFrameworkArgs](args.ToOutput(), func(plainArgs *LookupFrameworkArgs) (*LookupFrameworkResult, error) {
		return LookupFramework(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupFrameworkResultOutput, *LookupFrameworkResult](outputResult)
}

// A collection of arguments for invoking getFramework.
type LookupFrameworkOutputArgs struct {
	// Backup framework name.
	Name pulumix.Input[string] `pulumi:"name"`
	// Tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupFrameworkOutputArgs) ToOutput() pulumix.Output[*LookupFrameworkArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupFrameworkArgs {
		return &LookupFrameworkArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupFrameworkResultOutput struct{ *pulumi.OutputState }

func (LookupFrameworkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFrameworkResult)(nil)).Elem()
}

func (o LookupFrameworkResultOutput) ToOutput(context.Context) pulumix.Output[*LookupFrameworkResult] {
	return pulumix.Output[*LookupFrameworkResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupFrameworkResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.Arn })
}

func (o LookupFrameworkResultOutput) Controls() pulumix.GArrayOutput[GetFrameworkControl, GetFrameworkControlOutput] {
	value := pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) []GetFrameworkControl { return v.Controls })
	return pulumix.GArrayOutput[GetFrameworkControl, GetFrameworkControlOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupFrameworkResultOutput) CreationTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.CreationTime })
}

func (o LookupFrameworkResultOutput) DeploymentStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.DeploymentStatus })
}

func (o LookupFrameworkResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.Description })
}

func (o LookupFrameworkResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.Id })
}

func (o LookupFrameworkResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.Name })
}

func (o LookupFrameworkResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.Status })
}

func (o LookupFrameworkResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
