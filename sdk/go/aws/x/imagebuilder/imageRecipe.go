// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Image Builder Image Recipe.
type ImageRecipe struct {
	pulumi.CustomResourceState

	// (Required) Amazon Resource Name (ARN) of the image recipe.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Configuration block(s) with block device mappings for the image recipe. Detailed below.
	BlockDeviceMappings pulumix.GArrayOutput[ImageRecipeBlockDeviceMapping, ImageRecipeBlockDeviceMappingOutput] `pulumi:"blockDeviceMappings"`
	// Ordered configuration block(s) with components for the image recipe. Detailed below.
	Components pulumix.GArrayOutput[ImageRecipeComponent, ImageRecipeComponentOutput] `pulumi:"components"`
	// Date the image recipe was created.
	DateCreated pulumix.Output[string] `pulumi:"dateCreated"`
	// Description of the image recipe.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Name of the image recipe.
	Name pulumix.Output[string] `pulumi:"name"`
	// Owner of the image recipe.
	Owner pulumix.Output[string] `pulumi:"owner"`
	// The image recipe uses this image as a base from which to build your customized image. The value can be the base image ARN or an AMI ID.
	ParentImage pulumix.Output[string] `pulumi:"parentImage"`
	// Platform of the image recipe.
	Platform pulumix.Output[string] `pulumi:"platform"`
	// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
	SystemsManagerAgent pulumix.GPtrOutput[ImageRecipeSystemsManagerAgent, ImageRecipeSystemsManagerAgentOutput] `pulumi:"systemsManagerAgent"`
	// Key-value map of resource tags for the image recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
	UserDataBase64 pulumix.Output[string] `pulumi:"userDataBase64"`
	// The semantic version of the image recipe, which specifies the version in the following format, with numeric values in each position to indicate a specific version: major.minor.patch. For example: 1.0.0.
	//
	// The following attributes are optional:
	Version pulumix.Output[string] `pulumi:"version"`
	// The working directory to be used during build and test workflows.
	WorkingDirectory pulumix.Output[*string] `pulumi:"workingDirectory"`
}

// NewImageRecipe registers a new resource with the given unique name, arguments, and options.
func NewImageRecipe(ctx *pulumi.Context,
	name string, args *ImageRecipeArgs, opts ...pulumi.ResourceOption) (*ImageRecipe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Components == nil {
		return nil, errors.New("invalid value for required argument 'Components'")
	}
	if args.ParentImage == nil {
		return nil, errors.New("invalid value for required argument 'ParentImage'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageRecipe
	err := ctx.RegisterResource("aws:imagebuilder/imageRecipe:ImageRecipe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageRecipe gets an existing ImageRecipe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageRecipe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageRecipeState, opts ...pulumi.ResourceOption) (*ImageRecipe, error) {
	var resource ImageRecipe
	err := ctx.ReadResource("aws:imagebuilder/imageRecipe:ImageRecipe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageRecipe resources.
type imageRecipeState struct {
	// (Required) Amazon Resource Name (ARN) of the image recipe.
	Arn *string `pulumi:"arn"`
	// Configuration block(s) with block device mappings for the image recipe. Detailed below.
	BlockDeviceMappings []ImageRecipeBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// Ordered configuration block(s) with components for the image recipe. Detailed below.
	Components []ImageRecipeComponent `pulumi:"components"`
	// Date the image recipe was created.
	DateCreated *string `pulumi:"dateCreated"`
	// Description of the image recipe.
	Description *string `pulumi:"description"`
	// Name of the image recipe.
	Name *string `pulumi:"name"`
	// Owner of the image recipe.
	Owner *string `pulumi:"owner"`
	// The image recipe uses this image as a base from which to build your customized image. The value can be the base image ARN or an AMI ID.
	ParentImage *string `pulumi:"parentImage"`
	// Platform of the image recipe.
	Platform *string `pulumi:"platform"`
	// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
	SystemsManagerAgent *ImageRecipeSystemsManagerAgent `pulumi:"systemsManagerAgent"`
	// Key-value map of resource tags for the image recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
	UserDataBase64 *string `pulumi:"userDataBase64"`
	// The semantic version of the image recipe, which specifies the version in the following format, with numeric values in each position to indicate a specific version: major.minor.patch. For example: 1.0.0.
	//
	// The following attributes are optional:
	Version *string `pulumi:"version"`
	// The working directory to be used during build and test workflows.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

type ImageRecipeState struct {
	// (Required) Amazon Resource Name (ARN) of the image recipe.
	Arn pulumix.Input[*string]
	// Configuration block(s) with block device mappings for the image recipe. Detailed below.
	BlockDeviceMappings pulumix.Input[[]*ImageRecipeBlockDeviceMappingArgs]
	// Ordered configuration block(s) with components for the image recipe. Detailed below.
	Components pulumix.Input[[]*ImageRecipeComponentArgs]
	// Date the image recipe was created.
	DateCreated pulumix.Input[*string]
	// Description of the image recipe.
	Description pulumix.Input[*string]
	// Name of the image recipe.
	Name pulumix.Input[*string]
	// Owner of the image recipe.
	Owner pulumix.Input[*string]
	// The image recipe uses this image as a base from which to build your customized image. The value can be the base image ARN or an AMI ID.
	ParentImage pulumix.Input[*string]
	// Platform of the image recipe.
	Platform pulumix.Input[*string]
	// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
	SystemsManagerAgent pulumix.Input[*ImageRecipeSystemsManagerAgentArgs]
	// Key-value map of resource tags for the image recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
	UserDataBase64 pulumix.Input[*string]
	// The semantic version of the image recipe, which specifies the version in the following format, with numeric values in each position to indicate a specific version: major.minor.patch. For example: 1.0.0.
	//
	// The following attributes are optional:
	Version pulumix.Input[*string]
	// The working directory to be used during build and test workflows.
	WorkingDirectory pulumix.Input[*string]
}

func (ImageRecipeState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRecipeState)(nil)).Elem()
}

type imageRecipeArgs struct {
	// Configuration block(s) with block device mappings for the image recipe. Detailed below.
	BlockDeviceMappings []ImageRecipeBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// Ordered configuration block(s) with components for the image recipe. Detailed below.
	Components []ImageRecipeComponent `pulumi:"components"`
	// Description of the image recipe.
	Description *string `pulumi:"description"`
	// Name of the image recipe.
	Name *string `pulumi:"name"`
	// The image recipe uses this image as a base from which to build your customized image. The value can be the base image ARN or an AMI ID.
	ParentImage string `pulumi:"parentImage"`
	// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
	SystemsManagerAgent *ImageRecipeSystemsManagerAgent `pulumi:"systemsManagerAgent"`
	// Key-value map of resource tags for the image recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
	UserDataBase64 *string `pulumi:"userDataBase64"`
	// The semantic version of the image recipe, which specifies the version in the following format, with numeric values in each position to indicate a specific version: major.minor.patch. For example: 1.0.0.
	//
	// The following attributes are optional:
	Version string `pulumi:"version"`
	// The working directory to be used during build and test workflows.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

// The set of arguments for constructing a ImageRecipe resource.
type ImageRecipeArgs struct {
	// Configuration block(s) with block device mappings for the image recipe. Detailed below.
	BlockDeviceMappings pulumix.Input[[]*ImageRecipeBlockDeviceMappingArgs]
	// Ordered configuration block(s) with components for the image recipe. Detailed below.
	Components pulumix.Input[[]*ImageRecipeComponentArgs]
	// Description of the image recipe.
	Description pulumix.Input[*string]
	// Name of the image recipe.
	Name pulumix.Input[*string]
	// The image recipe uses this image as a base from which to build your customized image. The value can be the base image ARN or an AMI ID.
	ParentImage pulumix.Input[string]
	// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
	SystemsManagerAgent pulumix.Input[*ImageRecipeSystemsManagerAgentArgs]
	// Key-value map of resource tags for the image recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
	UserDataBase64 pulumix.Input[*string]
	// The semantic version of the image recipe, which specifies the version in the following format, with numeric values in each position to indicate a specific version: major.minor.patch. For example: 1.0.0.
	//
	// The following attributes are optional:
	Version pulumix.Input[string]
	// The working directory to be used during build and test workflows.
	WorkingDirectory pulumix.Input[*string]
}

func (ImageRecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRecipeArgs)(nil)).Elem()
}

type ImageRecipeOutput struct{ *pulumi.OutputState }

func (ImageRecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipe)(nil)).Elem()
}

func (o ImageRecipeOutput) ToImageRecipeOutput() ImageRecipeOutput {
	return o
}

func (o ImageRecipeOutput) ToImageRecipeOutputWithContext(ctx context.Context) ImageRecipeOutput {
	return o
}

func (o ImageRecipeOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipe] {
	return pulumix.Output[ImageRecipe]{
		OutputState: o.OutputState,
	}
}

// (Required) Amazon Resource Name (ARN) of the image recipe.
func (o ImageRecipeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block(s) with block device mappings for the image recipe. Detailed below.
func (o ImageRecipeOutput) BlockDeviceMappings() pulumix.GArrayOutput[ImageRecipeBlockDeviceMapping, ImageRecipeBlockDeviceMappingOutput] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.GArrayOutput[ImageRecipeBlockDeviceMapping, ImageRecipeBlockDeviceMappingOutput] {
		return v.BlockDeviceMappings
	})
	unwrapped := pulumix.Flatten[[]ImageRecipeBlockDeviceMapping, pulumix.GArrayOutput[ImageRecipeBlockDeviceMapping, ImageRecipeBlockDeviceMappingOutput]](value)
	return pulumix.GArrayOutput[ImageRecipeBlockDeviceMapping, ImageRecipeBlockDeviceMappingOutput]{OutputState: unwrapped.OutputState}
}

// Ordered configuration block(s) with components for the image recipe. Detailed below.
func (o ImageRecipeOutput) Components() pulumix.GArrayOutput[ImageRecipeComponent, ImageRecipeComponentOutput] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.GArrayOutput[ImageRecipeComponent, ImageRecipeComponentOutput] {
		return v.Components
	})
	unwrapped := pulumix.Flatten[[]ImageRecipeComponent, pulumix.GArrayOutput[ImageRecipeComponent, ImageRecipeComponentOutput]](value)
	return pulumix.GArrayOutput[ImageRecipeComponent, ImageRecipeComponentOutput]{OutputState: unwrapped.OutputState}
}

// Date the image recipe was created.
func (o ImageRecipeOutput) DateCreated() pulumix.Output[string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.Output[string] { return v.DateCreated })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the image recipe.
func (o ImageRecipeOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the image recipe.
func (o ImageRecipeOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Owner of the image recipe.
func (o ImageRecipeOutput) Owner() pulumix.Output[string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.Output[string] { return v.Owner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The image recipe uses this image as a base from which to build your customized image. The value can be the base image ARN or an AMI ID.
func (o ImageRecipeOutput) ParentImage() pulumix.Output[string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.Output[string] { return v.ParentImage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Platform of the image recipe.
func (o ImageRecipeOutput) Platform() pulumix.Output[string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.Output[string] { return v.Platform })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
func (o ImageRecipeOutput) SystemsManagerAgent() pulumix.GPtrOutput[ImageRecipeSystemsManagerAgent, ImageRecipeSystemsManagerAgentOutput] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.GPtrOutput[ImageRecipeSystemsManagerAgent, ImageRecipeSystemsManagerAgentOutput] {
		return v.SystemsManagerAgent
	})
	unwrapped := pulumix.Flatten[*ImageRecipeSystemsManagerAgent, pulumix.GPtrOutput[ImageRecipeSystemsManagerAgent, ImageRecipeSystemsManagerAgentOutput]](value)
	return pulumix.GPtrOutput[ImageRecipeSystemsManagerAgent, ImageRecipeSystemsManagerAgentOutput]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags for the image recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ImageRecipeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ImageRecipeOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
func (o ImageRecipeOutput) UserDataBase64() pulumix.Output[string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.Output[string] { return v.UserDataBase64 })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The semantic version of the image recipe, which specifies the version in the following format, with numeric values in each position to indicate a specific version: major.minor.patch. For example: 1.0.0.
//
// The following attributes are optional:
func (o ImageRecipeOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The working directory to be used during build and test workflows.
func (o ImageRecipeOutput) WorkingDirectory() pulumix.Output[*string] {
	value := pulumix.Apply[ImageRecipe](o, func(v ImageRecipe) pulumix.Output[*string] { return v.WorkingDirectory })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ImageRecipeOutput{})
}
