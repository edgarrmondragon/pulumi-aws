// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS NetworkManager ConnectAttachment.
type ConnectAttachment struct {
	pulumi.CustomResourceState

	// The ARN of the attachment.
	Arn          pulumix.Output[string] `pulumi:"arn"`
	AttachmentId pulumix.Output[string] `pulumi:"attachmentId"`
	// The policy rule number associated with the attachment.
	AttachmentPolicyRuleNumber pulumix.Output[int] `pulumi:"attachmentPolicyRuleNumber"`
	// The type of attachment.
	AttachmentType pulumix.Output[string] `pulumi:"attachmentType"`
	// The ARN of a core network.
	CoreNetworkArn pulumix.Output[string] `pulumi:"coreNetworkArn"`
	// The ID of a core network where you want to create the attachment.
	CoreNetworkId pulumix.Output[string] `pulumi:"coreNetworkId"`
	// The Region where the edge is located.
	EdgeLocation pulumix.Output[string] `pulumi:"edgeLocation"`
	// Options for creating an attachment.
	//
	// The following arguments are optional:
	Options pulumix.GPtrOutput[ConnectAttachmentOptions, ConnectAttachmentOptionsOutput] `pulumi:"options"`
	// The ID of the attachment account owner.
	OwnerAccountId pulumix.Output[string] `pulumi:"ownerAccountId"`
	// The attachment resource ARN.
	ResourceArn pulumix.Output[string] `pulumi:"resourceArn"`
	// The name of the segment attachment.
	SegmentName pulumix.Output[string] `pulumi:"segmentName"`
	// The state of the attachment.
	State pulumix.Output[string] `pulumi:"state"`
	// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of the attachment between the two connections.
	TransportAttachmentId pulumix.Output[string] `pulumi:"transportAttachmentId"`
}

// NewConnectAttachment registers a new resource with the given unique name, arguments, and options.
func NewConnectAttachment(ctx *pulumi.Context,
	name string, args *ConnectAttachmentArgs, opts ...pulumi.ResourceOption) (*ConnectAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CoreNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'CoreNetworkId'")
	}
	if args.EdgeLocation == nil {
		return nil, errors.New("invalid value for required argument 'EdgeLocation'")
	}
	if args.Options == nil {
		return nil, errors.New("invalid value for required argument 'Options'")
	}
	if args.TransportAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransportAttachmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectAttachment
	err := ctx.RegisterResource("aws:networkmanager/connectAttachment:ConnectAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectAttachment gets an existing ConnectAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectAttachmentState, opts ...pulumi.ResourceOption) (*ConnectAttachment, error) {
	var resource ConnectAttachment
	err := ctx.ReadResource("aws:networkmanager/connectAttachment:ConnectAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectAttachment resources.
type connectAttachmentState struct {
	// The ARN of the attachment.
	Arn          *string `pulumi:"arn"`
	AttachmentId *string `pulumi:"attachmentId"`
	// The policy rule number associated with the attachment.
	AttachmentPolicyRuleNumber *int `pulumi:"attachmentPolicyRuleNumber"`
	// The type of attachment.
	AttachmentType *string `pulumi:"attachmentType"`
	// The ARN of a core network.
	CoreNetworkArn *string `pulumi:"coreNetworkArn"`
	// The ID of a core network where you want to create the attachment.
	CoreNetworkId *string `pulumi:"coreNetworkId"`
	// The Region where the edge is located.
	EdgeLocation *string `pulumi:"edgeLocation"`
	// Options for creating an attachment.
	//
	// The following arguments are optional:
	Options *ConnectAttachmentOptions `pulumi:"options"`
	// The ID of the attachment account owner.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// The attachment resource ARN.
	ResourceArn *string `pulumi:"resourceArn"`
	// The name of the segment attachment.
	SegmentName *string `pulumi:"segmentName"`
	// The state of the attachment.
	State *string `pulumi:"state"`
	// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the attachment between the two connections.
	TransportAttachmentId *string `pulumi:"transportAttachmentId"`
}

type ConnectAttachmentState struct {
	// The ARN of the attachment.
	Arn          pulumix.Input[*string]
	AttachmentId pulumix.Input[*string]
	// The policy rule number associated with the attachment.
	AttachmentPolicyRuleNumber pulumix.Input[*int]
	// The type of attachment.
	AttachmentType pulumix.Input[*string]
	// The ARN of a core network.
	CoreNetworkArn pulumix.Input[*string]
	// The ID of a core network where you want to create the attachment.
	CoreNetworkId pulumix.Input[*string]
	// The Region where the edge is located.
	EdgeLocation pulumix.Input[*string]
	// Options for creating an attachment.
	//
	// The following arguments are optional:
	Options pulumix.Input[*ConnectAttachmentOptionsArgs]
	// The ID of the attachment account owner.
	OwnerAccountId pulumix.Input[*string]
	// The attachment resource ARN.
	ResourceArn pulumix.Input[*string]
	// The name of the segment attachment.
	SegmentName pulumix.Input[*string]
	// The state of the attachment.
	State pulumix.Input[*string]
	// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The ID of the attachment between the two connections.
	TransportAttachmentId pulumix.Input[*string]
}

func (ConnectAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectAttachmentState)(nil)).Elem()
}

type connectAttachmentArgs struct {
	// The ID of a core network where you want to create the attachment.
	CoreNetworkId string `pulumi:"coreNetworkId"`
	// The Region where the edge is located.
	EdgeLocation string `pulumi:"edgeLocation"`
	// Options for creating an attachment.
	//
	// The following arguments are optional:
	Options ConnectAttachmentOptions `pulumi:"options"`
	// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the attachment between the two connections.
	TransportAttachmentId string `pulumi:"transportAttachmentId"`
}

// The set of arguments for constructing a ConnectAttachment resource.
type ConnectAttachmentArgs struct {
	// The ID of a core network where you want to create the attachment.
	CoreNetworkId pulumix.Input[string]
	// The Region where the edge is located.
	EdgeLocation pulumix.Input[string]
	// Options for creating an attachment.
	//
	// The following arguments are optional:
	Options pulumix.Input[*ConnectAttachmentOptionsArgs]
	// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The ID of the attachment between the two connections.
	TransportAttachmentId pulumix.Input[string]
}

func (ConnectAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectAttachmentArgs)(nil)).Elem()
}

type ConnectAttachmentOutput struct{ *pulumi.OutputState }

func (ConnectAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectAttachment)(nil)).Elem()
}

func (o ConnectAttachmentOutput) ToConnectAttachmentOutput() ConnectAttachmentOutput {
	return o
}

func (o ConnectAttachmentOutput) ToConnectAttachmentOutputWithContext(ctx context.Context) ConnectAttachmentOutput {
	return o
}

func (o ConnectAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectAttachment] {
	return pulumix.Output[ConnectAttachment]{
		OutputState: o.OutputState,
	}
}

// The ARN of the attachment.
func (o ConnectAttachmentOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ConnectAttachmentOutput) AttachmentId() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.AttachmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The policy rule number associated with the attachment.
func (o ConnectAttachmentOutput) AttachmentPolicyRuleNumber() pulumix.Output[int] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[int] { return v.AttachmentPolicyRuleNumber })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The type of attachment.
func (o ConnectAttachmentOutput) AttachmentType() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.AttachmentType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of a core network.
func (o ConnectAttachmentOutput) CoreNetworkArn() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.CoreNetworkArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of a core network where you want to create the attachment.
func (o ConnectAttachmentOutput) CoreNetworkId() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.CoreNetworkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Region where the edge is located.
func (o ConnectAttachmentOutput) EdgeLocation() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.EdgeLocation })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Options for creating an attachment.
//
// The following arguments are optional:
func (o ConnectAttachmentOutput) Options() pulumix.GPtrOutput[ConnectAttachmentOptions, ConnectAttachmentOptionsOutput] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.GPtrOutput[ConnectAttachmentOptions, ConnectAttachmentOptionsOutput] {
		return v.Options
	})
	unwrapped := pulumix.Flatten[*ConnectAttachmentOptions, pulumix.GPtrOutput[ConnectAttachmentOptions, ConnectAttachmentOptionsOutput]](value)
	return pulumix.GPtrOutput[ConnectAttachmentOptions, ConnectAttachmentOptionsOutput]{OutputState: unwrapped.OutputState}
}

// The ID of the attachment account owner.
func (o ConnectAttachmentOutput) OwnerAccountId() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.OwnerAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The attachment resource ARN.
func (o ConnectAttachmentOutput) ResourceArn() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.ResourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the segment attachment.
func (o ConnectAttachmentOutput) SegmentName() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.SegmentName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The state of the attachment.
func (o ConnectAttachmentOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ConnectAttachmentOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ConnectAttachmentOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the attachment between the two connections.
func (o ConnectAttachmentOutput) TransportAttachmentId() pulumix.Output[string] {
	value := pulumix.Apply[ConnectAttachment](o, func(v ConnectAttachment) pulumix.Output[string] { return v.TransportAttachmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ConnectAttachmentOutput{})
}
