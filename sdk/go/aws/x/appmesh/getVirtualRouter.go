// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The App Mesh Virtual Router data source allows details of an App Mesh Virtual Service to be retrieved by its name and mesh_name.
func LookupVirtualRouter(ctx *pulumi.Context, args *LookupVirtualRouterArgs, opts ...pulumi.InvokeOption) (*LookupVirtualRouterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualRouterResult
	err := ctx.Invoke("aws:appmesh/getVirtualRouter:getVirtualRouter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVirtualRouter.
type LookupVirtualRouterArgs struct {
	// Name of the mesh in which the virtual router exists
	MeshName  string  `pulumi:"meshName"`
	MeshOwner *string `pulumi:"meshOwner"`
	// Name of the virtual router.
	Name string `pulumi:"name"`
	// Map of tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVirtualRouter.
type LookupVirtualRouterResult struct {
	// ARN of the virtual router.
	Arn string `pulumi:"arn"`
	// Creation date of the virtual router.
	CreatedDate string `pulumi:"createdDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Last update date of the virtual router.
	LastUpdatedDate string `pulumi:"lastUpdatedDate"`
	MeshName        string `pulumi:"meshName"`
	MeshOwner       string `pulumi:"meshOwner"`
	Name            string `pulumi:"name"`
	// Resource owner's AWS account ID.
	ResourceOwner string `pulumi:"resourceOwner"`
	// Virtual routers specification. See the `appmesh.VirtualRouter` resource for details.
	Specs []GetVirtualRouterSpec `pulumi:"specs"`
	// Map of tags.
	Tags map[string]string `pulumi:"tags"`
}

func LookupVirtualRouterOutput(ctx *pulumi.Context, args LookupVirtualRouterOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualRouterResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVirtualRouterArgs](args.ToOutput(), func(plainArgs *LookupVirtualRouterArgs) (*LookupVirtualRouterResult, error) {
		return LookupVirtualRouter(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVirtualRouterResultOutput, *LookupVirtualRouterResult](outputResult)
}

// A collection of arguments for invoking getVirtualRouter.
type LookupVirtualRouterOutputArgs struct {
	// Name of the mesh in which the virtual router exists
	MeshName  pulumix.Input[string]  `pulumi:"meshName"`
	MeshOwner pulumix.Input[*string] `pulumi:"meshOwner"`
	// Name of the virtual router.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupVirtualRouterOutputArgs) ToOutput() pulumix.Output[*LookupVirtualRouterArgs] {
	allArgs := pulumix.All(
		args.MeshName.ToOutput(context.Background()).AsAny(),
		args.MeshOwner.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVirtualRouterArgs {
		return &LookupVirtualRouterArgs{
			MeshName:  resolvedArgs[0].(string),
			MeshOwner: resolvedArgs[1].(*string),
			Name:      resolvedArgs[2].(string),
			Tags:      resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupVirtualRouterResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualRouterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualRouterResult)(nil)).Elem()
}

func (o LookupVirtualRouterResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVirtualRouterResult] {
	return pulumix.Output[*LookupVirtualRouterResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVirtualRouterResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualRouterResult](o, func(v *LookupVirtualRouterResult) string { return v.Arn })
}

func (o LookupVirtualRouterResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualRouterResult](o, func(v *LookupVirtualRouterResult) string { return v.CreatedDate })
}

func (o LookupVirtualRouterResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualRouterResult](o, func(v *LookupVirtualRouterResult) string { return v.Id })
}

func (o LookupVirtualRouterResultOutput) LastUpdatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualRouterResult](o, func(v *LookupVirtualRouterResult) string { return v.LastUpdatedDate })
}

func (o LookupVirtualRouterResultOutput) MeshName() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualRouterResult](o, func(v *LookupVirtualRouterResult) string { return v.MeshName })
}

func (o LookupVirtualRouterResultOutput) MeshOwner() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualRouterResult](o, func(v *LookupVirtualRouterResult) string { return v.MeshOwner })
}

func (o LookupVirtualRouterResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualRouterResult](o, func(v *LookupVirtualRouterResult) string { return v.Name })
}

func (o LookupVirtualRouterResultOutput) ResourceOwner() pulumix.Output[string] {
	return pulumix.Apply[*LookupVirtualRouterResult](o, func(v *LookupVirtualRouterResult) string { return v.ResourceOwner })
}

func (o LookupVirtualRouterResultOutput) Specs() pulumix.GArrayOutput[GetVirtualRouterSpec, GetVirtualRouterSpecOutput] {
	value := pulumix.Apply[*LookupVirtualRouterResult](o, func(v *LookupVirtualRouterResult) []GetVirtualRouterSpec { return v.Specs })
	return pulumix.GArrayOutput[GetVirtualRouterSpec, GetVirtualRouterSpecOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVirtualRouterResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVirtualRouterResult](o, func(v *LookupVirtualRouterResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
