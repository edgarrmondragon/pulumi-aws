// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wafregional

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `wafregional.Rule` Retrieves a WAF Regional Rule Resource Id.
func LookupRule(ctx *pulumi.Context, args *LookupRuleArgs, opts ...pulumi.InvokeOption) (*LookupRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRuleResult
	err := ctx.Invoke("aws:wafregional/getRule:getRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRule.
type LookupRuleArgs struct {
	// Name of the WAF Regional rule.
	Name string `pulumi:"name"`
}

// A collection of values returned by getRule.
type LookupRuleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func LookupRuleOutput(ctx *pulumi.Context, args LookupRuleOutputArgs, opts ...pulumi.InvokeOption) LookupRuleResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRuleArgs](args.ToOutput(), func(plainArgs *LookupRuleArgs) (*LookupRuleResult, error) {
		return LookupRule(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRuleResultOutput, *LookupRuleResult](outputResult)
}

// A collection of arguments for invoking getRule.
type LookupRuleOutputArgs struct {
	// Name of the WAF Regional rule.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupRuleOutputArgs) ToOutput() pulumix.Output[*LookupRuleArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRuleArgs {
		return &LookupRuleArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupRuleResultOutput struct{ *pulumi.OutputState }

func (LookupRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuleResult)(nil)).Elem()
}

func (o LookupRuleResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRuleResult] {
	return pulumix.Output[*LookupRuleResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRuleResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRuleResult](o, func(v *LookupRuleResult) string { return v.Id })
}

func (o LookupRuleResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupRuleResult](o, func(v *LookupRuleResult) string { return v.Name })
}
