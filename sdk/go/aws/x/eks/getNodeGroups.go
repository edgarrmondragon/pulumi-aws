// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve the EKS Node Groups associated with a named EKS cluster. This will allow you to pass a list of Node Group names to other resources.
func GetNodeGroups(ctx *pulumi.Context, args *GetNodeGroupsArgs, opts ...pulumi.InvokeOption) (*GetNodeGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNodeGroupsResult
	err := ctx.Invoke("aws:eks/getNodeGroups:getNodeGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNodeGroups.
type GetNodeGroupsArgs struct {
	// Name of the cluster.
	ClusterName string `pulumi:"clusterName"`
}

// A collection of values returned by getNodeGroups.
type GetNodeGroupsResult struct {
	ClusterName string `pulumi:"clusterName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set of all node group names in an EKS Cluster.
	Names []string `pulumi:"names"`
}

func GetNodeGroupsOutput(ctx *pulumi.Context, args GetNodeGroupsOutputArgs, opts ...pulumi.InvokeOption) GetNodeGroupsResultOutput {
	outputResult := pulumix.ApplyErr[*GetNodeGroupsArgs](args.ToOutput(), func(plainArgs *GetNodeGroupsArgs) (*GetNodeGroupsResult, error) {
		return GetNodeGroups(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetNodeGroupsResultOutput, *GetNodeGroupsResult](outputResult)
}

// A collection of arguments for invoking getNodeGroups.
type GetNodeGroupsOutputArgs struct {
	// Name of the cluster.
	ClusterName pulumix.Input[string] `pulumi:"clusterName"`
}

func (args GetNodeGroupsOutputArgs) ToOutput() pulumix.Output[*GetNodeGroupsArgs] {
	allArgs := pulumix.All(
		args.ClusterName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetNodeGroupsArgs {
		return &GetNodeGroupsArgs{
			ClusterName: resolvedArgs[0].(string),
		}
	})
}

type GetNodeGroupsResultOutput struct{ *pulumi.OutputState }

func (GetNodeGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupsResult)(nil)).Elem()
}

func (o GetNodeGroupsResultOutput) ToOutput(context.Context) pulumix.Output[*GetNodeGroupsResult] {
	return pulumix.Output[*GetNodeGroupsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetNodeGroupsResultOutput) ClusterName() pulumix.Output[string] {
	return pulumix.Apply[*GetNodeGroupsResult](o, func(v *GetNodeGroupsResult) string { return v.ClusterName })
}

func (o GetNodeGroupsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetNodeGroupsResult](o, func(v *GetNodeGroupsResult) string { return v.Id })
}

func (o GetNodeGroupsResultOutput) Names() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetNodeGroupsResult](o, func(v *GetNodeGroupsResult) []string { return v.Names })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
