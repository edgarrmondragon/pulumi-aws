// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mskconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ConnectorCapacity struct {
	// Information about the auto scaling parameters for the connector. See below.
	Autoscaling *ConnectorCapacityAutoscaling `pulumi:"autoscaling"`
	// Details about a fixed capacity allocated to a connector. See below.
	ProvisionedCapacity *ConnectorCapacityProvisionedCapacity `pulumi:"provisionedCapacity"`
}

type ConnectorCapacityArgs struct {
	// Information about the auto scaling parameters for the connector. See below.
	Autoscaling pulumix.Input[*ConnectorCapacityAutoscalingArgs] `pulumi:"autoscaling"`
	// Details about a fixed capacity allocated to a connector. See below.
	ProvisionedCapacity pulumix.Input[*ConnectorCapacityProvisionedCapacityArgs] `pulumi:"provisionedCapacity"`
}

func (ConnectorCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCapacity)(nil)).Elem()
}

func (i ConnectorCapacityArgs) ToConnectorCapacityOutput() ConnectorCapacityOutput {
	return i.ToConnectorCapacityOutputWithContext(context.Background())
}

func (i ConnectorCapacityArgs) ToConnectorCapacityOutputWithContext(ctx context.Context) ConnectorCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCapacityOutput)
}

func (i *ConnectorCapacityArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorCapacityArgs] {
	return pulumix.Val(i)
}

type ConnectorCapacityOutput struct{ *pulumi.OutputState }

func (ConnectorCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCapacity)(nil)).Elem()
}

func (o ConnectorCapacityOutput) ToConnectorCapacityOutput() ConnectorCapacityOutput {
	return o
}

func (o ConnectorCapacityOutput) ToConnectorCapacityOutputWithContext(ctx context.Context) ConnectorCapacityOutput {
	return o
}

func (o ConnectorCapacityOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorCapacity] {
	return pulumix.Output[ConnectorCapacity]{
		OutputState: o.OutputState,
	}
}

// Information about the auto scaling parameters for the connector. See below.
func (o ConnectorCapacityOutput) Autoscaling() pulumix.GPtrOutput[ConnectorCapacityAutoscaling, ConnectorCapacityAutoscalingOutput] {
	value := pulumix.Apply[ConnectorCapacity](o, func(v ConnectorCapacity) *ConnectorCapacityAutoscaling { return v.Autoscaling })
	return pulumix.GPtrOutput[ConnectorCapacityAutoscaling, ConnectorCapacityAutoscalingOutput]{OutputState: value.OutputState}
}

// Details about a fixed capacity allocated to a connector. See below.
func (o ConnectorCapacityOutput) ProvisionedCapacity() pulumix.GPtrOutput[ConnectorCapacityProvisionedCapacity, ConnectorCapacityProvisionedCapacityOutput] {
	value := pulumix.Apply[ConnectorCapacity](o, func(v ConnectorCapacity) *ConnectorCapacityProvisionedCapacity { return v.ProvisionedCapacity })
	return pulumix.GPtrOutput[ConnectorCapacityProvisionedCapacity, ConnectorCapacityProvisionedCapacityOutput]{OutputState: value.OutputState}
}

type ConnectorCapacityAutoscaling struct {
	// The maximum number of workers allocated to the connector.
	MaxWorkerCount int `pulumi:"maxWorkerCount"`
	// The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
	McuCount *int `pulumi:"mcuCount"`
	// The minimum number of workers allocated to the connector.
	MinWorkerCount int `pulumi:"minWorkerCount"`
	// The scale-in policy for the connector. See below.
	ScaleInPolicy *ConnectorCapacityAutoscalingScaleInPolicy `pulumi:"scaleInPolicy"`
	// The scale-out policy for the connector. See below.
	ScaleOutPolicy *ConnectorCapacityAutoscalingScaleOutPolicy `pulumi:"scaleOutPolicy"`
}

type ConnectorCapacityAutoscalingArgs struct {
	// The maximum number of workers allocated to the connector.
	MaxWorkerCount pulumix.Input[int] `pulumi:"maxWorkerCount"`
	// The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
	McuCount pulumix.Input[*int] `pulumi:"mcuCount"`
	// The minimum number of workers allocated to the connector.
	MinWorkerCount pulumix.Input[int] `pulumi:"minWorkerCount"`
	// The scale-in policy for the connector. See below.
	ScaleInPolicy pulumix.Input[*ConnectorCapacityAutoscalingScaleInPolicyArgs] `pulumi:"scaleInPolicy"`
	// The scale-out policy for the connector. See below.
	ScaleOutPolicy pulumix.Input[*ConnectorCapacityAutoscalingScaleOutPolicyArgs] `pulumi:"scaleOutPolicy"`
}

func (ConnectorCapacityAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCapacityAutoscaling)(nil)).Elem()
}

func (i ConnectorCapacityAutoscalingArgs) ToConnectorCapacityAutoscalingOutput() ConnectorCapacityAutoscalingOutput {
	return i.ToConnectorCapacityAutoscalingOutputWithContext(context.Background())
}

func (i ConnectorCapacityAutoscalingArgs) ToConnectorCapacityAutoscalingOutputWithContext(ctx context.Context) ConnectorCapacityAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCapacityAutoscalingOutput)
}

func (i *ConnectorCapacityAutoscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorCapacityAutoscalingArgs] {
	return pulumix.Val(i)
}

type ConnectorCapacityAutoscalingOutput struct{ *pulumi.OutputState }

func (ConnectorCapacityAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCapacityAutoscaling)(nil)).Elem()
}

func (o ConnectorCapacityAutoscalingOutput) ToConnectorCapacityAutoscalingOutput() ConnectorCapacityAutoscalingOutput {
	return o
}

func (o ConnectorCapacityAutoscalingOutput) ToConnectorCapacityAutoscalingOutputWithContext(ctx context.Context) ConnectorCapacityAutoscalingOutput {
	return o
}

func (o ConnectorCapacityAutoscalingOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorCapacityAutoscaling] {
	return pulumix.Output[ConnectorCapacityAutoscaling]{
		OutputState: o.OutputState,
	}
}

// The maximum number of workers allocated to the connector.
func (o ConnectorCapacityAutoscalingOutput) MaxWorkerCount() pulumix.Output[int] {
	return pulumix.Apply[ConnectorCapacityAutoscaling](o, func(v ConnectorCapacityAutoscaling) int { return v.MaxWorkerCount })
}

// The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
func (o ConnectorCapacityAutoscalingOutput) McuCount() pulumix.Output[*int] {
	return pulumix.Apply[ConnectorCapacityAutoscaling](o, func(v ConnectorCapacityAutoscaling) *int { return v.McuCount })
}

// The minimum number of workers allocated to the connector.
func (o ConnectorCapacityAutoscalingOutput) MinWorkerCount() pulumix.Output[int] {
	return pulumix.Apply[ConnectorCapacityAutoscaling](o, func(v ConnectorCapacityAutoscaling) int { return v.MinWorkerCount })
}

// The scale-in policy for the connector. See below.
func (o ConnectorCapacityAutoscalingOutput) ScaleInPolicy() pulumix.GPtrOutput[ConnectorCapacityAutoscalingScaleInPolicy, ConnectorCapacityAutoscalingScaleInPolicyOutput] {
	value := pulumix.Apply[ConnectorCapacityAutoscaling](o, func(v ConnectorCapacityAutoscaling) *ConnectorCapacityAutoscalingScaleInPolicy {
		return v.ScaleInPolicy
	})
	return pulumix.GPtrOutput[ConnectorCapacityAutoscalingScaleInPolicy, ConnectorCapacityAutoscalingScaleInPolicyOutput]{OutputState: value.OutputState}
}

// The scale-out policy for the connector. See below.
func (o ConnectorCapacityAutoscalingOutput) ScaleOutPolicy() pulumix.GPtrOutput[ConnectorCapacityAutoscalingScaleOutPolicy, ConnectorCapacityAutoscalingScaleOutPolicyOutput] {
	value := pulumix.Apply[ConnectorCapacityAutoscaling](o, func(v ConnectorCapacityAutoscaling) *ConnectorCapacityAutoscalingScaleOutPolicy {
		return v.ScaleOutPolicy
	})
	return pulumix.GPtrOutput[ConnectorCapacityAutoscalingScaleOutPolicy, ConnectorCapacityAutoscalingScaleOutPolicyOutput]{OutputState: value.OutputState}
}

type ConnectorCapacityAutoscalingScaleInPolicy struct {
	// Specifies the CPU utilization percentage threshold at which you want connector scale in to be triggered.
	CpuUtilizationPercentage *int `pulumi:"cpuUtilizationPercentage"`
}

type ConnectorCapacityAutoscalingScaleInPolicyArgs struct {
	// Specifies the CPU utilization percentage threshold at which you want connector scale in to be triggered.
	CpuUtilizationPercentage pulumix.Input[*int] `pulumi:"cpuUtilizationPercentage"`
}

func (ConnectorCapacityAutoscalingScaleInPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCapacityAutoscalingScaleInPolicy)(nil)).Elem()
}

func (i ConnectorCapacityAutoscalingScaleInPolicyArgs) ToConnectorCapacityAutoscalingScaleInPolicyOutput() ConnectorCapacityAutoscalingScaleInPolicyOutput {
	return i.ToConnectorCapacityAutoscalingScaleInPolicyOutputWithContext(context.Background())
}

func (i ConnectorCapacityAutoscalingScaleInPolicyArgs) ToConnectorCapacityAutoscalingScaleInPolicyOutputWithContext(ctx context.Context) ConnectorCapacityAutoscalingScaleInPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCapacityAutoscalingScaleInPolicyOutput)
}

func (i *ConnectorCapacityAutoscalingScaleInPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorCapacityAutoscalingScaleInPolicyArgs] {
	return pulumix.Val(i)
}

type ConnectorCapacityAutoscalingScaleInPolicyOutput struct{ *pulumi.OutputState }

func (ConnectorCapacityAutoscalingScaleInPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCapacityAutoscalingScaleInPolicy)(nil)).Elem()
}

func (o ConnectorCapacityAutoscalingScaleInPolicyOutput) ToConnectorCapacityAutoscalingScaleInPolicyOutput() ConnectorCapacityAutoscalingScaleInPolicyOutput {
	return o
}

func (o ConnectorCapacityAutoscalingScaleInPolicyOutput) ToConnectorCapacityAutoscalingScaleInPolicyOutputWithContext(ctx context.Context) ConnectorCapacityAutoscalingScaleInPolicyOutput {
	return o
}

func (o ConnectorCapacityAutoscalingScaleInPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorCapacityAutoscalingScaleInPolicy] {
	return pulumix.Output[ConnectorCapacityAutoscalingScaleInPolicy]{
		OutputState: o.OutputState,
	}
}

// Specifies the CPU utilization percentage threshold at which you want connector scale in to be triggered.
func (o ConnectorCapacityAutoscalingScaleInPolicyOutput) CpuUtilizationPercentage() pulumix.Output[*int] {
	return pulumix.Apply[ConnectorCapacityAutoscalingScaleInPolicy](o, func(v ConnectorCapacityAutoscalingScaleInPolicy) *int { return v.CpuUtilizationPercentage })
}

type ConnectorCapacityAutoscalingScaleOutPolicy struct {
	// The CPU utilization percentage threshold at which you want connector scale out to be triggered.
	CpuUtilizationPercentage *int `pulumi:"cpuUtilizationPercentage"`
}

type ConnectorCapacityAutoscalingScaleOutPolicyArgs struct {
	// The CPU utilization percentage threshold at which you want connector scale out to be triggered.
	CpuUtilizationPercentage pulumix.Input[*int] `pulumi:"cpuUtilizationPercentage"`
}

func (ConnectorCapacityAutoscalingScaleOutPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCapacityAutoscalingScaleOutPolicy)(nil)).Elem()
}

func (i ConnectorCapacityAutoscalingScaleOutPolicyArgs) ToConnectorCapacityAutoscalingScaleOutPolicyOutput() ConnectorCapacityAutoscalingScaleOutPolicyOutput {
	return i.ToConnectorCapacityAutoscalingScaleOutPolicyOutputWithContext(context.Background())
}

func (i ConnectorCapacityAutoscalingScaleOutPolicyArgs) ToConnectorCapacityAutoscalingScaleOutPolicyOutputWithContext(ctx context.Context) ConnectorCapacityAutoscalingScaleOutPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCapacityAutoscalingScaleOutPolicyOutput)
}

func (i *ConnectorCapacityAutoscalingScaleOutPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorCapacityAutoscalingScaleOutPolicyArgs] {
	return pulumix.Val(i)
}

type ConnectorCapacityAutoscalingScaleOutPolicyOutput struct{ *pulumi.OutputState }

func (ConnectorCapacityAutoscalingScaleOutPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCapacityAutoscalingScaleOutPolicy)(nil)).Elem()
}

func (o ConnectorCapacityAutoscalingScaleOutPolicyOutput) ToConnectorCapacityAutoscalingScaleOutPolicyOutput() ConnectorCapacityAutoscalingScaleOutPolicyOutput {
	return o
}

func (o ConnectorCapacityAutoscalingScaleOutPolicyOutput) ToConnectorCapacityAutoscalingScaleOutPolicyOutputWithContext(ctx context.Context) ConnectorCapacityAutoscalingScaleOutPolicyOutput {
	return o
}

func (o ConnectorCapacityAutoscalingScaleOutPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorCapacityAutoscalingScaleOutPolicy] {
	return pulumix.Output[ConnectorCapacityAutoscalingScaleOutPolicy]{
		OutputState: o.OutputState,
	}
}

// The CPU utilization percentage threshold at which you want connector scale out to be triggered.
func (o ConnectorCapacityAutoscalingScaleOutPolicyOutput) CpuUtilizationPercentage() pulumix.Output[*int] {
	return pulumix.Apply[ConnectorCapacityAutoscalingScaleOutPolicy](o, func(v ConnectorCapacityAutoscalingScaleOutPolicy) *int { return v.CpuUtilizationPercentage })
}

type ConnectorCapacityProvisionedCapacity struct {
	// The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
	McuCount *int `pulumi:"mcuCount"`
	// The number of workers that are allocated to the connector.
	WorkerCount int `pulumi:"workerCount"`
}

type ConnectorCapacityProvisionedCapacityArgs struct {
	// The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
	McuCount pulumix.Input[*int] `pulumi:"mcuCount"`
	// The number of workers that are allocated to the connector.
	WorkerCount pulumix.Input[int] `pulumi:"workerCount"`
}

func (ConnectorCapacityProvisionedCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCapacityProvisionedCapacity)(nil)).Elem()
}

func (i ConnectorCapacityProvisionedCapacityArgs) ToConnectorCapacityProvisionedCapacityOutput() ConnectorCapacityProvisionedCapacityOutput {
	return i.ToConnectorCapacityProvisionedCapacityOutputWithContext(context.Background())
}

func (i ConnectorCapacityProvisionedCapacityArgs) ToConnectorCapacityProvisionedCapacityOutputWithContext(ctx context.Context) ConnectorCapacityProvisionedCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorCapacityProvisionedCapacityOutput)
}

func (i *ConnectorCapacityProvisionedCapacityArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorCapacityProvisionedCapacityArgs] {
	return pulumix.Val(i)
}

type ConnectorCapacityProvisionedCapacityOutput struct{ *pulumi.OutputState }

func (ConnectorCapacityProvisionedCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCapacityProvisionedCapacity)(nil)).Elem()
}

func (o ConnectorCapacityProvisionedCapacityOutput) ToConnectorCapacityProvisionedCapacityOutput() ConnectorCapacityProvisionedCapacityOutput {
	return o
}

func (o ConnectorCapacityProvisionedCapacityOutput) ToConnectorCapacityProvisionedCapacityOutputWithContext(ctx context.Context) ConnectorCapacityProvisionedCapacityOutput {
	return o
}

func (o ConnectorCapacityProvisionedCapacityOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorCapacityProvisionedCapacity] {
	return pulumix.Output[ConnectorCapacityProvisionedCapacity]{
		OutputState: o.OutputState,
	}
}

// The number of microcontroller units (MCUs) allocated to each connector worker. Valid values: `1`, `2`, `4`, `8`. The default value is `1`.
func (o ConnectorCapacityProvisionedCapacityOutput) McuCount() pulumix.Output[*int] {
	return pulumix.Apply[ConnectorCapacityProvisionedCapacity](o, func(v ConnectorCapacityProvisionedCapacity) *int { return v.McuCount })
}

// The number of workers that are allocated to the connector.
func (o ConnectorCapacityProvisionedCapacityOutput) WorkerCount() pulumix.Output[int] {
	return pulumix.Apply[ConnectorCapacityProvisionedCapacity](o, func(v ConnectorCapacityProvisionedCapacity) int { return v.WorkerCount })
}

type ConnectorKafkaCluster struct {
	// The Apache Kafka cluster to which the connector is connected.
	ApacheKafkaCluster ConnectorKafkaClusterApacheKafkaCluster `pulumi:"apacheKafkaCluster"`
}

type ConnectorKafkaClusterArgs struct {
	// The Apache Kafka cluster to which the connector is connected.
	ApacheKafkaCluster pulumix.Input[*ConnectorKafkaClusterApacheKafkaClusterArgs] `pulumi:"apacheKafkaCluster"`
}

func (ConnectorKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaCluster)(nil)).Elem()
}

func (i ConnectorKafkaClusterArgs) ToConnectorKafkaClusterOutput() ConnectorKafkaClusterOutput {
	return i.ToConnectorKafkaClusterOutputWithContext(context.Background())
}

func (i ConnectorKafkaClusterArgs) ToConnectorKafkaClusterOutputWithContext(ctx context.Context) ConnectorKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorKafkaClusterOutput)
}

func (i *ConnectorKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorKafkaClusterArgs] {
	return pulumix.Val(i)
}

type ConnectorKafkaClusterOutput struct{ *pulumi.OutputState }

func (ConnectorKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaCluster)(nil)).Elem()
}

func (o ConnectorKafkaClusterOutput) ToConnectorKafkaClusterOutput() ConnectorKafkaClusterOutput {
	return o
}

func (o ConnectorKafkaClusterOutput) ToConnectorKafkaClusterOutputWithContext(ctx context.Context) ConnectorKafkaClusterOutput {
	return o
}

func (o ConnectorKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorKafkaCluster] {
	return pulumix.Output[ConnectorKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The Apache Kafka cluster to which the connector is connected.
func (o ConnectorKafkaClusterOutput) ApacheKafkaCluster() pulumix.GPtrOutput[ConnectorKafkaClusterApacheKafkaCluster, ConnectorKafkaClusterApacheKafkaClusterOutput] {
	value := pulumix.Apply[ConnectorKafkaCluster](o, func(v ConnectorKafkaCluster) ConnectorKafkaClusterApacheKafkaCluster { return v.ApacheKafkaCluster })
	return pulumix.GPtrOutput[ConnectorKafkaClusterApacheKafkaCluster, ConnectorKafkaClusterApacheKafkaClusterOutput]{OutputState: value.OutputState}
}

type ConnectorKafkaClusterApacheKafkaCluster struct {
	// The bootstrap servers of the cluster.
	BootstrapServers string `pulumi:"bootstrapServers"`
	// Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
	Vpc ConnectorKafkaClusterApacheKafkaClusterVpc `pulumi:"vpc"`
}

type ConnectorKafkaClusterApacheKafkaClusterArgs struct {
	// The bootstrap servers of the cluster.
	BootstrapServers pulumix.Input[string] `pulumi:"bootstrapServers"`
	// Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
	Vpc pulumix.Input[*ConnectorKafkaClusterApacheKafkaClusterVpcArgs] `pulumi:"vpc"`
}

func (ConnectorKafkaClusterApacheKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaClusterApacheKafkaCluster)(nil)).Elem()
}

func (i ConnectorKafkaClusterApacheKafkaClusterArgs) ToConnectorKafkaClusterApacheKafkaClusterOutput() ConnectorKafkaClusterApacheKafkaClusterOutput {
	return i.ToConnectorKafkaClusterApacheKafkaClusterOutputWithContext(context.Background())
}

func (i ConnectorKafkaClusterApacheKafkaClusterArgs) ToConnectorKafkaClusterApacheKafkaClusterOutputWithContext(ctx context.Context) ConnectorKafkaClusterApacheKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorKafkaClusterApacheKafkaClusterOutput)
}

func (i *ConnectorKafkaClusterApacheKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorKafkaClusterApacheKafkaClusterArgs] {
	return pulumix.Val(i)
}

type ConnectorKafkaClusterApacheKafkaClusterOutput struct{ *pulumi.OutputState }

func (ConnectorKafkaClusterApacheKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaClusterApacheKafkaCluster)(nil)).Elem()
}

func (o ConnectorKafkaClusterApacheKafkaClusterOutput) ToConnectorKafkaClusterApacheKafkaClusterOutput() ConnectorKafkaClusterApacheKafkaClusterOutput {
	return o
}

func (o ConnectorKafkaClusterApacheKafkaClusterOutput) ToConnectorKafkaClusterApacheKafkaClusterOutputWithContext(ctx context.Context) ConnectorKafkaClusterApacheKafkaClusterOutput {
	return o
}

func (o ConnectorKafkaClusterApacheKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorKafkaClusterApacheKafkaCluster] {
	return pulumix.Output[ConnectorKafkaClusterApacheKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// The bootstrap servers of the cluster.
func (o ConnectorKafkaClusterApacheKafkaClusterOutput) BootstrapServers() pulumix.Output[string] {
	return pulumix.Apply[ConnectorKafkaClusterApacheKafkaCluster](o, func(v ConnectorKafkaClusterApacheKafkaCluster) string { return v.BootstrapServers })
}

// Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
func (o ConnectorKafkaClusterApacheKafkaClusterOutput) Vpc() pulumix.GPtrOutput[ConnectorKafkaClusterApacheKafkaClusterVpc, ConnectorKafkaClusterApacheKafkaClusterVpcOutput] {
	value := pulumix.Apply[ConnectorKafkaClusterApacheKafkaCluster](o, func(v ConnectorKafkaClusterApacheKafkaCluster) ConnectorKafkaClusterApacheKafkaClusterVpc {
		return v.Vpc
	})
	return pulumix.GPtrOutput[ConnectorKafkaClusterApacheKafkaClusterVpc, ConnectorKafkaClusterApacheKafkaClusterVpcOutput]{OutputState: value.OutputState}
}

type ConnectorKafkaClusterApacheKafkaClusterVpc struct {
	// The security groups for the connector.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The subnets for the connector.
	Subnets []string `pulumi:"subnets"`
}

type ConnectorKafkaClusterApacheKafkaClusterVpcArgs struct {
	// The security groups for the connector.
	SecurityGroups pulumix.Input[[]string] `pulumi:"securityGroups"`
	// The subnets for the connector.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
}

func (ConnectorKafkaClusterApacheKafkaClusterVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaClusterApacheKafkaClusterVpc)(nil)).Elem()
}

func (i ConnectorKafkaClusterApacheKafkaClusterVpcArgs) ToConnectorKafkaClusterApacheKafkaClusterVpcOutput() ConnectorKafkaClusterApacheKafkaClusterVpcOutput {
	return i.ToConnectorKafkaClusterApacheKafkaClusterVpcOutputWithContext(context.Background())
}

func (i ConnectorKafkaClusterApacheKafkaClusterVpcArgs) ToConnectorKafkaClusterApacheKafkaClusterVpcOutputWithContext(ctx context.Context) ConnectorKafkaClusterApacheKafkaClusterVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorKafkaClusterApacheKafkaClusterVpcOutput)
}

func (i *ConnectorKafkaClusterApacheKafkaClusterVpcArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorKafkaClusterApacheKafkaClusterVpcArgs] {
	return pulumix.Val(i)
}

type ConnectorKafkaClusterApacheKafkaClusterVpcOutput struct{ *pulumi.OutputState }

func (ConnectorKafkaClusterApacheKafkaClusterVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaClusterApacheKafkaClusterVpc)(nil)).Elem()
}

func (o ConnectorKafkaClusterApacheKafkaClusterVpcOutput) ToConnectorKafkaClusterApacheKafkaClusterVpcOutput() ConnectorKafkaClusterApacheKafkaClusterVpcOutput {
	return o
}

func (o ConnectorKafkaClusterApacheKafkaClusterVpcOutput) ToConnectorKafkaClusterApacheKafkaClusterVpcOutputWithContext(ctx context.Context) ConnectorKafkaClusterApacheKafkaClusterVpcOutput {
	return o
}

func (o ConnectorKafkaClusterApacheKafkaClusterVpcOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorKafkaClusterApacheKafkaClusterVpc] {
	return pulumix.Output[ConnectorKafkaClusterApacheKafkaClusterVpc]{
		OutputState: o.OutputState,
	}
}

// The security groups for the connector.
func (o ConnectorKafkaClusterApacheKafkaClusterVpcOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ConnectorKafkaClusterApacheKafkaClusterVpc](o, func(v ConnectorKafkaClusterApacheKafkaClusterVpc) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The subnets for the connector.
func (o ConnectorKafkaClusterApacheKafkaClusterVpcOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ConnectorKafkaClusterApacheKafkaClusterVpc](o, func(v ConnectorKafkaClusterApacheKafkaClusterVpc) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ConnectorKafkaClusterClientAuthentication struct {
	// The type of client authentication used to connect to the Apache Kafka cluster. Valid values: `IAM`, `NONE`. A value of `NONE` means that no client authentication is used. The default value is `NONE`.
	AuthenticationType *string `pulumi:"authenticationType"`
}

type ConnectorKafkaClusterClientAuthenticationArgs struct {
	// The type of client authentication used to connect to the Apache Kafka cluster. Valid values: `IAM`, `NONE`. A value of `NONE` means that no client authentication is used. The default value is `NONE`.
	AuthenticationType pulumix.Input[*string] `pulumi:"authenticationType"`
}

func (ConnectorKafkaClusterClientAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaClusterClientAuthentication)(nil)).Elem()
}

func (i ConnectorKafkaClusterClientAuthenticationArgs) ToConnectorKafkaClusterClientAuthenticationOutput() ConnectorKafkaClusterClientAuthenticationOutput {
	return i.ToConnectorKafkaClusterClientAuthenticationOutputWithContext(context.Background())
}

func (i ConnectorKafkaClusterClientAuthenticationArgs) ToConnectorKafkaClusterClientAuthenticationOutputWithContext(ctx context.Context) ConnectorKafkaClusterClientAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorKafkaClusterClientAuthenticationOutput)
}

func (i *ConnectorKafkaClusterClientAuthenticationArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorKafkaClusterClientAuthenticationArgs] {
	return pulumix.Val(i)
}

type ConnectorKafkaClusterClientAuthenticationOutput struct{ *pulumi.OutputState }

func (ConnectorKafkaClusterClientAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaClusterClientAuthentication)(nil)).Elem()
}

func (o ConnectorKafkaClusterClientAuthenticationOutput) ToConnectorKafkaClusterClientAuthenticationOutput() ConnectorKafkaClusterClientAuthenticationOutput {
	return o
}

func (o ConnectorKafkaClusterClientAuthenticationOutput) ToConnectorKafkaClusterClientAuthenticationOutputWithContext(ctx context.Context) ConnectorKafkaClusterClientAuthenticationOutput {
	return o
}

func (o ConnectorKafkaClusterClientAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorKafkaClusterClientAuthentication] {
	return pulumix.Output[ConnectorKafkaClusterClientAuthentication]{
		OutputState: o.OutputState,
	}
}

// The type of client authentication used to connect to the Apache Kafka cluster. Valid values: `IAM`, `NONE`. A value of `NONE` means that no client authentication is used. The default value is `NONE`.
func (o ConnectorKafkaClusterClientAuthenticationOutput) AuthenticationType() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorKafkaClusterClientAuthentication](o, func(v ConnectorKafkaClusterClientAuthentication) *string { return v.AuthenticationType })
}

type ConnectorKafkaClusterEncryptionInTransit struct {
	// The type of encryption in transit to the Apache Kafka cluster. Valid values: `PLAINTEXT`, `TLS`. The default values is `PLAINTEXT`.
	EncryptionType *string `pulumi:"encryptionType"`
}

type ConnectorKafkaClusterEncryptionInTransitArgs struct {
	// The type of encryption in transit to the Apache Kafka cluster. Valid values: `PLAINTEXT`, `TLS`. The default values is `PLAINTEXT`.
	EncryptionType pulumix.Input[*string] `pulumi:"encryptionType"`
}

func (ConnectorKafkaClusterEncryptionInTransitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaClusterEncryptionInTransit)(nil)).Elem()
}

func (i ConnectorKafkaClusterEncryptionInTransitArgs) ToConnectorKafkaClusterEncryptionInTransitOutput() ConnectorKafkaClusterEncryptionInTransitOutput {
	return i.ToConnectorKafkaClusterEncryptionInTransitOutputWithContext(context.Background())
}

func (i ConnectorKafkaClusterEncryptionInTransitArgs) ToConnectorKafkaClusterEncryptionInTransitOutputWithContext(ctx context.Context) ConnectorKafkaClusterEncryptionInTransitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorKafkaClusterEncryptionInTransitOutput)
}

func (i *ConnectorKafkaClusterEncryptionInTransitArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorKafkaClusterEncryptionInTransitArgs] {
	return pulumix.Val(i)
}

type ConnectorKafkaClusterEncryptionInTransitOutput struct{ *pulumi.OutputState }

func (ConnectorKafkaClusterEncryptionInTransitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorKafkaClusterEncryptionInTransit)(nil)).Elem()
}

func (o ConnectorKafkaClusterEncryptionInTransitOutput) ToConnectorKafkaClusterEncryptionInTransitOutput() ConnectorKafkaClusterEncryptionInTransitOutput {
	return o
}

func (o ConnectorKafkaClusterEncryptionInTransitOutput) ToConnectorKafkaClusterEncryptionInTransitOutputWithContext(ctx context.Context) ConnectorKafkaClusterEncryptionInTransitOutput {
	return o
}

func (o ConnectorKafkaClusterEncryptionInTransitOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorKafkaClusterEncryptionInTransit] {
	return pulumix.Output[ConnectorKafkaClusterEncryptionInTransit]{
		OutputState: o.OutputState,
	}
}

// The type of encryption in transit to the Apache Kafka cluster. Valid values: `PLAINTEXT`, `TLS`. The default values is `PLAINTEXT`.
func (o ConnectorKafkaClusterEncryptionInTransitOutput) EncryptionType() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorKafkaClusterEncryptionInTransit](o, func(v ConnectorKafkaClusterEncryptionInTransit) *string { return v.EncryptionType })
}

type ConnectorLogDelivery struct {
	// The workers can send worker logs to different destination types. This configuration specifies the details of these destinations. See below.
	WorkerLogDelivery ConnectorLogDeliveryWorkerLogDelivery `pulumi:"workerLogDelivery"`
}

type ConnectorLogDeliveryArgs struct {
	// The workers can send worker logs to different destination types. This configuration specifies the details of these destinations. See below.
	WorkerLogDelivery pulumix.Input[*ConnectorLogDeliveryWorkerLogDeliveryArgs] `pulumi:"workerLogDelivery"`
}

func (ConnectorLogDeliveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorLogDelivery)(nil)).Elem()
}

func (i ConnectorLogDeliveryArgs) ToConnectorLogDeliveryOutput() ConnectorLogDeliveryOutput {
	return i.ToConnectorLogDeliveryOutputWithContext(context.Background())
}

func (i ConnectorLogDeliveryArgs) ToConnectorLogDeliveryOutputWithContext(ctx context.Context) ConnectorLogDeliveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorLogDeliveryOutput)
}

func (i *ConnectorLogDeliveryArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorLogDeliveryArgs] {
	return pulumix.Val(i)
}

type ConnectorLogDeliveryOutput struct{ *pulumi.OutputState }

func (ConnectorLogDeliveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorLogDelivery)(nil)).Elem()
}

func (o ConnectorLogDeliveryOutput) ToConnectorLogDeliveryOutput() ConnectorLogDeliveryOutput {
	return o
}

func (o ConnectorLogDeliveryOutput) ToConnectorLogDeliveryOutputWithContext(ctx context.Context) ConnectorLogDeliveryOutput {
	return o
}

func (o ConnectorLogDeliveryOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorLogDelivery] {
	return pulumix.Output[ConnectorLogDelivery]{
		OutputState: o.OutputState,
	}
}

// The workers can send worker logs to different destination types. This configuration specifies the details of these destinations. See below.
func (o ConnectorLogDeliveryOutput) WorkerLogDelivery() pulumix.GPtrOutput[ConnectorLogDeliveryWorkerLogDelivery, ConnectorLogDeliveryWorkerLogDeliveryOutput] {
	value := pulumix.Apply[ConnectorLogDelivery](o, func(v ConnectorLogDelivery) ConnectorLogDeliveryWorkerLogDelivery { return v.WorkerLogDelivery })
	return pulumix.GPtrOutput[ConnectorLogDeliveryWorkerLogDelivery, ConnectorLogDeliveryWorkerLogDeliveryOutput]{OutputState: value.OutputState}
}

type ConnectorLogDeliveryWorkerLogDelivery struct {
	// Details about delivering logs to Amazon CloudWatch Logs. See below.
	CloudwatchLogs *ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs `pulumi:"cloudwatchLogs"`
	// Details about delivering logs to Amazon Kinesis Data Firehose. See below.
	Firehose *ConnectorLogDeliveryWorkerLogDeliveryFirehose `pulumi:"firehose"`
	// Details about delivering logs to Amazon S3. See below.
	S3 *ConnectorLogDeliveryWorkerLogDeliveryS3 `pulumi:"s3"`
}

type ConnectorLogDeliveryWorkerLogDeliveryArgs struct {
	// Details about delivering logs to Amazon CloudWatch Logs. See below.
	CloudwatchLogs pulumix.Input[*ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsArgs] `pulumi:"cloudwatchLogs"`
	// Details about delivering logs to Amazon Kinesis Data Firehose. See below.
	Firehose pulumix.Input[*ConnectorLogDeliveryWorkerLogDeliveryFirehoseArgs] `pulumi:"firehose"`
	// Details about delivering logs to Amazon S3. See below.
	S3 pulumix.Input[*ConnectorLogDeliveryWorkerLogDeliveryS3Args] `pulumi:"s3"`
}

func (ConnectorLogDeliveryWorkerLogDeliveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorLogDeliveryWorkerLogDelivery)(nil)).Elem()
}

func (i ConnectorLogDeliveryWorkerLogDeliveryArgs) ToConnectorLogDeliveryWorkerLogDeliveryOutput() ConnectorLogDeliveryWorkerLogDeliveryOutput {
	return i.ToConnectorLogDeliveryWorkerLogDeliveryOutputWithContext(context.Background())
}

func (i ConnectorLogDeliveryWorkerLogDeliveryArgs) ToConnectorLogDeliveryWorkerLogDeliveryOutputWithContext(ctx context.Context) ConnectorLogDeliveryWorkerLogDeliveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorLogDeliveryWorkerLogDeliveryOutput)
}

func (i *ConnectorLogDeliveryWorkerLogDeliveryArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorLogDeliveryWorkerLogDeliveryArgs] {
	return pulumix.Val(i)
}

type ConnectorLogDeliveryWorkerLogDeliveryOutput struct{ *pulumi.OutputState }

func (ConnectorLogDeliveryWorkerLogDeliveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorLogDeliveryWorkerLogDelivery)(nil)).Elem()
}

func (o ConnectorLogDeliveryWorkerLogDeliveryOutput) ToConnectorLogDeliveryWorkerLogDeliveryOutput() ConnectorLogDeliveryWorkerLogDeliveryOutput {
	return o
}

func (o ConnectorLogDeliveryWorkerLogDeliveryOutput) ToConnectorLogDeliveryWorkerLogDeliveryOutputWithContext(ctx context.Context) ConnectorLogDeliveryWorkerLogDeliveryOutput {
	return o
}

func (o ConnectorLogDeliveryWorkerLogDeliveryOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorLogDeliveryWorkerLogDelivery] {
	return pulumix.Output[ConnectorLogDeliveryWorkerLogDelivery]{
		OutputState: o.OutputState,
	}
}

// Details about delivering logs to Amazon CloudWatch Logs. See below.
func (o ConnectorLogDeliveryWorkerLogDeliveryOutput) CloudwatchLogs() pulumix.GPtrOutput[ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs, ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput] {
	value := pulumix.Apply[ConnectorLogDeliveryWorkerLogDelivery](o, func(v ConnectorLogDeliveryWorkerLogDelivery) *ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs {
		return v.CloudwatchLogs
	})
	return pulumix.GPtrOutput[ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs, ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput]{OutputState: value.OutputState}
}

// Details about delivering logs to Amazon Kinesis Data Firehose. See below.
func (o ConnectorLogDeliveryWorkerLogDeliveryOutput) Firehose() pulumix.GPtrOutput[ConnectorLogDeliveryWorkerLogDeliveryFirehose, ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput] {
	value := pulumix.Apply[ConnectorLogDeliveryWorkerLogDelivery](o, func(v ConnectorLogDeliveryWorkerLogDelivery) *ConnectorLogDeliveryWorkerLogDeliveryFirehose {
		return v.Firehose
	})
	return pulumix.GPtrOutput[ConnectorLogDeliveryWorkerLogDeliveryFirehose, ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput]{OutputState: value.OutputState}
}

// Details about delivering logs to Amazon S3. See below.
func (o ConnectorLogDeliveryWorkerLogDeliveryOutput) S3() pulumix.GPtrOutput[ConnectorLogDeliveryWorkerLogDeliveryS3, ConnectorLogDeliveryWorkerLogDeliveryS3Output] {
	value := pulumix.Apply[ConnectorLogDeliveryWorkerLogDelivery](o, func(v ConnectorLogDeliveryWorkerLogDelivery) *ConnectorLogDeliveryWorkerLogDeliveryS3 { return v.S3 })
	return pulumix.GPtrOutput[ConnectorLogDeliveryWorkerLogDeliveryS3, ConnectorLogDeliveryWorkerLogDeliveryS3Output]{OutputState: value.OutputState}
}

type ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs struct {
	// Whether log delivery to Amazon CloudWatch Logs is enabled.
	Enabled bool `pulumi:"enabled"`
	// The name of the CloudWatch log group that is the destination for log delivery.
	LogGroup *string `pulumi:"logGroup"`
}

type ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsArgs struct {
	// Whether log delivery to Amazon CloudWatch Logs is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// The name of the CloudWatch log group that is the destination for log delivery.
	LogGroup pulumix.Input[*string] `pulumi:"logGroup"`
}

func (ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs)(nil)).Elem()
}

func (i ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsArgs) ToConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput() ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput {
	return i.ToConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutputWithContext(context.Background())
}

func (i ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsArgs) ToConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutputWithContext(ctx context.Context) ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput)
}

func (i *ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsArgs] {
	return pulumix.Val(i)
}

type ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput struct{ *pulumi.OutputState }

func (ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs)(nil)).Elem()
}

func (o ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput) ToConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput() ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput {
	return o
}

func (o ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput) ToConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutputWithContext(ctx context.Context) ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput {
	return o
}

func (o ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs] {
	return pulumix.Output[ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs]{
		OutputState: o.OutputState,
	}
}

// Whether log delivery to Amazon CloudWatch Logs is enabled.
func (o ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs](o, func(v ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs) bool { return v.Enabled })
}

// The name of the CloudWatch log group that is the destination for log delivery.
func (o ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput) LogGroup() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs](o, func(v ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogs) *string { return v.LogGroup })
}

type ConnectorLogDeliveryWorkerLogDeliveryFirehose struct {
	// The name of the Kinesis Data Firehose delivery stream that is the destination for log delivery.
	DeliveryStream *string `pulumi:"deliveryStream"`
	// Specifies whether connector logs get delivered to Amazon Kinesis Data Firehose.
	Enabled bool `pulumi:"enabled"`
}

type ConnectorLogDeliveryWorkerLogDeliveryFirehoseArgs struct {
	// The name of the Kinesis Data Firehose delivery stream that is the destination for log delivery.
	DeliveryStream pulumix.Input[*string] `pulumi:"deliveryStream"`
	// Specifies whether connector logs get delivered to Amazon Kinesis Data Firehose.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (ConnectorLogDeliveryWorkerLogDeliveryFirehoseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorLogDeliveryWorkerLogDeliveryFirehose)(nil)).Elem()
}

func (i ConnectorLogDeliveryWorkerLogDeliveryFirehoseArgs) ToConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput() ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput {
	return i.ToConnectorLogDeliveryWorkerLogDeliveryFirehoseOutputWithContext(context.Background())
}

func (i ConnectorLogDeliveryWorkerLogDeliveryFirehoseArgs) ToConnectorLogDeliveryWorkerLogDeliveryFirehoseOutputWithContext(ctx context.Context) ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput)
}

func (i *ConnectorLogDeliveryWorkerLogDeliveryFirehoseArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorLogDeliveryWorkerLogDeliveryFirehoseArgs] {
	return pulumix.Val(i)
}

type ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput struct{ *pulumi.OutputState }

func (ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorLogDeliveryWorkerLogDeliveryFirehose)(nil)).Elem()
}

func (o ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput) ToConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput() ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput {
	return o
}

func (o ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput) ToConnectorLogDeliveryWorkerLogDeliveryFirehoseOutputWithContext(ctx context.Context) ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput {
	return o
}

func (o ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorLogDeliveryWorkerLogDeliveryFirehose] {
	return pulumix.Output[ConnectorLogDeliveryWorkerLogDeliveryFirehose]{
		OutputState: o.OutputState,
	}
}

// The name of the Kinesis Data Firehose delivery stream that is the destination for log delivery.
func (o ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput) DeliveryStream() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorLogDeliveryWorkerLogDeliveryFirehose](o, func(v ConnectorLogDeliveryWorkerLogDeliveryFirehose) *string { return v.DeliveryStream })
}

// Specifies whether connector logs get delivered to Amazon Kinesis Data Firehose.
func (o ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[ConnectorLogDeliveryWorkerLogDeliveryFirehose](o, func(v ConnectorLogDeliveryWorkerLogDeliveryFirehose) bool { return v.Enabled })
}

type ConnectorLogDeliveryWorkerLogDeliveryS3 struct {
	// The name of the S3 bucket that is the destination for log delivery.
	Bucket *string `pulumi:"bucket"`
	// Whether log delivery to Amazon CloudWatch Logs is enabled.
	Enabled bool `pulumi:"enabled"`
	// The S3 prefix that is the destination for log delivery.
	Prefix *string `pulumi:"prefix"`
}

type ConnectorLogDeliveryWorkerLogDeliveryS3Args struct {
	// The name of the S3 bucket that is the destination for log delivery.
	Bucket pulumix.Input[*string] `pulumi:"bucket"`
	// Whether log delivery to Amazon CloudWatch Logs is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// The S3 prefix that is the destination for log delivery.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (ConnectorLogDeliveryWorkerLogDeliveryS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorLogDeliveryWorkerLogDeliveryS3)(nil)).Elem()
}

func (i ConnectorLogDeliveryWorkerLogDeliveryS3Args) ToConnectorLogDeliveryWorkerLogDeliveryS3Output() ConnectorLogDeliveryWorkerLogDeliveryS3Output {
	return i.ToConnectorLogDeliveryWorkerLogDeliveryS3OutputWithContext(context.Background())
}

func (i ConnectorLogDeliveryWorkerLogDeliveryS3Args) ToConnectorLogDeliveryWorkerLogDeliveryS3OutputWithContext(ctx context.Context) ConnectorLogDeliveryWorkerLogDeliveryS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorLogDeliveryWorkerLogDeliveryS3Output)
}

func (i *ConnectorLogDeliveryWorkerLogDeliveryS3Args) ToOutput(ctx context.Context) pulumix.Output[*ConnectorLogDeliveryWorkerLogDeliveryS3Args] {
	return pulumix.Val(i)
}

type ConnectorLogDeliveryWorkerLogDeliveryS3Output struct{ *pulumi.OutputState }

func (ConnectorLogDeliveryWorkerLogDeliveryS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorLogDeliveryWorkerLogDeliveryS3)(nil)).Elem()
}

func (o ConnectorLogDeliveryWorkerLogDeliveryS3Output) ToConnectorLogDeliveryWorkerLogDeliveryS3Output() ConnectorLogDeliveryWorkerLogDeliveryS3Output {
	return o
}

func (o ConnectorLogDeliveryWorkerLogDeliveryS3Output) ToConnectorLogDeliveryWorkerLogDeliveryS3OutputWithContext(ctx context.Context) ConnectorLogDeliveryWorkerLogDeliveryS3Output {
	return o
}

func (o ConnectorLogDeliveryWorkerLogDeliveryS3Output) ToOutput(ctx context.Context) pulumix.Output[ConnectorLogDeliveryWorkerLogDeliveryS3] {
	return pulumix.Output[ConnectorLogDeliveryWorkerLogDeliveryS3]{
		OutputState: o.OutputState,
	}
}

// The name of the S3 bucket that is the destination for log delivery.
func (o ConnectorLogDeliveryWorkerLogDeliveryS3Output) Bucket() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorLogDeliveryWorkerLogDeliveryS3](o, func(v ConnectorLogDeliveryWorkerLogDeliveryS3) *string { return v.Bucket })
}

// Whether log delivery to Amazon CloudWatch Logs is enabled.
func (o ConnectorLogDeliveryWorkerLogDeliveryS3Output) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[ConnectorLogDeliveryWorkerLogDeliveryS3](o, func(v ConnectorLogDeliveryWorkerLogDeliveryS3) bool { return v.Enabled })
}

// The S3 prefix that is the destination for log delivery.
func (o ConnectorLogDeliveryWorkerLogDeliveryS3Output) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[ConnectorLogDeliveryWorkerLogDeliveryS3](o, func(v ConnectorLogDeliveryWorkerLogDeliveryS3) *string { return v.Prefix })
}

type ConnectorPlugin struct {
	// Details about a custom plugin. See below.
	CustomPlugin ConnectorPluginCustomPlugin `pulumi:"customPlugin"`
}

type ConnectorPluginArgs struct {
	// Details about a custom plugin. See below.
	CustomPlugin pulumix.Input[*ConnectorPluginCustomPluginArgs] `pulumi:"customPlugin"`
}

func (ConnectorPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorPlugin)(nil)).Elem()
}

func (i ConnectorPluginArgs) ToConnectorPluginOutput() ConnectorPluginOutput {
	return i.ToConnectorPluginOutputWithContext(context.Background())
}

func (i ConnectorPluginArgs) ToConnectorPluginOutputWithContext(ctx context.Context) ConnectorPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorPluginOutput)
}

func (i *ConnectorPluginArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorPluginArgs] {
	return pulumix.Val(i)
}

type ConnectorPluginOutput struct{ *pulumi.OutputState }

func (ConnectorPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorPlugin)(nil)).Elem()
}

func (o ConnectorPluginOutput) ToConnectorPluginOutput() ConnectorPluginOutput {
	return o
}

func (o ConnectorPluginOutput) ToConnectorPluginOutputWithContext(ctx context.Context) ConnectorPluginOutput {
	return o
}

func (o ConnectorPluginOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorPlugin] {
	return pulumix.Output[ConnectorPlugin]{
		OutputState: o.OutputState,
	}
}

// Details about a custom plugin. See below.
func (o ConnectorPluginOutput) CustomPlugin() pulumix.GPtrOutput[ConnectorPluginCustomPlugin, ConnectorPluginCustomPluginOutput] {
	value := pulumix.Apply[ConnectorPlugin](o, func(v ConnectorPlugin) ConnectorPluginCustomPlugin { return v.CustomPlugin })
	return pulumix.GPtrOutput[ConnectorPluginCustomPlugin, ConnectorPluginCustomPluginOutput]{OutputState: value.OutputState}
}

type ConnectorPluginCustomPlugin struct {
	// The Amazon Resource Name (ARN) of the custom plugin.
	Arn string `pulumi:"arn"`
	// The revision of the custom plugin.
	Revision int `pulumi:"revision"`
}

type ConnectorPluginCustomPluginArgs struct {
	// The Amazon Resource Name (ARN) of the custom plugin.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The revision of the custom plugin.
	Revision pulumix.Input[int] `pulumi:"revision"`
}

func (ConnectorPluginCustomPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorPluginCustomPlugin)(nil)).Elem()
}

func (i ConnectorPluginCustomPluginArgs) ToConnectorPluginCustomPluginOutput() ConnectorPluginCustomPluginOutput {
	return i.ToConnectorPluginCustomPluginOutputWithContext(context.Background())
}

func (i ConnectorPluginCustomPluginArgs) ToConnectorPluginCustomPluginOutputWithContext(ctx context.Context) ConnectorPluginCustomPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorPluginCustomPluginOutput)
}

func (i *ConnectorPluginCustomPluginArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorPluginCustomPluginArgs] {
	return pulumix.Val(i)
}

type ConnectorPluginCustomPluginOutput struct{ *pulumi.OutputState }

func (ConnectorPluginCustomPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorPluginCustomPlugin)(nil)).Elem()
}

func (o ConnectorPluginCustomPluginOutput) ToConnectorPluginCustomPluginOutput() ConnectorPluginCustomPluginOutput {
	return o
}

func (o ConnectorPluginCustomPluginOutput) ToConnectorPluginCustomPluginOutputWithContext(ctx context.Context) ConnectorPluginCustomPluginOutput {
	return o
}

func (o ConnectorPluginCustomPluginOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorPluginCustomPlugin] {
	return pulumix.Output[ConnectorPluginCustomPlugin]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the custom plugin.
func (o ConnectorPluginCustomPluginOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[ConnectorPluginCustomPlugin](o, func(v ConnectorPluginCustomPlugin) string { return v.Arn })
}

// The revision of the custom plugin.
func (o ConnectorPluginCustomPluginOutput) Revision() pulumix.Output[int] {
	return pulumix.Apply[ConnectorPluginCustomPlugin](o, func(v ConnectorPluginCustomPlugin) int { return v.Revision })
}

type ConnectorWorkerConfiguration struct {
	// The Amazon Resource Name (ARN) of the worker configuration.
	Arn string `pulumi:"arn"`
	// The revision of the worker configuration.
	Revision int `pulumi:"revision"`
}

type ConnectorWorkerConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the worker configuration.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The revision of the worker configuration.
	Revision pulumix.Input[int] `pulumi:"revision"`
}

func (ConnectorWorkerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorWorkerConfiguration)(nil)).Elem()
}

func (i ConnectorWorkerConfigurationArgs) ToConnectorWorkerConfigurationOutput() ConnectorWorkerConfigurationOutput {
	return i.ToConnectorWorkerConfigurationOutputWithContext(context.Background())
}

func (i ConnectorWorkerConfigurationArgs) ToConnectorWorkerConfigurationOutputWithContext(ctx context.Context) ConnectorWorkerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorWorkerConfigurationOutput)
}

func (i *ConnectorWorkerConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectorWorkerConfigurationArgs] {
	return pulumix.Val(i)
}

type ConnectorWorkerConfigurationOutput struct{ *pulumi.OutputState }

func (ConnectorWorkerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorWorkerConfiguration)(nil)).Elem()
}

func (o ConnectorWorkerConfigurationOutput) ToConnectorWorkerConfigurationOutput() ConnectorWorkerConfigurationOutput {
	return o
}

func (o ConnectorWorkerConfigurationOutput) ToConnectorWorkerConfigurationOutputWithContext(ctx context.Context) ConnectorWorkerConfigurationOutput {
	return o
}

func (o ConnectorWorkerConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorWorkerConfiguration] {
	return pulumix.Output[ConnectorWorkerConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the worker configuration.
func (o ConnectorWorkerConfigurationOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[ConnectorWorkerConfiguration](o, func(v ConnectorWorkerConfiguration) string { return v.Arn })
}

// The revision of the worker configuration.
func (o ConnectorWorkerConfigurationOutput) Revision() pulumix.Output[int] {
	return pulumix.Apply[ConnectorWorkerConfiguration](o, func(v ConnectorWorkerConfiguration) int { return v.Revision })
}

type CustomPluginLocation struct {
	// Information of the plugin file stored in Amazon S3. See below.
	S3 CustomPluginLocationS3 `pulumi:"s3"`
}

type CustomPluginLocationArgs struct {
	// Information of the plugin file stored in Amazon S3. See below.
	S3 pulumix.Input[*CustomPluginLocationS3Args] `pulumi:"s3"`
}

func (CustomPluginLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomPluginLocation)(nil)).Elem()
}

func (i CustomPluginLocationArgs) ToCustomPluginLocationOutput() CustomPluginLocationOutput {
	return i.ToCustomPluginLocationOutputWithContext(context.Background())
}

func (i CustomPluginLocationArgs) ToCustomPluginLocationOutputWithContext(ctx context.Context) CustomPluginLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomPluginLocationOutput)
}

func (i *CustomPluginLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomPluginLocationArgs] {
	return pulumix.Val(i)
}

type CustomPluginLocationOutput struct{ *pulumi.OutputState }

func (CustomPluginLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomPluginLocation)(nil)).Elem()
}

func (o CustomPluginLocationOutput) ToCustomPluginLocationOutput() CustomPluginLocationOutput {
	return o
}

func (o CustomPluginLocationOutput) ToCustomPluginLocationOutputWithContext(ctx context.Context) CustomPluginLocationOutput {
	return o
}

func (o CustomPluginLocationOutput) ToOutput(ctx context.Context) pulumix.Output[CustomPluginLocation] {
	return pulumix.Output[CustomPluginLocation]{
		OutputState: o.OutputState,
	}
}

// Information of the plugin file stored in Amazon S3. See below.
func (o CustomPluginLocationOutput) S3() pulumix.GPtrOutput[CustomPluginLocationS3, CustomPluginLocationS3Output] {
	value := pulumix.Apply[CustomPluginLocation](o, func(v CustomPluginLocation) CustomPluginLocationS3 { return v.S3 })
	return pulumix.GPtrOutput[CustomPluginLocationS3, CustomPluginLocationS3Output]{OutputState: value.OutputState}
}

type CustomPluginLocationS3 struct {
	// The Amazon Resource Name (ARN) of an S3 bucket.
	BucketArn string `pulumi:"bucketArn"`
	// The file key for an object in an S3 bucket.
	FileKey string `pulumi:"fileKey"`
	// The version of an object in an S3 bucket.
	ObjectVersion *string `pulumi:"objectVersion"`
}

type CustomPluginLocationS3Args struct {
	// The Amazon Resource Name (ARN) of an S3 bucket.
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// The file key for an object in an S3 bucket.
	FileKey pulumix.Input[string] `pulumi:"fileKey"`
	// The version of an object in an S3 bucket.
	ObjectVersion pulumix.Input[*string] `pulumi:"objectVersion"`
}

func (CustomPluginLocationS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomPluginLocationS3)(nil)).Elem()
}

func (i CustomPluginLocationS3Args) ToCustomPluginLocationS3Output() CustomPluginLocationS3Output {
	return i.ToCustomPluginLocationS3OutputWithContext(context.Background())
}

func (i CustomPluginLocationS3Args) ToCustomPluginLocationS3OutputWithContext(ctx context.Context) CustomPluginLocationS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(CustomPluginLocationS3Output)
}

func (i *CustomPluginLocationS3Args) ToOutput(ctx context.Context) pulumix.Output[*CustomPluginLocationS3Args] {
	return pulumix.Val(i)
}

type CustomPluginLocationS3Output struct{ *pulumi.OutputState }

func (CustomPluginLocationS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomPluginLocationS3)(nil)).Elem()
}

func (o CustomPluginLocationS3Output) ToCustomPluginLocationS3Output() CustomPluginLocationS3Output {
	return o
}

func (o CustomPluginLocationS3Output) ToCustomPluginLocationS3OutputWithContext(ctx context.Context) CustomPluginLocationS3Output {
	return o
}

func (o CustomPluginLocationS3Output) ToOutput(ctx context.Context) pulumix.Output[CustomPluginLocationS3] {
	return pulumix.Output[CustomPluginLocationS3]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of an S3 bucket.
func (o CustomPluginLocationS3Output) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[CustomPluginLocationS3](o, func(v CustomPluginLocationS3) string { return v.BucketArn })
}

// The file key for an object in an S3 bucket.
func (o CustomPluginLocationS3Output) FileKey() pulumix.Output[string] {
	return pulumix.Apply[CustomPluginLocationS3](o, func(v CustomPluginLocationS3) string { return v.FileKey })
}

// The version of an object in an S3 bucket.
func (o CustomPluginLocationS3Output) ObjectVersion() pulumix.Output[*string] {
	return pulumix.Apply[CustomPluginLocationS3](o, func(v CustomPluginLocationS3) *string { return v.ObjectVersion })
}

func init() {
	pulumi.RegisterOutputType(ConnectorCapacityOutput{})
	pulumi.RegisterOutputType(ConnectorCapacityAutoscalingOutput{})
	pulumi.RegisterOutputType(ConnectorCapacityAutoscalingScaleInPolicyOutput{})
	pulumi.RegisterOutputType(ConnectorCapacityAutoscalingScaleOutPolicyOutput{})
	pulumi.RegisterOutputType(ConnectorCapacityProvisionedCapacityOutput{})
	pulumi.RegisterOutputType(ConnectorKafkaClusterOutput{})
	pulumi.RegisterOutputType(ConnectorKafkaClusterApacheKafkaClusterOutput{})
	pulumi.RegisterOutputType(ConnectorKafkaClusterApacheKafkaClusterVpcOutput{})
	pulumi.RegisterOutputType(ConnectorKafkaClusterClientAuthenticationOutput{})
	pulumi.RegisterOutputType(ConnectorKafkaClusterEncryptionInTransitOutput{})
	pulumi.RegisterOutputType(ConnectorLogDeliveryOutput{})
	pulumi.RegisterOutputType(ConnectorLogDeliveryWorkerLogDeliveryOutput{})
	pulumi.RegisterOutputType(ConnectorLogDeliveryWorkerLogDeliveryCloudwatchLogsOutput{})
	pulumi.RegisterOutputType(ConnectorLogDeliveryWorkerLogDeliveryFirehoseOutput{})
	pulumi.RegisterOutputType(ConnectorLogDeliveryWorkerLogDeliveryS3Output{})
	pulumi.RegisterOutputType(ConnectorPluginOutput{})
	pulumi.RegisterOutputType(ConnectorPluginCustomPluginOutput{})
	pulumi.RegisterOutputType(ConnectorWorkerConfigurationOutput{})
	pulumi.RegisterOutputType(CustomPluginLocationOutput{})
	pulumi.RegisterOutputType(CustomPluginLocationS3Output{})
}
