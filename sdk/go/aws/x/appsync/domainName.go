// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppSync Domain Name.
type DomainName struct {
	pulumi.CustomResourceState

	// Domain name that AppSync provides.
	AppsyncDomainName pulumix.Output[string] `pulumi:"appsyncDomainName"`
	// ARN of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
	CertificateArn pulumix.Output[string] `pulumi:"certificateArn"`
	// A description of the Domain Name.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Domain name.
	DomainName pulumix.Output[string] `pulumi:"domainName"`
	// ID of your Amazon Route 53 hosted zone.
	HostedZoneId pulumix.Output[string] `pulumi:"hostedZoneId"`
}

// NewDomainName registers a new resource with the given unique name, arguments, and options.
func NewDomainName(ctx *pulumi.Context,
	name string, args *DomainNameArgs, opts ...pulumi.ResourceOption) (*DomainName, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateArn == nil {
		return nil, errors.New("invalid value for required argument 'CertificateArn'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainName
	err := ctx.RegisterResource("aws:appsync/domainName:DomainName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainName gets an existing DomainName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainNameState, opts ...pulumi.ResourceOption) (*DomainName, error) {
	var resource DomainName
	err := ctx.ReadResource("aws:appsync/domainName:DomainName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainName resources.
type domainNameState struct {
	// Domain name that AppSync provides.
	AppsyncDomainName *string `pulumi:"appsyncDomainName"`
	// ARN of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
	CertificateArn *string `pulumi:"certificateArn"`
	// A description of the Domain Name.
	Description *string `pulumi:"description"`
	// Domain name.
	DomainName *string `pulumi:"domainName"`
	// ID of your Amazon Route 53 hosted zone.
	HostedZoneId *string `pulumi:"hostedZoneId"`
}

type DomainNameState struct {
	// Domain name that AppSync provides.
	AppsyncDomainName pulumix.Input[*string]
	// ARN of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
	CertificateArn pulumix.Input[*string]
	// A description of the Domain Name.
	Description pulumix.Input[*string]
	// Domain name.
	DomainName pulumix.Input[*string]
	// ID of your Amazon Route 53 hosted zone.
	HostedZoneId pulumix.Input[*string]
}

func (DomainNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameState)(nil)).Elem()
}

type domainNameArgs struct {
	// ARN of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
	CertificateArn string `pulumi:"certificateArn"`
	// A description of the Domain Name.
	Description *string `pulumi:"description"`
	// Domain name.
	DomainName string `pulumi:"domainName"`
}

// The set of arguments for constructing a DomainName resource.
type DomainNameArgs struct {
	// ARN of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
	CertificateArn pulumix.Input[string]
	// A description of the Domain Name.
	Description pulumix.Input[*string]
	// Domain name.
	DomainName pulumix.Input[string]
}

func (DomainNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameArgs)(nil)).Elem()
}

type DomainNameOutput struct{ *pulumi.OutputState }

func (DomainNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainName)(nil)).Elem()
}

func (o DomainNameOutput) ToDomainNameOutput() DomainNameOutput {
	return o
}

func (o DomainNameOutput) ToDomainNameOutputWithContext(ctx context.Context) DomainNameOutput {
	return o
}

func (o DomainNameOutput) ToOutput(ctx context.Context) pulumix.Output[DomainName] {
	return pulumix.Output[DomainName]{
		OutputState: o.OutputState,
	}
}

// Domain name that AppSync provides.
func (o DomainNameOutput) AppsyncDomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.AppsyncDomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
func (o DomainNameOutput) CertificateArn() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.CertificateArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the Domain Name.
func (o DomainNameOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Domain name.
func (o DomainNameOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of your Amazon Route 53 hosted zone.
func (o DomainNameOutput) HostedZoneId() pulumix.Output[string] {
	value := pulumix.Apply[DomainName](o, func(v DomainName) pulumix.Output[string] { return v.HostedZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DomainNameOutput{})
}
