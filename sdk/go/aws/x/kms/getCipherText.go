// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The KMS ciphertext data source allows you to encrypt plaintext into ciphertext
// by using an AWS KMS customer master key. The value returned by this data source
// changes every apply. For a stable ciphertext value, see the `kms.Ciphertext`
// resource.
func GetCipherText(ctx *pulumi.Context, args *GetCipherTextArgs, opts ...pulumi.InvokeOption) (*GetCipherTextResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCipherTextResult
	err := ctx.Invoke("aws:kms/getCipherText:getCipherText", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCipherText.
type GetCipherTextArgs struct {
	// An optional mapping that makes up the encryption context.
	Context map[string]string `pulumi:"context"`
	// Globally unique key ID for the customer master key.
	KeyId string `pulumi:"keyId"`
	// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
	Plaintext string `pulumi:"plaintext"`
}

// A collection of values returned by getCipherText.
type GetCipherTextResult struct {
	// Base64 encoded ciphertext
	CiphertextBlob string            `pulumi:"ciphertextBlob"`
	Context        map[string]string `pulumi:"context"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	KeyId     string `pulumi:"keyId"`
	Plaintext string `pulumi:"plaintext"`
}

func GetCipherTextOutput(ctx *pulumi.Context, args GetCipherTextOutputArgs, opts ...pulumi.InvokeOption) GetCipherTextResultOutput {
	outputResult := pulumix.ApplyErr[*GetCipherTextArgs](args.ToOutput(), func(plainArgs *GetCipherTextArgs) (*GetCipherTextResult, error) {
		return GetCipherText(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetCipherTextResultOutput, *GetCipherTextResult](outputResult)
}

// A collection of arguments for invoking getCipherText.
type GetCipherTextOutputArgs struct {
	// An optional mapping that makes up the encryption context.
	Context pulumix.Input[map[string]string] `pulumi:"context"`
	// Globally unique key ID for the customer master key.
	KeyId pulumix.Input[string] `pulumi:"keyId"`
	// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
	Plaintext pulumix.Input[string] `pulumi:"plaintext"`
}

func (args GetCipherTextOutputArgs) ToOutput() pulumix.Output[*GetCipherTextArgs] {
	allArgs := pulumix.All(
		args.Context.ToOutput(context.Background()).AsAny(),
		args.KeyId.ToOutput(context.Background()).AsAny(),
		args.Plaintext.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetCipherTextArgs {
		return &GetCipherTextArgs{
			Context:   resolvedArgs[0].(map[string]string),
			KeyId:     resolvedArgs[1].(string),
			Plaintext: resolvedArgs[2].(string),
		}
	})
}

type GetCipherTextResultOutput struct{ *pulumi.OutputState }

func (GetCipherTextResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCipherTextResult)(nil)).Elem()
}

func (o GetCipherTextResultOutput) ToOutput(context.Context) pulumix.Output[*GetCipherTextResult] {
	return pulumix.Output[*GetCipherTextResult]{
		OutputState: o.OutputState,
	}
}

func (o GetCipherTextResultOutput) CiphertextBlob() pulumix.Output[string] {
	return pulumix.Apply[*GetCipherTextResult](o, func(v *GetCipherTextResult) string { return v.CiphertextBlob })
}

func (o GetCipherTextResultOutput) Context() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetCipherTextResult](o, func(v *GetCipherTextResult) map[string]string { return v.Context })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetCipherTextResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetCipherTextResult](o, func(v *GetCipherTextResult) string { return v.Id })
}

func (o GetCipherTextResultOutput) KeyId() pulumix.Output[string] {
	return pulumix.Apply[*GetCipherTextResult](o, func(v *GetCipherTextResult) string { return v.KeyId })
}

func (o GetCipherTextResultOutput) Plaintext() pulumix.Output[string] {
	return pulumix.Apply[*GetCipherTextResult](o, func(v *GetCipherTextResult) string { return v.Plaintext })
}
