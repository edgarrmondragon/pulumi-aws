// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codecatalyst

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS CodeCatalyst Dev Environment.
type DevEnvironment struct {
	pulumi.CustomResourceState

	Alias pulumix.Output[*string] `pulumi:"alias"`
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides pulumix.GPtrOutput[DevEnvironmentIdes, DevEnvironmentIdesOutput] `pulumi:"ides"`
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes pulumix.Output[*int] `pulumi:"inactivityTimeoutMinutes"`
	// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
	//
	// The following arguments are optional:
	InstanceType pulumix.Output[string] `pulumi:"instanceType"`
	// Information about the amount of storage allocated to the Dev Environment.
	PersistentStorage pulumix.GPtrOutput[DevEnvironmentPersistentStorage, DevEnvironmentPersistentStorageOutput] `pulumi:"persistentStorage"`
	// The name of the project in the space.
	ProjectName pulumix.Output[string] `pulumi:"projectName"`
	// The source repository that contains the branch to clone into the Dev Environment.
	Repositories pulumix.GArrayOutput[DevEnvironmentRepository, DevEnvironmentRepositoryOutput] `pulumi:"repositories"`
	// The name of the space.
	SpaceName pulumix.Output[string] `pulumi:"spaceName"`
}

// NewDevEnvironment registers a new resource with the given unique name, arguments, and options.
func NewDevEnvironment(ctx *pulumi.Context,
	name string, args *DevEnvironmentArgs, opts ...pulumi.ResourceOption) (*DevEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ides == nil {
		return nil, errors.New("invalid value for required argument 'Ides'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	if args.PersistentStorage == nil {
		return nil, errors.New("invalid value for required argument 'PersistentStorage'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.SpaceName == nil {
		return nil, errors.New("invalid value for required argument 'SpaceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevEnvironment
	err := ctx.RegisterResource("aws:codecatalyst/devEnvironment:DevEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevEnvironment gets an existing DevEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevEnvironmentState, opts ...pulumi.ResourceOption) (*DevEnvironment, error) {
	var resource DevEnvironment
	err := ctx.ReadResource("aws:codecatalyst/devEnvironment:DevEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevEnvironment resources.
type devEnvironmentState struct {
	Alias *string `pulumi:"alias"`
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides *DevEnvironmentIdes `pulumi:"ides"`
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes *int `pulumi:"inactivityTimeoutMinutes"`
	// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
	//
	// The following arguments are optional:
	InstanceType *string `pulumi:"instanceType"`
	// Information about the amount of storage allocated to the Dev Environment.
	PersistentStorage *DevEnvironmentPersistentStorage `pulumi:"persistentStorage"`
	// The name of the project in the space.
	ProjectName *string `pulumi:"projectName"`
	// The source repository that contains the branch to clone into the Dev Environment.
	Repositories []DevEnvironmentRepository `pulumi:"repositories"`
	// The name of the space.
	SpaceName *string `pulumi:"spaceName"`
}

type DevEnvironmentState struct {
	Alias pulumix.Input[*string]
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides pulumix.Input[*DevEnvironmentIdesArgs]
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes pulumix.Input[*int]
	// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
	//
	// The following arguments are optional:
	InstanceType pulumix.Input[*string]
	// Information about the amount of storage allocated to the Dev Environment.
	PersistentStorage pulumix.Input[*DevEnvironmentPersistentStorageArgs]
	// The name of the project in the space.
	ProjectName pulumix.Input[*string]
	// The source repository that contains the branch to clone into the Dev Environment.
	Repositories pulumix.Input[[]*DevEnvironmentRepositoryArgs]
	// The name of the space.
	SpaceName pulumix.Input[*string]
}

func (DevEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*devEnvironmentState)(nil)).Elem()
}

type devEnvironmentArgs struct {
	Alias *string `pulumi:"alias"`
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides DevEnvironmentIdes `pulumi:"ides"`
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes *int `pulumi:"inactivityTimeoutMinutes"`
	// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
	//
	// The following arguments are optional:
	InstanceType string `pulumi:"instanceType"`
	// Information about the amount of storage allocated to the Dev Environment.
	PersistentStorage DevEnvironmentPersistentStorage `pulumi:"persistentStorage"`
	// The name of the project in the space.
	ProjectName string `pulumi:"projectName"`
	// The source repository that contains the branch to clone into the Dev Environment.
	Repositories []DevEnvironmentRepository `pulumi:"repositories"`
	// The name of the space.
	SpaceName string `pulumi:"spaceName"`
}

// The set of arguments for constructing a DevEnvironment resource.
type DevEnvironmentArgs struct {
	Alias pulumix.Input[*string]
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides pulumix.Input[*DevEnvironmentIdesArgs]
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes pulumix.Input[*int]
	// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
	//
	// The following arguments are optional:
	InstanceType pulumix.Input[string]
	// Information about the amount of storage allocated to the Dev Environment.
	PersistentStorage pulumix.Input[*DevEnvironmentPersistentStorageArgs]
	// The name of the project in the space.
	ProjectName pulumix.Input[string]
	// The source repository that contains the branch to clone into the Dev Environment.
	Repositories pulumix.Input[[]*DevEnvironmentRepositoryArgs]
	// The name of the space.
	SpaceName pulumix.Input[string]
}

func (DevEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devEnvironmentArgs)(nil)).Elem()
}

type DevEnvironmentOutput struct{ *pulumi.OutputState }

func (DevEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevEnvironment)(nil)).Elem()
}

func (o DevEnvironmentOutput) ToDevEnvironmentOutput() DevEnvironmentOutput {
	return o
}

func (o DevEnvironmentOutput) ToDevEnvironmentOutputWithContext(ctx context.Context) DevEnvironmentOutput {
	return o
}

func (o DevEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[DevEnvironment] {
	return pulumix.Output[DevEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o DevEnvironmentOutput) Alias() pulumix.Output[*string] {
	value := pulumix.Apply[DevEnvironment](o, func(v DevEnvironment) pulumix.Output[*string] { return v.Alias })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Information about the integrated development environment (IDE) configured for a Dev Environment.
func (o DevEnvironmentOutput) Ides() pulumix.GPtrOutput[DevEnvironmentIdes, DevEnvironmentIdesOutput] {
	value := pulumix.Apply[DevEnvironment](o, func(v DevEnvironment) pulumix.GPtrOutput[DevEnvironmentIdes, DevEnvironmentIdesOutput] { return v.Ides })
	unwrapped := pulumix.Flatten[*DevEnvironmentIdes, pulumix.GPtrOutput[DevEnvironmentIdes, DevEnvironmentIdesOutput]](value)
	return pulumix.GPtrOutput[DevEnvironmentIdes, DevEnvironmentIdesOutput]{OutputState: unwrapped.OutputState}
}

// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
func (o DevEnvironmentOutput) InactivityTimeoutMinutes() pulumix.Output[*int] {
	value := pulumix.Apply[DevEnvironment](o, func(v DevEnvironment) pulumix.Output[*int] { return v.InactivityTimeoutMinutes })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
//
// The following arguments are optional:
func (o DevEnvironmentOutput) InstanceType() pulumix.Output[string] {
	value := pulumix.Apply[DevEnvironment](o, func(v DevEnvironment) pulumix.Output[string] { return v.InstanceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information about the amount of storage allocated to the Dev Environment.
func (o DevEnvironmentOutput) PersistentStorage() pulumix.GPtrOutput[DevEnvironmentPersistentStorage, DevEnvironmentPersistentStorageOutput] {
	value := pulumix.Apply[DevEnvironment](o, func(v DevEnvironment) pulumix.GPtrOutput[DevEnvironmentPersistentStorage, DevEnvironmentPersistentStorageOutput] {
		return v.PersistentStorage
	})
	unwrapped := pulumix.Flatten[*DevEnvironmentPersistentStorage, pulumix.GPtrOutput[DevEnvironmentPersistentStorage, DevEnvironmentPersistentStorageOutput]](value)
	return pulumix.GPtrOutput[DevEnvironmentPersistentStorage, DevEnvironmentPersistentStorageOutput]{OutputState: unwrapped.OutputState}
}

// The name of the project in the space.
func (o DevEnvironmentOutput) ProjectName() pulumix.Output[string] {
	value := pulumix.Apply[DevEnvironment](o, func(v DevEnvironment) pulumix.Output[string] { return v.ProjectName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The source repository that contains the branch to clone into the Dev Environment.
func (o DevEnvironmentOutput) Repositories() pulumix.GArrayOutput[DevEnvironmentRepository, DevEnvironmentRepositoryOutput] {
	value := pulumix.Apply[DevEnvironment](o, func(v DevEnvironment) pulumix.GArrayOutput[DevEnvironmentRepository, DevEnvironmentRepositoryOutput] {
		return v.Repositories
	})
	unwrapped := pulumix.Flatten[[]DevEnvironmentRepository, pulumix.GArrayOutput[DevEnvironmentRepository, DevEnvironmentRepositoryOutput]](value)
	return pulumix.GArrayOutput[DevEnvironmentRepository, DevEnvironmentRepositoryOutput]{OutputState: unwrapped.OutputState}
}

// The name of the space.
func (o DevEnvironmentOutput) SpaceName() pulumix.Output[string] {
	value := pulumix.Apply[DevEnvironment](o, func(v DevEnvironment) pulumix.Output[string] { return v.SpaceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DevEnvironmentOutput{})
}
