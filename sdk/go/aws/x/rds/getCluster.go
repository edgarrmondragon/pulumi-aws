// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about an RDS cluster.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("aws:rds/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// Cluster identifier of the RDS cluster.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// A map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	Arn                              string   `pulumi:"arn"`
	AvailabilityZones                []string `pulumi:"availabilityZones"`
	BacktrackWindow                  int      `pulumi:"backtrackWindow"`
	BackupRetentionPeriod            int      `pulumi:"backupRetentionPeriod"`
	ClusterIdentifier                string   `pulumi:"clusterIdentifier"`
	ClusterMembers                   []string `pulumi:"clusterMembers"`
	ClusterResourceId                string   `pulumi:"clusterResourceId"`
	DatabaseName                     string   `pulumi:"databaseName"`
	DbClusterParameterGroupName      string   `pulumi:"dbClusterParameterGroupName"`
	DbSubnetGroupName                string   `pulumi:"dbSubnetGroupName"`
	DbSystemId                       string   `pulumi:"dbSystemId"`
	EnabledCloudwatchLogsExports     []string `pulumi:"enabledCloudwatchLogsExports"`
	Endpoint                         string   `pulumi:"endpoint"`
	Engine                           string   `pulumi:"engine"`
	EngineMode                       string   `pulumi:"engineMode"`
	EngineVersion                    string   `pulumi:"engineVersion"`
	FinalSnapshotIdentifier          string   `pulumi:"finalSnapshotIdentifier"`
	HostedZoneId                     string   `pulumi:"hostedZoneId"`
	IamDatabaseAuthenticationEnabled bool     `pulumi:"iamDatabaseAuthenticationEnabled"`
	IamRoles                         []string `pulumi:"iamRoles"`
	// The provider-assigned unique ID for this managed resource.
	Id                          string                       `pulumi:"id"`
	KmsKeyId                    string                       `pulumi:"kmsKeyId"`
	MasterUserSecrets           []GetClusterMasterUserSecret `pulumi:"masterUserSecrets"`
	MasterUsername              string                       `pulumi:"masterUsername"`
	NetworkType                 string                       `pulumi:"networkType"`
	Port                        int                          `pulumi:"port"`
	PreferredBackupWindow       string                       `pulumi:"preferredBackupWindow"`
	PreferredMaintenanceWindow  string                       `pulumi:"preferredMaintenanceWindow"`
	ReaderEndpoint              string                       `pulumi:"readerEndpoint"`
	ReplicationSourceIdentifier string                       `pulumi:"replicationSourceIdentifier"`
	StorageEncrypted            bool                         `pulumi:"storageEncrypted"`
	// A map of tags assigned to the resource.
	Tags                map[string]string `pulumi:"tags"`
	VpcSecurityGroupIds []string          `pulumi:"vpcSecurityGroupIds"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	outputResult := pulumix.ApplyErr[*LookupClusterArgs](args.ToOutput(), func(plainArgs *LookupClusterArgs) (*LookupClusterResult, error) {
		return LookupCluster(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupClusterResultOutput, *LookupClusterResult](outputResult)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// Cluster identifier of the RDS cluster.
	ClusterIdentifier pulumix.Input[string] `pulumi:"clusterIdentifier"`
	// A map of tags assigned to the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupClusterOutputArgs) ToOutput() pulumix.Output[*LookupClusterArgs] {
	allArgs := pulumix.All(
		args.ClusterIdentifier.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupClusterArgs {
		return &LookupClusterArgs{
			ClusterIdentifier: resolvedArgs[0].(string),
			Tags:              resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToOutput(context.Context) pulumix.Output[*LookupClusterResult] {
	return pulumix.Output[*LookupClusterResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupClusterResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Arn })
}

func (o LookupClusterResultOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) BacktrackWindow() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.BacktrackWindow })
}

func (o LookupClusterResultOutput) BackupRetentionPeriod() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.BackupRetentionPeriod })
}

func (o LookupClusterResultOutput) ClusterIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterIdentifier })
}

func (o LookupClusterResultOutput) ClusterMembers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.ClusterMembers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) ClusterResourceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterResourceId })
}

func (o LookupClusterResultOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.DatabaseName })
}

func (o LookupClusterResultOutput) DbClusterParameterGroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.DbClusterParameterGroupName })
}

func (o LookupClusterResultOutput) DbSubnetGroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.DbSubnetGroupName })
}

func (o LookupClusterResultOutput) DbSystemId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.DbSystemId })
}

func (o LookupClusterResultOutput) EnabledCloudwatchLogsExports() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.EnabledCloudwatchLogsExports })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Endpoint })
}

func (o LookupClusterResultOutput) Engine() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Engine })
}

func (o LookupClusterResultOutput) EngineMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.EngineMode })
}

func (o LookupClusterResultOutput) EngineVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.EngineVersion })
}

func (o LookupClusterResultOutput) FinalSnapshotIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.FinalSnapshotIdentifier })
}

func (o LookupClusterResultOutput) HostedZoneId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.HostedZoneId })
}

func (o LookupClusterResultOutput) IamDatabaseAuthenticationEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.IamDatabaseAuthenticationEnabled })
}

func (o LookupClusterResultOutput) IamRoles() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.IamRoles })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Id })
}

func (o LookupClusterResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.KmsKeyId })
}

func (o LookupClusterResultOutput) MasterUserSecrets() pulumix.GArrayOutput[GetClusterMasterUserSecret, GetClusterMasterUserSecretOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterMasterUserSecret { return v.MasterUserSecrets })
	return pulumix.GArrayOutput[GetClusterMasterUserSecret, GetClusterMasterUserSecretOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) MasterUsername() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.MasterUsername })
}

func (o LookupClusterResultOutput) NetworkType() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.NetworkType })
}

func (o LookupClusterResultOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.Port })
}

func (o LookupClusterResultOutput) PreferredBackupWindow() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.PreferredBackupWindow })
}

func (o LookupClusterResultOutput) PreferredMaintenanceWindow() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.PreferredMaintenanceWindow })
}

func (o LookupClusterResultOutput) ReaderEndpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ReaderEndpoint })
}

func (o LookupClusterResultOutput) ReplicationSourceIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ReplicationSourceIdentifier })
}

func (o LookupClusterResultOutput) StorageEncrypted() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.StorageEncrypted })
}

func (o LookupClusterResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) VpcSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.VpcSecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
