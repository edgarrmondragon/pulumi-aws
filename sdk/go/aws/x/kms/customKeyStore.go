// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS KMS (Key Management) Custom Key Store.
type CustomKeyStore struct {
	pulumi.CustomResourceState

	// Cluster ID of CloudHSM.
	CloudHsmClusterId pulumix.Output[string] `pulumi:"cloudHsmClusterId"`
	// Unique name for Custom Key Store.
	CustomKeyStoreName pulumix.Output[string] `pulumi:"customKeyStoreName"`
	// Password for `kmsuser` on CloudHSM.
	KeyStorePassword pulumix.Output[string] `pulumi:"keyStorePassword"`
	// Customer certificate used for signing on CloudHSM.
	TrustAnchorCertificate pulumix.Output[string] `pulumi:"trustAnchorCertificate"`
}

// NewCustomKeyStore registers a new resource with the given unique name, arguments, and options.
func NewCustomKeyStore(ctx *pulumi.Context,
	name string, args *CustomKeyStoreArgs, opts ...pulumi.ResourceOption) (*CustomKeyStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudHsmClusterId == nil {
		return nil, errors.New("invalid value for required argument 'CloudHsmClusterId'")
	}
	if args.CustomKeyStoreName == nil {
		return nil, errors.New("invalid value for required argument 'CustomKeyStoreName'")
	}
	if args.KeyStorePassword == nil {
		return nil, errors.New("invalid value for required argument 'KeyStorePassword'")
	}
	if args.TrustAnchorCertificate == nil {
		return nil, errors.New("invalid value for required argument 'TrustAnchorCertificate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomKeyStore
	err := ctx.RegisterResource("aws:kms/customKeyStore:CustomKeyStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomKeyStore gets an existing CustomKeyStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomKeyStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomKeyStoreState, opts ...pulumi.ResourceOption) (*CustomKeyStore, error) {
	var resource CustomKeyStore
	err := ctx.ReadResource("aws:kms/customKeyStore:CustomKeyStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomKeyStore resources.
type customKeyStoreState struct {
	// Cluster ID of CloudHSM.
	CloudHsmClusterId *string `pulumi:"cloudHsmClusterId"`
	// Unique name for Custom Key Store.
	CustomKeyStoreName *string `pulumi:"customKeyStoreName"`
	// Password for `kmsuser` on CloudHSM.
	KeyStorePassword *string `pulumi:"keyStorePassword"`
	// Customer certificate used for signing on CloudHSM.
	TrustAnchorCertificate *string `pulumi:"trustAnchorCertificate"`
}

type CustomKeyStoreState struct {
	// Cluster ID of CloudHSM.
	CloudHsmClusterId pulumix.Input[*string]
	// Unique name for Custom Key Store.
	CustomKeyStoreName pulumix.Input[*string]
	// Password for `kmsuser` on CloudHSM.
	KeyStorePassword pulumix.Input[*string]
	// Customer certificate used for signing on CloudHSM.
	TrustAnchorCertificate pulumix.Input[*string]
}

func (CustomKeyStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*customKeyStoreState)(nil)).Elem()
}

type customKeyStoreArgs struct {
	// Cluster ID of CloudHSM.
	CloudHsmClusterId string `pulumi:"cloudHsmClusterId"`
	// Unique name for Custom Key Store.
	CustomKeyStoreName string `pulumi:"customKeyStoreName"`
	// Password for `kmsuser` on CloudHSM.
	KeyStorePassword string `pulumi:"keyStorePassword"`
	// Customer certificate used for signing on CloudHSM.
	TrustAnchorCertificate string `pulumi:"trustAnchorCertificate"`
}

// The set of arguments for constructing a CustomKeyStore resource.
type CustomKeyStoreArgs struct {
	// Cluster ID of CloudHSM.
	CloudHsmClusterId pulumix.Input[string]
	// Unique name for Custom Key Store.
	CustomKeyStoreName pulumix.Input[string]
	// Password for `kmsuser` on CloudHSM.
	KeyStorePassword pulumix.Input[string]
	// Customer certificate used for signing on CloudHSM.
	TrustAnchorCertificate pulumix.Input[string]
}

func (CustomKeyStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customKeyStoreArgs)(nil)).Elem()
}

type CustomKeyStoreOutput struct{ *pulumi.OutputState }

func (CustomKeyStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomKeyStore)(nil)).Elem()
}

func (o CustomKeyStoreOutput) ToCustomKeyStoreOutput() CustomKeyStoreOutput {
	return o
}

func (o CustomKeyStoreOutput) ToCustomKeyStoreOutputWithContext(ctx context.Context) CustomKeyStoreOutput {
	return o
}

func (o CustomKeyStoreOutput) ToOutput(ctx context.Context) pulumix.Output[CustomKeyStore] {
	return pulumix.Output[CustomKeyStore]{
		OutputState: o.OutputState,
	}
}

// Cluster ID of CloudHSM.
func (o CustomKeyStoreOutput) CloudHsmClusterId() pulumix.Output[string] {
	value := pulumix.Apply[CustomKeyStore](o, func(v CustomKeyStore) pulumix.Output[string] { return v.CloudHsmClusterId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique name for Custom Key Store.
func (o CustomKeyStoreOutput) CustomKeyStoreName() pulumix.Output[string] {
	value := pulumix.Apply[CustomKeyStore](o, func(v CustomKeyStore) pulumix.Output[string] { return v.CustomKeyStoreName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Password for `kmsuser` on CloudHSM.
func (o CustomKeyStoreOutput) KeyStorePassword() pulumix.Output[string] {
	value := pulumix.Apply[CustomKeyStore](o, func(v CustomKeyStore) pulumix.Output[string] { return v.KeyStorePassword })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Customer certificate used for signing on CloudHSM.
func (o CustomKeyStoreOutput) TrustAnchorCertificate() pulumix.Output[string] {
	value := pulumix.Apply[CustomKeyStore](o, func(v CustomKeyStore) pulumix.Output[string] { return v.TrustAnchorCertificate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CustomKeyStoreOutput{})
}
