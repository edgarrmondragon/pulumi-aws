// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Service Catalog Constraint.
//
// > **NOTE:** This resource does not associate a Service Catalog product and portfolio. However, the product and portfolio must be associated (see the `servicecatalog.ProductPortfolioAssociation` resource) prior to creating a constraint or you will receive an error.
type Constraint struct {
	pulumi.CustomResourceState

	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage pulumix.Output[*string] `pulumi:"acceptLanguage"`
	// Description of the constraint.
	Description pulumix.Output[string] `pulumi:"description"`
	// Owner of the constraint.
	Owner pulumix.Output[string] `pulumi:"owner"`
	// Constraint parameters in JSON format. The syntax depends on the constraint type. See details below.
	Parameters pulumix.Output[string] `pulumi:"parameters"`
	// Portfolio identifier.
	PortfolioId pulumix.Output[string] `pulumi:"portfolioId"`
	// Product identifier.
	ProductId pulumix.Output[string] `pulumi:"productId"`
	Status    pulumix.Output[string] `pulumi:"status"`
	// Type of constraint. Valid values are `LAUNCH`, `NOTIFICATION`, `RESOURCE_UPDATE`, `STACKSET`, and `TEMPLATE`.
	//
	// The following arguments are optional:
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewConstraint registers a new resource with the given unique name, arguments, and options.
func NewConstraint(ctx *pulumi.Context,
	name string, args *ConstraintArgs, opts ...pulumi.ResourceOption) (*Constraint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.PortfolioId == nil {
		return nil, errors.New("invalid value for required argument 'PortfolioId'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Constraint
	err := ctx.RegisterResource("aws:servicecatalog/constraint:Constraint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConstraint gets an existing Constraint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConstraint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConstraintState, opts ...pulumi.ResourceOption) (*Constraint, error) {
	var resource Constraint
	err := ctx.ReadResource("aws:servicecatalog/constraint:Constraint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Constraint resources.
type constraintState struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Description of the constraint.
	Description *string `pulumi:"description"`
	// Owner of the constraint.
	Owner *string `pulumi:"owner"`
	// Constraint parameters in JSON format. The syntax depends on the constraint type. See details below.
	Parameters *string `pulumi:"parameters"`
	// Portfolio identifier.
	PortfolioId *string `pulumi:"portfolioId"`
	// Product identifier.
	ProductId *string `pulumi:"productId"`
	Status    *string `pulumi:"status"`
	// Type of constraint. Valid values are `LAUNCH`, `NOTIFICATION`, `RESOURCE_UPDATE`, `STACKSET`, and `TEMPLATE`.
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
}

type ConstraintState struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage pulumix.Input[*string]
	// Description of the constraint.
	Description pulumix.Input[*string]
	// Owner of the constraint.
	Owner pulumix.Input[*string]
	// Constraint parameters in JSON format. The syntax depends on the constraint type. See details below.
	Parameters pulumix.Input[*string]
	// Portfolio identifier.
	PortfolioId pulumix.Input[*string]
	// Product identifier.
	ProductId pulumix.Input[*string]
	Status    pulumix.Input[*string]
	// Type of constraint. Valid values are `LAUNCH`, `NOTIFICATION`, `RESOURCE_UPDATE`, `STACKSET`, and `TEMPLATE`.
	//
	// The following arguments are optional:
	Type pulumix.Input[*string]
}

func (ConstraintState) ElementType() reflect.Type {
	return reflect.TypeOf((*constraintState)(nil)).Elem()
}

type constraintArgs struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Description of the constraint.
	Description *string `pulumi:"description"`
	// Constraint parameters in JSON format. The syntax depends on the constraint type. See details below.
	Parameters string `pulumi:"parameters"`
	// Portfolio identifier.
	PortfolioId string `pulumi:"portfolioId"`
	// Product identifier.
	ProductId string `pulumi:"productId"`
	// Type of constraint. Valid values are `LAUNCH`, `NOTIFICATION`, `RESOURCE_UPDATE`, `STACKSET`, and `TEMPLATE`.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Constraint resource.
type ConstraintArgs struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage pulumix.Input[*string]
	// Description of the constraint.
	Description pulumix.Input[*string]
	// Constraint parameters in JSON format. The syntax depends on the constraint type. See details below.
	Parameters pulumix.Input[string]
	// Portfolio identifier.
	PortfolioId pulumix.Input[string]
	// Product identifier.
	ProductId pulumix.Input[string]
	// Type of constraint. Valid values are `LAUNCH`, `NOTIFICATION`, `RESOURCE_UPDATE`, `STACKSET`, and `TEMPLATE`.
	//
	// The following arguments are optional:
	Type pulumix.Input[string]
}

func (ConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*constraintArgs)(nil)).Elem()
}

type ConstraintOutput struct{ *pulumi.OutputState }

func (ConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Constraint)(nil)).Elem()
}

func (o ConstraintOutput) ToConstraintOutput() ConstraintOutput {
	return o
}

func (o ConstraintOutput) ToConstraintOutputWithContext(ctx context.Context) ConstraintOutput {
	return o
}

func (o ConstraintOutput) ToOutput(ctx context.Context) pulumix.Output[Constraint] {
	return pulumix.Output[Constraint]{
		OutputState: o.OutputState,
	}
}

// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
func (o ConstraintOutput) AcceptLanguage() pulumix.Output[*string] {
	value := pulumix.Apply[Constraint](o, func(v Constraint) pulumix.Output[*string] { return v.AcceptLanguage })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Description of the constraint.
func (o ConstraintOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[Constraint](o, func(v Constraint) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Owner of the constraint.
func (o ConstraintOutput) Owner() pulumix.Output[string] {
	value := pulumix.Apply[Constraint](o, func(v Constraint) pulumix.Output[string] { return v.Owner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Constraint parameters in JSON format. The syntax depends on the constraint type. See details below.
func (o ConstraintOutput) Parameters() pulumix.Output[string] {
	value := pulumix.Apply[Constraint](o, func(v Constraint) pulumix.Output[string] { return v.Parameters })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Portfolio identifier.
func (o ConstraintOutput) PortfolioId() pulumix.Output[string] {
	value := pulumix.Apply[Constraint](o, func(v Constraint) pulumix.Output[string] { return v.PortfolioId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Product identifier.
func (o ConstraintOutput) ProductId() pulumix.Output[string] {
	value := pulumix.Apply[Constraint](o, func(v Constraint) pulumix.Output[string] { return v.ProductId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ConstraintOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Constraint](o, func(v Constraint) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of constraint. Valid values are `LAUNCH`, `NOTIFICATION`, `RESOURCE_UPDATE`, `STACKSET`, and `TEMPLATE`.
//
// The following arguments are optional:
func (o ConstraintOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Constraint](o, func(v Constraint) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ConstraintOutput{})
}
