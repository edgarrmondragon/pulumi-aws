// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ApiCorsConfiguration struct {
	// Whether credentials are included in the CORS request.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Set of allowed HTTP headers.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Set of allowed HTTP methods.
	AllowMethods []string `pulumi:"allowMethods"`
	// Set of allowed origins.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// Set of exposed HTTP headers.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Number of seconds that the browser should cache preflight request results.
	MaxAge *int `pulumi:"maxAge"`
}

type ApiCorsConfigurationArgs struct {
	// Whether credentials are included in the CORS request.
	AllowCredentials pulumix.Input[*bool] `pulumi:"allowCredentials"`
	// Set of allowed HTTP headers.
	AllowHeaders pulumix.Input[[]string] `pulumi:"allowHeaders"`
	// Set of allowed HTTP methods.
	AllowMethods pulumix.Input[[]string] `pulumi:"allowMethods"`
	// Set of allowed origins.
	AllowOrigins pulumix.Input[[]string] `pulumi:"allowOrigins"`
	// Set of exposed HTTP headers.
	ExposeHeaders pulumix.Input[[]string] `pulumi:"exposeHeaders"`
	// Number of seconds that the browser should cache preflight request results.
	MaxAge pulumix.Input[*int] `pulumi:"maxAge"`
}

func (ApiCorsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiCorsConfiguration)(nil)).Elem()
}

func (i ApiCorsConfigurationArgs) ToApiCorsConfigurationOutput() ApiCorsConfigurationOutput {
	return i.ToApiCorsConfigurationOutputWithContext(context.Background())
}

func (i ApiCorsConfigurationArgs) ToApiCorsConfigurationOutputWithContext(ctx context.Context) ApiCorsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiCorsConfigurationOutput)
}

func (i *ApiCorsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ApiCorsConfigurationArgs] {
	return pulumix.Val(i)
}

type ApiCorsConfigurationOutput struct{ *pulumi.OutputState }

func (ApiCorsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiCorsConfiguration)(nil)).Elem()
}

func (o ApiCorsConfigurationOutput) ToApiCorsConfigurationOutput() ApiCorsConfigurationOutput {
	return o
}

func (o ApiCorsConfigurationOutput) ToApiCorsConfigurationOutputWithContext(ctx context.Context) ApiCorsConfigurationOutput {
	return o
}

func (o ApiCorsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApiCorsConfiguration] {
	return pulumix.Output[ApiCorsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether credentials are included in the CORS request.
func (o ApiCorsConfigurationOutput) AllowCredentials() pulumix.Output[*bool] {
	return pulumix.Apply[ApiCorsConfiguration](o, func(v ApiCorsConfiguration) *bool { return v.AllowCredentials })
}

// Set of allowed HTTP headers.
func (o ApiCorsConfigurationOutput) AllowHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ApiCorsConfiguration](o, func(v ApiCorsConfiguration) []string { return v.AllowHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of allowed HTTP methods.
func (o ApiCorsConfigurationOutput) AllowMethods() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ApiCorsConfiguration](o, func(v ApiCorsConfiguration) []string { return v.AllowMethods })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of allowed origins.
func (o ApiCorsConfigurationOutput) AllowOrigins() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ApiCorsConfiguration](o, func(v ApiCorsConfiguration) []string { return v.AllowOrigins })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of exposed HTTP headers.
func (o ApiCorsConfigurationOutput) ExposeHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ApiCorsConfiguration](o, func(v ApiCorsConfiguration) []string { return v.ExposeHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Number of seconds that the browser should cache preflight request results.
func (o ApiCorsConfigurationOutput) MaxAge() pulumix.Output[*int] {
	return pulumix.Apply[ApiCorsConfiguration](o, func(v ApiCorsConfiguration) *int { return v.MaxAge })
}

type AuthorizerJwtConfiguration struct {
	// List of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
	Audiences []string `pulumi:"audiences"`
	// Base domain of the identity provider that issues JSON Web Tokens, such as the `endpoint` attribute of the `cognito.UserPool` resource.
	Issuer *string `pulumi:"issuer"`
}

type AuthorizerJwtConfigurationArgs struct {
	// List of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
	Audiences pulumix.Input[[]string] `pulumi:"audiences"`
	// Base domain of the identity provider that issues JSON Web Tokens, such as the `endpoint` attribute of the `cognito.UserPool` resource.
	Issuer pulumix.Input[*string] `pulumi:"issuer"`
}

func (AuthorizerJwtConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizerJwtConfiguration)(nil)).Elem()
}

func (i AuthorizerJwtConfigurationArgs) ToAuthorizerJwtConfigurationOutput() AuthorizerJwtConfigurationOutput {
	return i.ToAuthorizerJwtConfigurationOutputWithContext(context.Background())
}

func (i AuthorizerJwtConfigurationArgs) ToAuthorizerJwtConfigurationOutputWithContext(ctx context.Context) AuthorizerJwtConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizerJwtConfigurationOutput)
}

func (i *AuthorizerJwtConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*AuthorizerJwtConfigurationArgs] {
	return pulumix.Val(i)
}

type AuthorizerJwtConfigurationOutput struct{ *pulumi.OutputState }

func (AuthorizerJwtConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizerJwtConfiguration)(nil)).Elem()
}

func (o AuthorizerJwtConfigurationOutput) ToAuthorizerJwtConfigurationOutput() AuthorizerJwtConfigurationOutput {
	return o
}

func (o AuthorizerJwtConfigurationOutput) ToAuthorizerJwtConfigurationOutputWithContext(ctx context.Context) AuthorizerJwtConfigurationOutput {
	return o
}

func (o AuthorizerJwtConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AuthorizerJwtConfiguration] {
	return pulumix.Output[AuthorizerJwtConfiguration]{
		OutputState: o.OutputState,
	}
}

// List of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
func (o AuthorizerJwtConfigurationOutput) Audiences() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AuthorizerJwtConfiguration](o, func(v AuthorizerJwtConfiguration) []string { return v.Audiences })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Base domain of the identity provider that issues JSON Web Tokens, such as the `endpoint` attribute of the `cognito.UserPool` resource.
func (o AuthorizerJwtConfigurationOutput) Issuer() pulumix.Output[*string] {
	return pulumix.Apply[AuthorizerJwtConfiguration](o, func(v AuthorizerJwtConfiguration) *string { return v.Issuer })
}

type DomainNameDomainNameConfiguration struct {
	// ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source. Use the `acm.Certificate` resource to configure an ACM certificate.
	CertificateArn string `pulumi:"certificateArn"`
	// Endpoint type. Valid values: `REGIONAL`.
	EndpointType string `pulumi:"endpointType"`
	// Amazon Route 53 Hosted Zone ID of the endpoint.
	HostedZoneId *string `pulumi:"hostedZoneId"`
	// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificateArn` is issued via an ACM Private CA or `mutualTlsAuthentication` is configured with an ACM-imported certificate.)
	OwnershipVerificationCertificateArn *string `pulumi:"ownershipVerificationCertificateArn"`
	// Transport Layer Security (TLS) version of the [security policy](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html) for the domain name. Valid values: `TLS_1_2`.
	SecurityPolicy string `pulumi:"securityPolicy"`
	// Target domain name.
	TargetDomainName *string `pulumi:"targetDomainName"`
}

type DomainNameDomainNameConfigurationArgs struct {
	// ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source. Use the `acm.Certificate` resource to configure an ACM certificate.
	CertificateArn pulumix.Input[string] `pulumi:"certificateArn"`
	// Endpoint type. Valid values: `REGIONAL`.
	EndpointType pulumix.Input[string] `pulumi:"endpointType"`
	// Amazon Route 53 Hosted Zone ID of the endpoint.
	HostedZoneId pulumix.Input[*string] `pulumi:"hostedZoneId"`
	// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificateArn` is issued via an ACM Private CA or `mutualTlsAuthentication` is configured with an ACM-imported certificate.)
	OwnershipVerificationCertificateArn pulumix.Input[*string] `pulumi:"ownershipVerificationCertificateArn"`
	// Transport Layer Security (TLS) version of the [security policy](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html) for the domain name. Valid values: `TLS_1_2`.
	SecurityPolicy pulumix.Input[string] `pulumi:"securityPolicy"`
	// Target domain name.
	TargetDomainName pulumix.Input[*string] `pulumi:"targetDomainName"`
}

func (DomainNameDomainNameConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameDomainNameConfiguration)(nil)).Elem()
}

func (i DomainNameDomainNameConfigurationArgs) ToDomainNameDomainNameConfigurationOutput() DomainNameDomainNameConfigurationOutput {
	return i.ToDomainNameDomainNameConfigurationOutputWithContext(context.Background())
}

func (i DomainNameDomainNameConfigurationArgs) ToDomainNameDomainNameConfigurationOutputWithContext(ctx context.Context) DomainNameDomainNameConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameDomainNameConfigurationOutput)
}

func (i *DomainNameDomainNameConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainNameDomainNameConfigurationArgs] {
	return pulumix.Val(i)
}

type DomainNameDomainNameConfigurationOutput struct{ *pulumi.OutputState }

func (DomainNameDomainNameConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameDomainNameConfiguration)(nil)).Elem()
}

func (o DomainNameDomainNameConfigurationOutput) ToDomainNameDomainNameConfigurationOutput() DomainNameDomainNameConfigurationOutput {
	return o
}

func (o DomainNameDomainNameConfigurationOutput) ToDomainNameDomainNameConfigurationOutputWithContext(ctx context.Context) DomainNameDomainNameConfigurationOutput {
	return o
}

func (o DomainNameDomainNameConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DomainNameDomainNameConfiguration] {
	return pulumix.Output[DomainNameDomainNameConfiguration]{
		OutputState: o.OutputState,
	}
}

// ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source. Use the `acm.Certificate` resource to configure an ACM certificate.
func (o DomainNameDomainNameConfigurationOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[DomainNameDomainNameConfiguration](o, func(v DomainNameDomainNameConfiguration) string { return v.CertificateArn })
}

// Endpoint type. Valid values: `REGIONAL`.
func (o DomainNameDomainNameConfigurationOutput) EndpointType() pulumix.Output[string] {
	return pulumix.Apply[DomainNameDomainNameConfiguration](o, func(v DomainNameDomainNameConfiguration) string { return v.EndpointType })
}

// Amazon Route 53 Hosted Zone ID of the endpoint.
func (o DomainNameDomainNameConfigurationOutput) HostedZoneId() pulumix.Output[*string] {
	return pulumix.Apply[DomainNameDomainNameConfiguration](o, func(v DomainNameDomainNameConfiguration) *string { return v.HostedZoneId })
}

// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificateArn` is issued via an ACM Private CA or `mutualTlsAuthentication` is configured with an ACM-imported certificate.)
func (o DomainNameDomainNameConfigurationOutput) OwnershipVerificationCertificateArn() pulumix.Output[*string] {
	return pulumix.Apply[DomainNameDomainNameConfiguration](o, func(v DomainNameDomainNameConfiguration) *string { return v.OwnershipVerificationCertificateArn })
}

// Transport Layer Security (TLS) version of the [security policy](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html) for the domain name. Valid values: `TLS_1_2`.
func (o DomainNameDomainNameConfigurationOutput) SecurityPolicy() pulumix.Output[string] {
	return pulumix.Apply[DomainNameDomainNameConfiguration](o, func(v DomainNameDomainNameConfiguration) string { return v.SecurityPolicy })
}

// Target domain name.
func (o DomainNameDomainNameConfigurationOutput) TargetDomainName() pulumix.Output[*string] {
	return pulumix.Apply[DomainNameDomainNameConfiguration](o, func(v DomainNameDomainNameConfiguration) *string { return v.TargetDomainName })
}

type DomainNameMutualTlsAuthentication struct {
	// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, `s3://bucket-name/key-name`. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
	TruststoreUri string `pulumi:"truststoreUri"`
	// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
	TruststoreVersion *string `pulumi:"truststoreVersion"`
}

type DomainNameMutualTlsAuthenticationArgs struct {
	// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, `s3://bucket-name/key-name`. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
	TruststoreUri pulumix.Input[string] `pulumi:"truststoreUri"`
	// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
	TruststoreVersion pulumix.Input[*string] `pulumi:"truststoreVersion"`
}

func (DomainNameMutualTlsAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationOutput() DomainNameMutualTlsAuthenticationOutput {
	return i.ToDomainNameMutualTlsAuthenticationOutputWithContext(context.Background())
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameMutualTlsAuthenticationOutput)
}

func (i *DomainNameMutualTlsAuthenticationArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainNameMutualTlsAuthenticationArgs] {
	return pulumix.Val(i)
}

type DomainNameMutualTlsAuthenticationOutput struct{ *pulumi.OutputState }

func (DomainNameMutualTlsAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationOutput() DomainNameMutualTlsAuthenticationOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[DomainNameMutualTlsAuthentication] {
	return pulumix.Output[DomainNameMutualTlsAuthentication]{
		OutputState: o.OutputState,
	}
}

// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, `s3://bucket-name/key-name`. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
func (o DomainNameMutualTlsAuthenticationOutput) TruststoreUri() pulumix.Output[string] {
	return pulumix.Apply[DomainNameMutualTlsAuthentication](o, func(v DomainNameMutualTlsAuthentication) string { return v.TruststoreUri })
}

// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
func (o DomainNameMutualTlsAuthenticationOutput) TruststoreVersion() pulumix.Output[*string] {
	return pulumix.Apply[DomainNameMutualTlsAuthentication](o, func(v DomainNameMutualTlsAuthentication) *string { return v.TruststoreVersion })
}

type IntegrationResponseParameter struct {
	// Key-value map. The key of this map identifies the location of the request parameter to change, and how to change it. The corresponding value specifies the new data for the parameter.
	// See the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html) for details.
	Mappings map[string]string `pulumi:"mappings"`
	// HTTP status code in the range 200-599.
	StatusCode string `pulumi:"statusCode"`
}

type IntegrationResponseParameterArgs struct {
	// Key-value map. The key of this map identifies the location of the request parameter to change, and how to change it. The corresponding value specifies the new data for the parameter.
	// See the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html) for details.
	Mappings pulumix.Input[map[string]string] `pulumi:"mappings"`
	// HTTP status code in the range 200-599.
	StatusCode pulumix.Input[string] `pulumi:"statusCode"`
}

func (IntegrationResponseParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationResponseParameter)(nil)).Elem()
}

func (i IntegrationResponseParameterArgs) ToIntegrationResponseParameterOutput() IntegrationResponseParameterOutput {
	return i.ToIntegrationResponseParameterOutputWithContext(context.Background())
}

func (i IntegrationResponseParameterArgs) ToIntegrationResponseParameterOutputWithContext(ctx context.Context) IntegrationResponseParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationResponseParameterOutput)
}

func (i *IntegrationResponseParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*IntegrationResponseParameterArgs] {
	return pulumix.Val(i)
}

type IntegrationResponseParameterOutput struct{ *pulumi.OutputState }

func (IntegrationResponseParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationResponseParameter)(nil)).Elem()
}

func (o IntegrationResponseParameterOutput) ToIntegrationResponseParameterOutput() IntegrationResponseParameterOutput {
	return o
}

func (o IntegrationResponseParameterOutput) ToIntegrationResponseParameterOutputWithContext(ctx context.Context) IntegrationResponseParameterOutput {
	return o
}

func (o IntegrationResponseParameterOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationResponseParameter] {
	return pulumix.Output[IntegrationResponseParameter]{
		OutputState: o.OutputState,
	}
}

// Key-value map. The key of this map identifies the location of the request parameter to change, and how to change it. The corresponding value specifies the new data for the parameter.
// See the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html) for details.
func (o IntegrationResponseParameterOutput) Mappings() pulumix.MapOutput[string] {
	value := pulumix.Apply[IntegrationResponseParameter](o, func(v IntegrationResponseParameter) map[string]string { return v.Mappings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// HTTP status code in the range 200-599.
func (o IntegrationResponseParameterOutput) StatusCode() pulumix.Output[string] {
	return pulumix.Apply[IntegrationResponseParameter](o, func(v IntegrationResponseParameter) string { return v.StatusCode })
}

type IntegrationTlsConfig struct {
	// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
	ServerNameToVerify *string `pulumi:"serverNameToVerify"`
}

type IntegrationTlsConfigArgs struct {
	// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
	ServerNameToVerify pulumix.Input[*string] `pulumi:"serverNameToVerify"`
}

func (IntegrationTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTlsConfig)(nil)).Elem()
}

func (i IntegrationTlsConfigArgs) ToIntegrationTlsConfigOutput() IntegrationTlsConfigOutput {
	return i.ToIntegrationTlsConfigOutputWithContext(context.Background())
}

func (i IntegrationTlsConfigArgs) ToIntegrationTlsConfigOutputWithContext(ctx context.Context) IntegrationTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTlsConfigOutput)
}

func (i *IntegrationTlsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*IntegrationTlsConfigArgs] {
	return pulumix.Val(i)
}

type IntegrationTlsConfigOutput struct{ *pulumi.OutputState }

func (IntegrationTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTlsConfig)(nil)).Elem()
}

func (o IntegrationTlsConfigOutput) ToIntegrationTlsConfigOutput() IntegrationTlsConfigOutput {
	return o
}

func (o IntegrationTlsConfigOutput) ToIntegrationTlsConfigOutputWithContext(ctx context.Context) IntegrationTlsConfigOutput {
	return o
}

func (o IntegrationTlsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationTlsConfig] {
	return pulumix.Output[IntegrationTlsConfig]{
		OutputState: o.OutputState,
	}
}

// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
func (o IntegrationTlsConfigOutput) ServerNameToVerify() pulumix.Output[*string] {
	return pulumix.Apply[IntegrationTlsConfig](o, func(v IntegrationTlsConfig) *string { return v.ServerNameToVerify })
}

type RouteRequestParameter struct {
	// Request parameter key. This is a [request data mapping parameter](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-data-mapping.html#websocket-mapping-request-parameters).
	RequestParameterKey string `pulumi:"requestParameterKey"`
	// Boolean whether or not the parameter is required.
	Required bool `pulumi:"required"`
}

type RouteRequestParameterArgs struct {
	// Request parameter key. This is a [request data mapping parameter](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-data-mapping.html#websocket-mapping-request-parameters).
	RequestParameterKey pulumix.Input[string] `pulumi:"requestParameterKey"`
	// Boolean whether or not the parameter is required.
	Required pulumix.Input[bool] `pulumi:"required"`
}

func (RouteRequestParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteRequestParameter)(nil)).Elem()
}

func (i RouteRequestParameterArgs) ToRouteRequestParameterOutput() RouteRequestParameterOutput {
	return i.ToRouteRequestParameterOutputWithContext(context.Background())
}

func (i RouteRequestParameterArgs) ToRouteRequestParameterOutputWithContext(ctx context.Context) RouteRequestParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteRequestParameterOutput)
}

func (i *RouteRequestParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*RouteRequestParameterArgs] {
	return pulumix.Val(i)
}

type RouteRequestParameterOutput struct{ *pulumi.OutputState }

func (RouteRequestParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteRequestParameter)(nil)).Elem()
}

func (o RouteRequestParameterOutput) ToRouteRequestParameterOutput() RouteRequestParameterOutput {
	return o
}

func (o RouteRequestParameterOutput) ToRouteRequestParameterOutputWithContext(ctx context.Context) RouteRequestParameterOutput {
	return o
}

func (o RouteRequestParameterOutput) ToOutput(ctx context.Context) pulumix.Output[RouteRequestParameter] {
	return pulumix.Output[RouteRequestParameter]{
		OutputState: o.OutputState,
	}
}

// Request parameter key. This is a [request data mapping parameter](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-data-mapping.html#websocket-mapping-request-parameters).
func (o RouteRequestParameterOutput) RequestParameterKey() pulumix.Output[string] {
	return pulumix.Apply[RouteRequestParameter](o, func(v RouteRequestParameter) string { return v.RequestParameterKey })
}

// Boolean whether or not the parameter is required.
func (o RouteRequestParameterOutput) Required() pulumix.Output[bool] {
	return pulumix.Apply[RouteRequestParameter](o, func(v RouteRequestParameter) bool { return v.Required })
}

type StageAccessLogSettings struct {
	// ARN of the CloudWatch Logs log group to receive access logs. Any trailing `:*` is trimmed from the ARN.
	DestinationArn string `pulumi:"destinationArn"`
	// Single line [format](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#apigateway-cloudwatch-log-formats) of the access logs of data. Refer to log settings for [HTTP](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-logging-variables.html) or [Websocket](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-logging.html).
	Format string `pulumi:"format"`
}

type StageAccessLogSettingsArgs struct {
	// ARN of the CloudWatch Logs log group to receive access logs. Any trailing `:*` is trimmed from the ARN.
	DestinationArn pulumix.Input[string] `pulumi:"destinationArn"`
	// Single line [format](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#apigateway-cloudwatch-log-formats) of the access logs of data. Refer to log settings for [HTTP](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-logging-variables.html) or [Websocket](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-logging.html).
	Format pulumix.Input[string] `pulumi:"format"`
}

func (StageAccessLogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAccessLogSettings)(nil)).Elem()
}

func (i StageAccessLogSettingsArgs) ToStageAccessLogSettingsOutput() StageAccessLogSettingsOutput {
	return i.ToStageAccessLogSettingsOutputWithContext(context.Background())
}

func (i StageAccessLogSettingsArgs) ToStageAccessLogSettingsOutputWithContext(ctx context.Context) StageAccessLogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAccessLogSettingsOutput)
}

func (i *StageAccessLogSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*StageAccessLogSettingsArgs] {
	return pulumix.Val(i)
}

type StageAccessLogSettingsOutput struct{ *pulumi.OutputState }

func (StageAccessLogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAccessLogSettings)(nil)).Elem()
}

func (o StageAccessLogSettingsOutput) ToStageAccessLogSettingsOutput() StageAccessLogSettingsOutput {
	return o
}

func (o StageAccessLogSettingsOutput) ToStageAccessLogSettingsOutputWithContext(ctx context.Context) StageAccessLogSettingsOutput {
	return o
}

func (o StageAccessLogSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[StageAccessLogSettings] {
	return pulumix.Output[StageAccessLogSettings]{
		OutputState: o.OutputState,
	}
}

// ARN of the CloudWatch Logs log group to receive access logs. Any trailing `:*` is trimmed from the ARN.
func (o StageAccessLogSettingsOutput) DestinationArn() pulumix.Output[string] {
	return pulumix.Apply[StageAccessLogSettings](o, func(v StageAccessLogSettings) string { return v.DestinationArn })
}

// Single line [format](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#apigateway-cloudwatch-log-formats) of the access logs of data. Refer to log settings for [HTTP](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-logging-variables.html) or [Websocket](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-logging.html).
func (o StageAccessLogSettingsOutput) Format() pulumix.Output[string] {
	return pulumix.Apply[StageAccessLogSettings](o, func(v StageAccessLogSettings) string { return v.Format })
}

type StageDefaultRouteSettings struct {
	// Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
	// Defaults to `false`. Supported only for WebSocket APIs.
	DataTraceEnabled *bool `pulumi:"dataTraceEnabled"`
	// Whether detailed metrics are enabled for the default route. Defaults to `false`.
	DetailedMetricsEnabled *bool `pulumi:"detailedMetricsEnabled"`
	// Logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
	// Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Throttling burst limit for the default route.
	ThrottlingBurstLimit *int `pulumi:"throttlingBurstLimit"`
	// Throttling rate limit for the default route.
	ThrottlingRateLimit *float64 `pulumi:"throttlingRateLimit"`
}

type StageDefaultRouteSettingsArgs struct {
	// Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
	// Defaults to `false`. Supported only for WebSocket APIs.
	DataTraceEnabled pulumix.Input[*bool] `pulumi:"dataTraceEnabled"`
	// Whether detailed metrics are enabled for the default route. Defaults to `false`.
	DetailedMetricsEnabled pulumix.Input[*bool] `pulumi:"detailedMetricsEnabled"`
	// Logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
	// Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
	LoggingLevel pulumix.Input[*string] `pulumi:"loggingLevel"`
	// Throttling burst limit for the default route.
	ThrottlingBurstLimit pulumix.Input[*int] `pulumi:"throttlingBurstLimit"`
	// Throttling rate limit for the default route.
	ThrottlingRateLimit pulumix.Input[*float64] `pulumi:"throttlingRateLimit"`
}

func (StageDefaultRouteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageDefaultRouteSettings)(nil)).Elem()
}

func (i StageDefaultRouteSettingsArgs) ToStageDefaultRouteSettingsOutput() StageDefaultRouteSettingsOutput {
	return i.ToStageDefaultRouteSettingsOutputWithContext(context.Background())
}

func (i StageDefaultRouteSettingsArgs) ToStageDefaultRouteSettingsOutputWithContext(ctx context.Context) StageDefaultRouteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageDefaultRouteSettingsOutput)
}

func (i *StageDefaultRouteSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*StageDefaultRouteSettingsArgs] {
	return pulumix.Val(i)
}

type StageDefaultRouteSettingsOutput struct{ *pulumi.OutputState }

func (StageDefaultRouteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageDefaultRouteSettings)(nil)).Elem()
}

func (o StageDefaultRouteSettingsOutput) ToStageDefaultRouteSettingsOutput() StageDefaultRouteSettingsOutput {
	return o
}

func (o StageDefaultRouteSettingsOutput) ToStageDefaultRouteSettingsOutputWithContext(ctx context.Context) StageDefaultRouteSettingsOutput {
	return o
}

func (o StageDefaultRouteSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[StageDefaultRouteSettings] {
	return pulumix.Output[StageDefaultRouteSettings]{
		OutputState: o.OutputState,
	}
}

// Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
// Defaults to `false`. Supported only for WebSocket APIs.
func (o StageDefaultRouteSettingsOutput) DataTraceEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[StageDefaultRouteSettings](o, func(v StageDefaultRouteSettings) *bool { return v.DataTraceEnabled })
}

// Whether detailed metrics are enabled for the default route. Defaults to `false`.
func (o StageDefaultRouteSettingsOutput) DetailedMetricsEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[StageDefaultRouteSettings](o, func(v StageDefaultRouteSettings) *bool { return v.DetailedMetricsEnabled })
}

// Logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
// Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
func (o StageDefaultRouteSettingsOutput) LoggingLevel() pulumix.Output[*string] {
	return pulumix.Apply[StageDefaultRouteSettings](o, func(v StageDefaultRouteSettings) *string { return v.LoggingLevel })
}

// Throttling burst limit for the default route.
func (o StageDefaultRouteSettingsOutput) ThrottlingBurstLimit() pulumix.Output[*int] {
	return pulumix.Apply[StageDefaultRouteSettings](o, func(v StageDefaultRouteSettings) *int { return v.ThrottlingBurstLimit })
}

// Throttling rate limit for the default route.
func (o StageDefaultRouteSettingsOutput) ThrottlingRateLimit() pulumix.Output[*float64] {
	return pulumix.Apply[StageDefaultRouteSettings](o, func(v StageDefaultRouteSettings) *float64 { return v.ThrottlingRateLimit })
}

type StageRouteSetting struct {
	// Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
	// Defaults to `false`. Supported only for WebSocket APIs.
	DataTraceEnabled *bool `pulumi:"dataTraceEnabled"`
	// Whether detailed metrics are enabled for the route. Defaults to `false`.
	DetailedMetricsEnabled *bool `pulumi:"detailedMetricsEnabled"`
	// Logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
	// Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Route key.
	RouteKey string `pulumi:"routeKey"`
	// Throttling burst limit for the route.
	ThrottlingBurstLimit *int `pulumi:"throttlingBurstLimit"`
	// Throttling rate limit for the route.
	ThrottlingRateLimit *float64 `pulumi:"throttlingRateLimit"`
}

type StageRouteSettingArgs struct {
	// Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
	// Defaults to `false`. Supported only for WebSocket APIs.
	DataTraceEnabled pulumix.Input[*bool] `pulumi:"dataTraceEnabled"`
	// Whether detailed metrics are enabled for the route. Defaults to `false`.
	DetailedMetricsEnabled pulumix.Input[*bool] `pulumi:"detailedMetricsEnabled"`
	// Logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
	// Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
	LoggingLevel pulumix.Input[*string] `pulumi:"loggingLevel"`
	// Route key.
	RouteKey pulumix.Input[string] `pulumi:"routeKey"`
	// Throttling burst limit for the route.
	ThrottlingBurstLimit pulumix.Input[*int] `pulumi:"throttlingBurstLimit"`
	// Throttling rate limit for the route.
	ThrottlingRateLimit pulumix.Input[*float64] `pulumi:"throttlingRateLimit"`
}

func (StageRouteSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageRouteSetting)(nil)).Elem()
}

func (i StageRouteSettingArgs) ToStageRouteSettingOutput() StageRouteSettingOutput {
	return i.ToStageRouteSettingOutputWithContext(context.Background())
}

func (i StageRouteSettingArgs) ToStageRouteSettingOutputWithContext(ctx context.Context) StageRouteSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageRouteSettingOutput)
}

func (i *StageRouteSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*StageRouteSettingArgs] {
	return pulumix.Val(i)
}

type StageRouteSettingOutput struct{ *pulumi.OutputState }

func (StageRouteSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageRouteSetting)(nil)).Elem()
}

func (o StageRouteSettingOutput) ToStageRouteSettingOutput() StageRouteSettingOutput {
	return o
}

func (o StageRouteSettingOutput) ToStageRouteSettingOutputWithContext(ctx context.Context) StageRouteSettingOutput {
	return o
}

func (o StageRouteSettingOutput) ToOutput(ctx context.Context) pulumix.Output[StageRouteSetting] {
	return pulumix.Output[StageRouteSetting]{
		OutputState: o.OutputState,
	}
}

// Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
// Defaults to `false`. Supported only for WebSocket APIs.
func (o StageRouteSettingOutput) DataTraceEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[StageRouteSetting](o, func(v StageRouteSetting) *bool { return v.DataTraceEnabled })
}

// Whether detailed metrics are enabled for the route. Defaults to `false`.
func (o StageRouteSettingOutput) DetailedMetricsEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[StageRouteSetting](o, func(v StageRouteSetting) *bool { return v.DetailedMetricsEnabled })
}

// Logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
// Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
func (o StageRouteSettingOutput) LoggingLevel() pulumix.Output[*string] {
	return pulumix.Apply[StageRouteSetting](o, func(v StageRouteSetting) *string { return v.LoggingLevel })
}

// Route key.
func (o StageRouteSettingOutput) RouteKey() pulumix.Output[string] {
	return pulumix.Apply[StageRouteSetting](o, func(v StageRouteSetting) string { return v.RouteKey })
}

// Throttling burst limit for the route.
func (o StageRouteSettingOutput) ThrottlingBurstLimit() pulumix.Output[*int] {
	return pulumix.Apply[StageRouteSetting](o, func(v StageRouteSetting) *int { return v.ThrottlingBurstLimit })
}

// Throttling rate limit for the route.
func (o StageRouteSettingOutput) ThrottlingRateLimit() pulumix.Output[*float64] {
	return pulumix.Apply[StageRouteSetting](o, func(v StageRouteSetting) *float64 { return v.ThrottlingRateLimit })
}

type GetApiCorsConfiguration struct {
	// Whether credentials are included in the CORS request.
	AllowCredentials bool `pulumi:"allowCredentials"`
	// Set of allowed HTTP headers.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Set of allowed HTTP methods.
	AllowMethods []string `pulumi:"allowMethods"`
	// Set of allowed origins.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// Set of exposed HTTP headers.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Number of seconds that the browser should cache preflight request results.
	MaxAge int `pulumi:"maxAge"`
}

type GetApiCorsConfigurationArgs struct {
	// Whether credentials are included in the CORS request.
	AllowCredentials pulumix.Input[bool] `pulumi:"allowCredentials"`
	// Set of allowed HTTP headers.
	AllowHeaders pulumix.Input[[]string] `pulumi:"allowHeaders"`
	// Set of allowed HTTP methods.
	AllowMethods pulumix.Input[[]string] `pulumi:"allowMethods"`
	// Set of allowed origins.
	AllowOrigins pulumix.Input[[]string] `pulumi:"allowOrigins"`
	// Set of exposed HTTP headers.
	ExposeHeaders pulumix.Input[[]string] `pulumi:"exposeHeaders"`
	// Number of seconds that the browser should cache preflight request results.
	MaxAge pulumix.Input[int] `pulumi:"maxAge"`
}

func (GetApiCorsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApiCorsConfiguration)(nil)).Elem()
}

func (i GetApiCorsConfigurationArgs) ToGetApiCorsConfigurationOutput() GetApiCorsConfigurationOutput {
	return i.ToGetApiCorsConfigurationOutputWithContext(context.Background())
}

func (i GetApiCorsConfigurationArgs) ToGetApiCorsConfigurationOutputWithContext(ctx context.Context) GetApiCorsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApiCorsConfigurationOutput)
}

func (i *GetApiCorsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetApiCorsConfigurationArgs] {
	return pulumix.Val(i)
}

type GetApiCorsConfigurationOutput struct{ *pulumi.OutputState }

func (GetApiCorsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApiCorsConfiguration)(nil)).Elem()
}

func (o GetApiCorsConfigurationOutput) ToGetApiCorsConfigurationOutput() GetApiCorsConfigurationOutput {
	return o
}

func (o GetApiCorsConfigurationOutput) ToGetApiCorsConfigurationOutputWithContext(ctx context.Context) GetApiCorsConfigurationOutput {
	return o
}

func (o GetApiCorsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetApiCorsConfiguration] {
	return pulumix.Output[GetApiCorsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether credentials are included in the CORS request.
func (o GetApiCorsConfigurationOutput) AllowCredentials() pulumix.Output[bool] {
	return pulumix.Apply[GetApiCorsConfiguration](o, func(v GetApiCorsConfiguration) bool { return v.AllowCredentials })
}

// Set of allowed HTTP headers.
func (o GetApiCorsConfigurationOutput) AllowHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetApiCorsConfiguration](o, func(v GetApiCorsConfiguration) []string { return v.AllowHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of allowed HTTP methods.
func (o GetApiCorsConfigurationOutput) AllowMethods() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetApiCorsConfiguration](o, func(v GetApiCorsConfiguration) []string { return v.AllowMethods })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of allowed origins.
func (o GetApiCorsConfigurationOutput) AllowOrigins() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetApiCorsConfiguration](o, func(v GetApiCorsConfiguration) []string { return v.AllowOrigins })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of exposed HTTP headers.
func (o GetApiCorsConfigurationOutput) ExposeHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetApiCorsConfiguration](o, func(v GetApiCorsConfiguration) []string { return v.ExposeHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Number of seconds that the browser should cache preflight request results.
func (o GetApiCorsConfigurationOutput) MaxAge() pulumix.Output[int] {
	return pulumix.Apply[GetApiCorsConfiguration](o, func(v GetApiCorsConfiguration) int { return v.MaxAge })
}

func init() {
	pulumi.RegisterOutputType(ApiCorsConfigurationOutput{})
	pulumi.RegisterOutputType(AuthorizerJwtConfigurationOutput{})
	pulumi.RegisterOutputType(DomainNameDomainNameConfigurationOutput{})
	pulumi.RegisterOutputType(DomainNameMutualTlsAuthenticationOutput{})
	pulumi.RegisterOutputType(IntegrationResponseParameterOutput{})
	pulumi.RegisterOutputType(IntegrationTlsConfigOutput{})
	pulumi.RegisterOutputType(RouteRequestParameterOutput{})
	pulumi.RegisterOutputType(StageAccessLogSettingsOutput{})
	pulumi.RegisterOutputType(StageDefaultRouteSettingsOutput{})
	pulumi.RegisterOutputType(StageRouteSettingOutput{})
	pulumi.RegisterOutputType(GetApiCorsConfigurationOutput{})
}
