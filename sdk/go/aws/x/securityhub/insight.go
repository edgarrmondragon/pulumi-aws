// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Security Hub custom insight resource. See the [Managing custom insights section](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-custom-insights.html) of the AWS User Guide for more information.
type Insight struct {
	pulumi.CustomResourceState

	// ARN of the insight.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
	Filters pulumix.GPtrOutput[InsightFilters, InsightFiltersOutput] `pulumi:"filters"`
	// The attribute used to group the findings for the insight e.g., if an insight is grouped by `ResourceId`, then the insight produces a list of resource identifiers.
	GroupByAttribute pulumix.Output[string] `pulumi:"groupByAttribute"`
	// The name of the custom insight.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewInsight registers a new resource with the given unique name, arguments, and options.
func NewInsight(ctx *pulumi.Context,
	name string, args *InsightArgs, opts ...pulumi.ResourceOption) (*Insight, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filters == nil {
		return nil, errors.New("invalid value for required argument 'Filters'")
	}
	if args.GroupByAttribute == nil {
		return nil, errors.New("invalid value for required argument 'GroupByAttribute'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Insight
	err := ctx.RegisterResource("aws:securityhub/insight:Insight", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInsight gets an existing Insight resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInsight(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InsightState, opts ...pulumi.ResourceOption) (*Insight, error) {
	var resource Insight
	err := ctx.ReadResource("aws:securityhub/insight:Insight", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Insight resources.
type insightState struct {
	// ARN of the insight.
	Arn *string `pulumi:"arn"`
	// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
	Filters *InsightFilters `pulumi:"filters"`
	// The attribute used to group the findings for the insight e.g., if an insight is grouped by `ResourceId`, then the insight produces a list of resource identifiers.
	GroupByAttribute *string `pulumi:"groupByAttribute"`
	// The name of the custom insight.
	Name *string `pulumi:"name"`
}

type InsightState struct {
	// ARN of the insight.
	Arn pulumix.Input[*string]
	// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
	Filters pulumix.Input[*InsightFiltersArgs]
	// The attribute used to group the findings for the insight e.g., if an insight is grouped by `ResourceId`, then the insight produces a list of resource identifiers.
	GroupByAttribute pulumix.Input[*string]
	// The name of the custom insight.
	Name pulumix.Input[*string]
}

func (InsightState) ElementType() reflect.Type {
	return reflect.TypeOf((*insightState)(nil)).Elem()
}

type insightArgs struct {
	// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
	Filters InsightFilters `pulumi:"filters"`
	// The attribute used to group the findings for the insight e.g., if an insight is grouped by `ResourceId`, then the insight produces a list of resource identifiers.
	GroupByAttribute string `pulumi:"groupByAttribute"`
	// The name of the custom insight.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Insight resource.
type InsightArgs struct {
	// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
	Filters pulumix.Input[*InsightFiltersArgs]
	// The attribute used to group the findings for the insight e.g., if an insight is grouped by `ResourceId`, then the insight produces a list of resource identifiers.
	GroupByAttribute pulumix.Input[string]
	// The name of the custom insight.
	Name pulumix.Input[*string]
}

func (InsightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*insightArgs)(nil)).Elem()
}

type InsightOutput struct{ *pulumi.OutputState }

func (InsightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Insight)(nil)).Elem()
}

func (o InsightOutput) ToInsightOutput() InsightOutput {
	return o
}

func (o InsightOutput) ToInsightOutputWithContext(ctx context.Context) InsightOutput {
	return o
}

func (o InsightOutput) ToOutput(ctx context.Context) pulumix.Output[Insight] {
	return pulumix.Output[Insight]{
		OutputState: o.OutputState,
	}
}

// ARN of the insight.
func (o InsightOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Insight](o, func(v Insight) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A configuration block including one or more (up to 10 distinct) attributes used to filter the findings included in the insight. The insight only includes findings that match criteria defined in the filters. See filters below for more details.
func (o InsightOutput) Filters() pulumix.GPtrOutput[InsightFilters, InsightFiltersOutput] {
	value := pulumix.Apply[Insight](o, func(v Insight) pulumix.GPtrOutput[InsightFilters, InsightFiltersOutput] { return v.Filters })
	unwrapped := pulumix.Flatten[*InsightFilters, pulumix.GPtrOutput[InsightFilters, InsightFiltersOutput]](value)
	return pulumix.GPtrOutput[InsightFilters, InsightFiltersOutput]{OutputState: unwrapped.OutputState}
}

// The attribute used to group the findings for the insight e.g., if an insight is grouped by `ResourceId`, then the insight produces a list of resource identifiers.
func (o InsightOutput) GroupByAttribute() pulumix.Output[string] {
	value := pulumix.Apply[Insight](o, func(v Insight) pulumix.Output[string] { return v.GroupByAttribute })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the custom insight.
func (o InsightOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Insight](o, func(v Insight) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(InsightOutput{})
}
