// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage a GuardDuty filter.
type Filter struct {
	pulumi.CustomResourceState

	// Specifies the action that is to be applied to the findings that match the filter. Can be one of `ARCHIVE` or `NOOP`.
	Action pulumix.Output[string] `pulumi:"action"`
	// The ARN of the GuardDuty filter.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of the filter.
	Description pulumix.Output[*string] `pulumi:"description"`
	// ID of a GuardDuty detector, attached to your account.
	DetectorId pulumix.Output[string] `pulumi:"detectorId"`
	// Represents the criteria to be used in the filter for querying findings. Contains one or more `criterion` blocks, documented below.
	FindingCriteria pulumix.GPtrOutput[FilterFindingCriteria, FilterFindingCriteriaOutput] `pulumi:"findingCriteria"`
	// The name of your filter.
	Name pulumix.Output[string] `pulumi:"name"`
	// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
	Rank pulumix.Output[int] `pulumi:"rank"`
	// The tags that you want to add to the Filter resource. A tag consists of a key and a value. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewFilter registers a new resource with the given unique name, arguments, and options.
func NewFilter(ctx *pulumi.Context,
	name string, args *FilterArgs, opts ...pulumi.ResourceOption) (*Filter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.DetectorId == nil {
		return nil, errors.New("invalid value for required argument 'DetectorId'")
	}
	if args.FindingCriteria == nil {
		return nil, errors.New("invalid value for required argument 'FindingCriteria'")
	}
	if args.Rank == nil {
		return nil, errors.New("invalid value for required argument 'Rank'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Filter
	err := ctx.RegisterResource("aws:guardduty/filter:Filter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFilter gets an existing Filter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FilterState, opts ...pulumi.ResourceOption) (*Filter, error) {
	var resource Filter
	err := ctx.ReadResource("aws:guardduty/filter:Filter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Filter resources.
type filterState struct {
	// Specifies the action that is to be applied to the findings that match the filter. Can be one of `ARCHIVE` or `NOOP`.
	Action *string `pulumi:"action"`
	// The ARN of the GuardDuty filter.
	Arn *string `pulumi:"arn"`
	// Description of the filter.
	Description *string `pulumi:"description"`
	// ID of a GuardDuty detector, attached to your account.
	DetectorId *string `pulumi:"detectorId"`
	// Represents the criteria to be used in the filter for querying findings. Contains one or more `criterion` blocks, documented below.
	FindingCriteria *FilterFindingCriteria `pulumi:"findingCriteria"`
	// The name of your filter.
	Name *string `pulumi:"name"`
	// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
	Rank *int `pulumi:"rank"`
	// The tags that you want to add to the Filter resource. A tag consists of a key and a value. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type FilterState struct {
	// Specifies the action that is to be applied to the findings that match the filter. Can be one of `ARCHIVE` or `NOOP`.
	Action pulumix.Input[*string]
	// The ARN of the GuardDuty filter.
	Arn pulumix.Input[*string]
	// Description of the filter.
	Description pulumix.Input[*string]
	// ID of a GuardDuty detector, attached to your account.
	DetectorId pulumix.Input[*string]
	// Represents the criteria to be used in the filter for querying findings. Contains one or more `criterion` blocks, documented below.
	FindingCriteria pulumix.Input[*FilterFindingCriteriaArgs]
	// The name of your filter.
	Name pulumix.Input[*string]
	// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
	Rank pulumix.Input[*int]
	// The tags that you want to add to the Filter resource. A tag consists of a key and a value. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (FilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*filterState)(nil)).Elem()
}

type filterArgs struct {
	// Specifies the action that is to be applied to the findings that match the filter. Can be one of `ARCHIVE` or `NOOP`.
	Action string `pulumi:"action"`
	// Description of the filter.
	Description *string `pulumi:"description"`
	// ID of a GuardDuty detector, attached to your account.
	DetectorId string `pulumi:"detectorId"`
	// Represents the criteria to be used in the filter for querying findings. Contains one or more `criterion` blocks, documented below.
	FindingCriteria FilterFindingCriteria `pulumi:"findingCriteria"`
	// The name of your filter.
	Name *string `pulumi:"name"`
	// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
	Rank int `pulumi:"rank"`
	// The tags that you want to add to the Filter resource. A tag consists of a key and a value. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Filter resource.
type FilterArgs struct {
	// Specifies the action that is to be applied to the findings that match the filter. Can be one of `ARCHIVE` or `NOOP`.
	Action pulumix.Input[string]
	// Description of the filter.
	Description pulumix.Input[*string]
	// ID of a GuardDuty detector, attached to your account.
	DetectorId pulumix.Input[string]
	// Represents the criteria to be used in the filter for querying findings. Contains one or more `criterion` blocks, documented below.
	FindingCriteria pulumix.Input[*FilterFindingCriteriaArgs]
	// The name of your filter.
	Name pulumix.Input[*string]
	// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
	Rank pulumix.Input[int]
	// The tags that you want to add to the Filter resource. A tag consists of a key and a value. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*filterArgs)(nil)).Elem()
}

type FilterOutput struct{ *pulumi.OutputState }

func (FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Filter)(nil)).Elem()
}

func (o FilterOutput) ToFilterOutput() FilterOutput {
	return o
}

func (o FilterOutput) ToFilterOutputWithContext(ctx context.Context) FilterOutput {
	return o
}

func (o FilterOutput) ToOutput(ctx context.Context) pulumix.Output[Filter] {
	return pulumix.Output[Filter]{
		OutputState: o.OutputState,
	}
}

// Specifies the action that is to be applied to the findings that match the filter. Can be one of `ARCHIVE` or `NOOP`.
func (o FilterOutput) Action() pulumix.Output[string] {
	value := pulumix.Apply[Filter](o, func(v Filter) pulumix.Output[string] { return v.Action })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the GuardDuty filter.
func (o FilterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Filter](o, func(v Filter) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the filter.
func (o FilterOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Filter](o, func(v Filter) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ID of a GuardDuty detector, attached to your account.
func (o FilterOutput) DetectorId() pulumix.Output[string] {
	value := pulumix.Apply[Filter](o, func(v Filter) pulumix.Output[string] { return v.DetectorId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Represents the criteria to be used in the filter for querying findings. Contains one or more `criterion` blocks, documented below.
func (o FilterOutput) FindingCriteria() pulumix.GPtrOutput[FilterFindingCriteria, FilterFindingCriteriaOutput] {
	value := pulumix.Apply[Filter](o, func(v Filter) pulumix.GPtrOutput[FilterFindingCriteria, FilterFindingCriteriaOutput] {
		return v.FindingCriteria
	})
	unwrapped := pulumix.Flatten[*FilterFindingCriteria, pulumix.GPtrOutput[FilterFindingCriteria, FilterFindingCriteriaOutput]](value)
	return pulumix.GPtrOutput[FilterFindingCriteria, FilterFindingCriteriaOutput]{OutputState: unwrapped.OutputState}
}

// The name of your filter.
func (o FilterOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Filter](o, func(v Filter) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
func (o FilterOutput) Rank() pulumix.Output[int] {
	value := pulumix.Apply[Filter](o, func(v Filter) pulumix.Output[int] { return v.Rank })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The tags that you want to add to the Filter resource. A tag consists of a key and a value. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FilterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Filter](o, func(v Filter) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o FilterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Filter](o, func(v Filter) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FilterOutput{})
}
