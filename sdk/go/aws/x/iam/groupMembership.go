// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// > **WARNING:** Multiple iam.GroupMembership resources with the same group name will produce inconsistent behavior!
//
// Provides a top level resource to manage IAM Group membership for IAM Users. For
// more information on managing IAM Groups or IAM Users, see IAM Groups or
// IAM Users
//
// > **Note:** `iam.GroupMembership` will conflict with itself if used more than once with the same group. To non-exclusively manage the users in a group, see the
// `iam.UserGroupMembership` resource.
type GroupMembership struct {
	pulumi.CustomResourceState

	// The IAM Group name to attach the list of `users` to
	Group pulumix.Output[string] `pulumi:"group"`
	// The name to identify the Group Membership
	Name pulumix.Output[string] `pulumi:"name"`
	// A list of IAM User names to associate with the Group
	Users pulumix.ArrayOutput[string] `pulumi:"users"`
}

// NewGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewGroupMembership(ctx *pulumi.Context,
	name string, args *GroupMembershipArgs, opts ...pulumi.ResourceOption) (*GroupMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupMembership
	err := ctx.RegisterResource("aws:iam/groupMembership:GroupMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMembership gets an existing GroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMembershipState, opts ...pulumi.ResourceOption) (*GroupMembership, error) {
	var resource GroupMembership
	err := ctx.ReadResource("aws:iam/groupMembership:GroupMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMembership resources.
type groupMembershipState struct {
	// The IAM Group name to attach the list of `users` to
	Group *string `pulumi:"group"`
	// The name to identify the Group Membership
	Name *string `pulumi:"name"`
	// A list of IAM User names to associate with the Group
	Users []string `pulumi:"users"`
}

type GroupMembershipState struct {
	// The IAM Group name to attach the list of `users` to
	Group pulumix.Input[*string]
	// The name to identify the Group Membership
	Name pulumix.Input[*string]
	// A list of IAM User names to associate with the Group
	Users pulumix.Input[[]string]
}

func (GroupMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipState)(nil)).Elem()
}

type groupMembershipArgs struct {
	// The IAM Group name to attach the list of `users` to
	Group string `pulumi:"group"`
	// The name to identify the Group Membership
	Name *string `pulumi:"name"`
	// A list of IAM User names to associate with the Group
	Users []string `pulumi:"users"`
}

// The set of arguments for constructing a GroupMembership resource.
type GroupMembershipArgs struct {
	// The IAM Group name to attach the list of `users` to
	Group pulumix.Input[string]
	// The name to identify the Group Membership
	Name pulumix.Input[*string]
	// A list of IAM User names to associate with the Group
	Users pulumix.Input[[]string]
}

func (GroupMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipArgs)(nil)).Elem()
}

type GroupMembershipOutput struct{ *pulumi.OutputState }

func (GroupMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembership)(nil)).Elem()
}

func (o GroupMembershipOutput) ToGroupMembershipOutput() GroupMembershipOutput {
	return o
}

func (o GroupMembershipOutput) ToGroupMembershipOutputWithContext(ctx context.Context) GroupMembershipOutput {
	return o
}

func (o GroupMembershipOutput) ToOutput(ctx context.Context) pulumix.Output[GroupMembership] {
	return pulumix.Output[GroupMembership]{
		OutputState: o.OutputState,
	}
}

// The IAM Group name to attach the list of `users` to
func (o GroupMembershipOutput) Group() pulumix.Output[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[string] { return v.Group })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name to identify the Group Membership
func (o GroupMembershipOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of IAM User names to associate with the Group
func (o GroupMembershipOutput) Users() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.ArrayOutput[string] { return v.Users })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(GroupMembershipOutput{})
}
