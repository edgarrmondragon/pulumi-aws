// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an S3 Location within AWS DataSync.
type S3Location struct {
	pulumi.CustomResourceState

	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns pulumix.ArrayOutput[string] `pulumi:"agentArns"`
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Amazon Resource Name (ARN) of the S3 Bucket.
	S3BucketArn pulumix.Output[string] `pulumi:"s3BucketArn"`
	// Configuration block containing information for connecting to S3.
	S3Config pulumix.GPtrOutput[S3LocationS3Config, S3LocationS3ConfigOutput] `pulumi:"s3Config"`
	// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. [Valid values](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes)
	S3StorageClass pulumix.Output[string] `pulumi:"s3StorageClass"`
	// Prefix to perform actions as source or destination.
	Subdirectory pulumix.Output[string] `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	Uri     pulumix.Output[string]    `pulumi:"uri"`
}

// NewS3Location registers a new resource with the given unique name, arguments, and options.
func NewS3Location(ctx *pulumi.Context,
	name string, args *S3LocationArgs, opts ...pulumi.ResourceOption) (*S3Location, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.S3BucketArn == nil {
		return nil, errors.New("invalid value for required argument 'S3BucketArn'")
	}
	if args.S3Config == nil {
		return nil, errors.New("invalid value for required argument 'S3Config'")
	}
	if args.Subdirectory == nil {
		return nil, errors.New("invalid value for required argument 'Subdirectory'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource S3Location
	err := ctx.RegisterResource("aws:datasync/s3Location:S3Location", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Location gets an existing S3Location resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Location(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3LocationState, opts ...pulumi.ResourceOption) (*S3Location, error) {
	var resource S3Location
	err := ctx.ReadResource("aws:datasync/s3Location:S3Location", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3Location resources.
type s3locationState struct {
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns []string `pulumi:"agentArns"`
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn *string `pulumi:"arn"`
	// Amazon Resource Name (ARN) of the S3 Bucket.
	S3BucketArn *string `pulumi:"s3BucketArn"`
	// Configuration block containing information for connecting to S3.
	S3Config *S3LocationS3Config `pulumi:"s3Config"`
	// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. [Valid values](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes)
	S3StorageClass *string `pulumi:"s3StorageClass"`
	// Prefix to perform actions as source or destination.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	Uri     *string           `pulumi:"uri"`
}

type S3LocationState struct {
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns pulumix.Input[[]string]
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the S3 Bucket.
	S3BucketArn pulumix.Input[*string]
	// Configuration block containing information for connecting to S3.
	S3Config pulumix.Input[*S3LocationS3ConfigArgs]
	// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. [Valid values](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes)
	S3StorageClass pulumix.Input[*string]
	// Prefix to perform actions as source or destination.
	Subdirectory pulumix.Input[*string]
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	Uri     pulumix.Input[*string]
}

func (S3LocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3locationState)(nil)).Elem()
}

type s3locationArgs struct {
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns []string `pulumi:"agentArns"`
	// Amazon Resource Name (ARN) of the S3 Bucket.
	S3BucketArn string `pulumi:"s3BucketArn"`
	// Configuration block containing information for connecting to S3.
	S3Config S3LocationS3Config `pulumi:"s3Config"`
	// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. [Valid values](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes)
	S3StorageClass *string `pulumi:"s3StorageClass"`
	// Prefix to perform actions as source or destination.
	Subdirectory string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a S3Location resource.
type S3LocationArgs struct {
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns pulumix.Input[[]string]
	// Amazon Resource Name (ARN) of the S3 Bucket.
	S3BucketArn pulumix.Input[string]
	// Configuration block containing information for connecting to S3.
	S3Config pulumix.Input[*S3LocationS3ConfigArgs]
	// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. [Valid values](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes)
	S3StorageClass pulumix.Input[*string]
	// Prefix to perform actions as source or destination.
	Subdirectory pulumix.Input[string]
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (S3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3locationArgs)(nil)).Elem()
}

type S3LocationOutput struct{ *pulumi.OutputState }

func (S3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3Location)(nil)).Elem()
}

func (o S3LocationOutput) ToS3LocationOutput() S3LocationOutput {
	return o
}

func (o S3LocationOutput) ToS3LocationOutputWithContext(ctx context.Context) S3LocationOutput {
	return o
}

func (o S3LocationOutput) ToOutput(ctx context.Context) pulumix.Output[S3Location] {
	return pulumix.Output[S3Location]{
		OutputState: o.OutputState,
	}
}

// A list of DataSync Agent ARNs with which this location will be associated.
func (o S3LocationOutput) AgentArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[S3Location](o, func(v S3Location) pulumix.ArrayOutput[string] { return v.AgentArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Amazon Resource Name (ARN) of the DataSync Location.
func (o S3LocationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[S3Location](o, func(v S3Location) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the S3 Bucket.
func (o S3LocationOutput) S3BucketArn() pulumix.Output[string] {
	value := pulumix.Apply[S3Location](o, func(v S3Location) pulumix.Output[string] { return v.S3BucketArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block containing information for connecting to S3.
func (o S3LocationOutput) S3Config() pulumix.GPtrOutput[S3LocationS3Config, S3LocationS3ConfigOutput] {
	value := pulumix.Apply[S3Location](o, func(v S3Location) pulumix.GPtrOutput[S3LocationS3Config, S3LocationS3ConfigOutput] { return v.S3Config })
	unwrapped := pulumix.Flatten[*S3LocationS3Config, pulumix.GPtrOutput[S3LocationS3Config, S3LocationS3ConfigOutput]](value)
	return pulumix.GPtrOutput[S3LocationS3Config, S3LocationS3ConfigOutput]{OutputState: unwrapped.OutputState}
}

// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. [Valid values](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes)
func (o S3LocationOutput) S3StorageClass() pulumix.Output[string] {
	value := pulumix.Apply[S3Location](o, func(v S3Location) pulumix.Output[string] { return v.S3StorageClass })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Prefix to perform actions as source or destination.
func (o S3LocationOutput) Subdirectory() pulumix.Output[string] {
	value := pulumix.Apply[S3Location](o, func(v S3Location) pulumix.Output[string] { return v.Subdirectory })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o S3LocationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[S3Location](o, func(v S3Location) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o S3LocationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[S3Location](o, func(v S3Location) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o S3LocationOutput) Uri() pulumix.Output[string] {
	value := pulumix.Apply[S3Location](o, func(v S3Location) pulumix.Output[string] { return v.Uri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(S3LocationOutput{})
}
