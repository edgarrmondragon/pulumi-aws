// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a Direct Connect Connection.
func LookupConnection(ctx *pulumi.Context, args *LookupConnectionArgs, opts ...pulumi.InvokeOption) (*LookupConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionResult
	err := ctx.Invoke("aws:directconnect/getConnection:getConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnection.
type LookupConnectionArgs struct {
	// Name of the connection to retrieve.
	Name string `pulumi:"name"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getConnection.
type LookupConnectionResult struct {
	// ARN of the connection.
	Arn string `pulumi:"arn"`
	// Direct Connect endpoint on which the physical connection terminates.
	AwsDevice string `pulumi:"awsDevice"`
	// Bandwidth of the connection.
	Bandwidth string `pulumi:"bandwidth"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// AWS Direct Connect location where the connection is located.
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// ID of the AWS account that owns the connection.
	OwnerAccountId string `pulumi:"ownerAccountId"`
	// The name of the AWS Direct Connect service provider associated with the connection.
	PartnerName string `pulumi:"partnerName"`
	// Name of the service provider associated with the connection.
	ProviderName string `pulumi:"providerName"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
	// The VLAN ID.
	VlanId int `pulumi:"vlanId"`
}

func LookupConnectionOutput(ctx *pulumi.Context, args LookupConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupConnectionArgs](args.ToOutput(), func(plainArgs *LookupConnectionArgs) (*LookupConnectionResult, error) {
		return LookupConnection(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupConnectionResultOutput, *LookupConnectionResult](outputResult)
}

// A collection of arguments for invoking getConnection.
type LookupConnectionOutputArgs struct {
	// Name of the connection to retrieve.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags for the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupConnectionOutputArgs) ToOutput() pulumix.Output[*LookupConnectionArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupConnectionArgs {
		return &LookupConnectionArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionResult)(nil)).Elem()
}

func (o LookupConnectionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupConnectionResult] {
	return pulumix.Output[*LookupConnectionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupConnectionResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Arn })
}

func (o LookupConnectionResultOutput) AwsDevice() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.AwsDevice })
}

func (o LookupConnectionResultOutput) Bandwidth() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Bandwidth })
}

func (o LookupConnectionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Id })
}

func (o LookupConnectionResultOutput) Location() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Location })
}

func (o LookupConnectionResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Name })
}

func (o LookupConnectionResultOutput) OwnerAccountId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.OwnerAccountId })
}

func (o LookupConnectionResultOutput) PartnerName() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.PartnerName })
}

func (o LookupConnectionResultOutput) ProviderName() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.ProviderName })
}

func (o LookupConnectionResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupConnectionResultOutput) VlanId() pulumix.Output[int] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) int { return v.VlanId })
}
