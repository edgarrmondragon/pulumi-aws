// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a Lambda Code Signing Config. A code signing configuration defines a list of allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment validation checks fail).
//
// For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html)
func LookupCodeSigningConfig(ctx *pulumi.Context, args *LookupCodeSigningConfigArgs, opts ...pulumi.InvokeOption) (*LookupCodeSigningConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCodeSigningConfigResult
	err := ctx.Invoke("aws:lambda/getCodeSigningConfig:getCodeSigningConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCodeSigningConfig.
type LookupCodeSigningConfigArgs struct {
	// ARN of the code signing configuration.
	Arn string `pulumi:"arn"`
}

// A collection of values returned by getCodeSigningConfig.
type LookupCodeSigningConfigResult struct {
	// List of allowed publishers as signing profiles for this code signing configuration.
	AllowedPublishers []GetCodeSigningConfigAllowedPublisher `pulumi:"allowedPublishers"`
	Arn               string                                 `pulumi:"arn"`
	// Unique identifier for the code signing configuration.
	ConfigId string `pulumi:"configId"`
	// Code signing configuration description.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Date and time that the code signing configuration was last modified.
	LastModified string `pulumi:"lastModified"`
	// List of code signing policies that control the validation failure action for signature mismatch or expiry.
	Policies []GetCodeSigningConfigPolicy `pulumi:"policies"`
}

func LookupCodeSigningConfigOutput(ctx *pulumi.Context, args LookupCodeSigningConfigOutputArgs, opts ...pulumi.InvokeOption) LookupCodeSigningConfigResultOutput {
	outputResult := pulumix.ApplyErr[*LookupCodeSigningConfigArgs](args.ToOutput(), func(plainArgs *LookupCodeSigningConfigArgs) (*LookupCodeSigningConfigResult, error) {
		return LookupCodeSigningConfig(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupCodeSigningConfigResultOutput, *LookupCodeSigningConfigResult](outputResult)
}

// A collection of arguments for invoking getCodeSigningConfig.
type LookupCodeSigningConfigOutputArgs struct {
	// ARN of the code signing configuration.
	Arn pulumix.Input[string] `pulumi:"arn"`
}

func (args LookupCodeSigningConfigOutputArgs) ToOutput() pulumix.Output[*LookupCodeSigningConfigArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupCodeSigningConfigArgs {
		return &LookupCodeSigningConfigArgs{
			Arn: resolvedArgs[0].(string),
		}
	})
}

type LookupCodeSigningConfigResultOutput struct{ *pulumi.OutputState }

func (LookupCodeSigningConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCodeSigningConfigResult)(nil)).Elem()
}

func (o LookupCodeSigningConfigResultOutput) ToOutput(context.Context) pulumix.Output[*LookupCodeSigningConfigResult] {
	return pulumix.Output[*LookupCodeSigningConfigResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCodeSigningConfigResultOutput) AllowedPublishers() pulumix.GArrayOutput[GetCodeSigningConfigAllowedPublisher, GetCodeSigningConfigAllowedPublisherOutput] {
	value := pulumix.Apply[*LookupCodeSigningConfigResult](o, func(v *LookupCodeSigningConfigResult) []GetCodeSigningConfigAllowedPublisher {
		return v.AllowedPublishers
	})
	return pulumix.GArrayOutput[GetCodeSigningConfigAllowedPublisher, GetCodeSigningConfigAllowedPublisherOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupCodeSigningConfigResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCodeSigningConfigResult](o, func(v *LookupCodeSigningConfigResult) string { return v.Arn })
}

func (o LookupCodeSigningConfigResultOutput) ConfigId() pulumix.Output[string] {
	return pulumix.Apply[*LookupCodeSigningConfigResult](o, func(v *LookupCodeSigningConfigResult) string { return v.ConfigId })
}

func (o LookupCodeSigningConfigResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupCodeSigningConfigResult](o, func(v *LookupCodeSigningConfigResult) string { return v.Description })
}

func (o LookupCodeSigningConfigResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupCodeSigningConfigResult](o, func(v *LookupCodeSigningConfigResult) string { return v.Id })
}

func (o LookupCodeSigningConfigResultOutput) LastModified() pulumix.Output[string] {
	return pulumix.Apply[*LookupCodeSigningConfigResult](o, func(v *LookupCodeSigningConfigResult) string { return v.LastModified })
}

func (o LookupCodeSigningConfigResultOutput) Policies() pulumix.GArrayOutput[GetCodeSigningConfigPolicy, GetCodeSigningConfigPolicyOutput] {
	value := pulumix.Apply[*LookupCodeSigningConfigResult](o, func(v *LookupCodeSigningConfigResult) []GetCodeSigningConfigPolicy { return v.Policies })
	return pulumix.GArrayOutput[GetCodeSigningConfigPolicy, GetCodeSigningConfigPolicyOutput]{
		OutputState: value.OutputState,
	}
}
