// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an OpsWorks Ruby on Rails application layer resource.
type RailsAppLayer struct {
	pulumi.CustomResourceState

	// Keyword for the app server to use. Defaults to "apachePassenger".
	AppServer pulumix.Output[*string] `pulumi:"appServer"`
	// The Amazon Resource Name(ARN) of the layer.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumix.Output[*bool] `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumix.Output[*bool] `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing pulumix.Output[*bool] `pulumi:"autoHealing"`
	// When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3".
	BundlerVersion          pulumix.Output[*string]                                                                              `pulumi:"bundlerVersion"`
	CloudwatchConfiguration pulumix.GPtrOutput[RailsAppLayerCloudwatchConfiguration, RailsAppLayerCloudwatchConfigurationOutput] `pulumi:"cloudwatchConfiguration"`
	CustomConfigureRecipes  pulumix.ArrayOutput[string]                                                                          `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes     pulumix.ArrayOutput[string]                                                                          `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumix.Output[*string] `pulumi:"customInstanceProfileArn"`
	// Custom JSON attributes to apply to the layer.
	CustomJson pulumix.Output[*string] `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes     pulumix.ArrayOutput[string] `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes  pulumix.ArrayOutput[string] `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes  pulumix.ArrayOutput[string] `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumix.Output[*bool] `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes pulumix.GArrayOutput[RailsAppLayerEbsVolume, RailsAppLayerEbsVolumeOutput] `pulumi:"ebsVolumes"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumix.Output[*string] `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumix.Output[*bool] `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumix.Output[*int]                                                                           `pulumi:"instanceShutdownTimeout"`
	LoadBasedAutoScaling    pulumix.GPtrOutput[RailsAppLayerLoadBasedAutoScaling, RailsAppLayerLoadBasedAutoScalingOutput] `pulumi:"loadBasedAutoScaling"`
	// Whether OpsWorks should manage bundler. On by default.
	ManageBundler pulumix.Output[*bool] `pulumi:"manageBundler"`
	// A human-readable name for the layer.
	Name pulumix.Output[string] `pulumi:"name"`
	// The version of Passenger to use. Defaults to "4.0.46".
	PassengerVersion pulumix.Output[*string] `pulumi:"passengerVersion"`
	// The version of Ruby to use. Defaults to "2.0.0".
	RubyVersion pulumix.Output[*string] `pulumi:"rubyVersion"`
	// The version of RubyGems to use. Defaults to "2.2.2".
	RubygemsVersion pulumix.Output[*string] `pulumi:"rubygemsVersion"`
	// ID of the stack the layer will belong to.
	StackId pulumix.Output[string] `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumix.ArrayOutput[string] `pulumi:"systemPackages"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The following extra optional arguments, all lists of Chef recipe names, allow
	// custom Chef recipes to be applied to layer instances at the five different
	// lifecycle events, if custom cookbooks are enabled on the layer's stack:
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumix.Output[*bool] `pulumi:"useEbsOptimizedInstances"`
}

// NewRailsAppLayer registers a new resource with the given unique name, arguments, and options.
func NewRailsAppLayer(ctx *pulumi.Context,
	name string, args *RailsAppLayerArgs, opts ...pulumi.ResourceOption) (*RailsAppLayer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RailsAppLayer
	err := ctx.RegisterResource("aws:opsworks/railsAppLayer:RailsAppLayer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRailsAppLayer gets an existing RailsAppLayer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRailsAppLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RailsAppLayerState, opts ...pulumi.ResourceOption) (*RailsAppLayer, error) {
	var resource RailsAppLayer
	err := ctx.ReadResource("aws:opsworks/railsAppLayer:RailsAppLayer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RailsAppLayer resources.
type railsAppLayerState struct {
	// Keyword for the app server to use. Defaults to "apachePassenger".
	AppServer *string `pulumi:"appServer"`
	// The Amazon Resource Name(ARN) of the layer.
	Arn *string `pulumi:"arn"`
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps *bool `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps *bool `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing *bool `pulumi:"autoHealing"`
	// When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3".
	BundlerVersion          *string                               `pulumi:"bundlerVersion"`
	CloudwatchConfiguration *RailsAppLayerCloudwatchConfiguration `pulumi:"cloudwatchConfiguration"`
	CustomConfigureRecipes  []string                              `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes     []string                              `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn *string `pulumi:"customInstanceProfileArn"`
	// Custom JSON attributes to apply to the layer.
	CustomJson *string `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds []string `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes     []string `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes  []string `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes  []string `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown *bool `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes []RailsAppLayerEbsVolume `pulumi:"ebsVolumes"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer *string `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot *bool `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout *int                               `pulumi:"instanceShutdownTimeout"`
	LoadBasedAutoScaling    *RailsAppLayerLoadBasedAutoScaling `pulumi:"loadBasedAutoScaling"`
	// Whether OpsWorks should manage bundler. On by default.
	ManageBundler *bool `pulumi:"manageBundler"`
	// A human-readable name for the layer.
	Name *string `pulumi:"name"`
	// The version of Passenger to use. Defaults to "4.0.46".
	PassengerVersion *string `pulumi:"passengerVersion"`
	// The version of Ruby to use. Defaults to "2.0.0".
	RubyVersion *string `pulumi:"rubyVersion"`
	// The version of RubyGems to use. Defaults to "2.2.2".
	RubygemsVersion *string `pulumi:"rubygemsVersion"`
	// ID of the stack the layer will belong to.
	StackId *string `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages []string `pulumi:"systemPackages"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The following extra optional arguments, all lists of Chef recipe names, allow
	// custom Chef recipes to be applied to layer instances at the five different
	// lifecycle events, if custom cookbooks are enabled on the layer's stack:
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances *bool `pulumi:"useEbsOptimizedInstances"`
}

type RailsAppLayerState struct {
	// Keyword for the app server to use. Defaults to "apachePassenger".
	AppServer pulumix.Input[*string]
	// The Amazon Resource Name(ARN) of the layer.
	Arn pulumix.Input[*string]
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumix.Input[*bool]
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumix.Input[*bool]
	// Whether to enable auto-healing for the layer.
	AutoHealing pulumix.Input[*bool]
	// When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3".
	BundlerVersion          pulumix.Input[*string]
	CloudwatchConfiguration pulumix.Input[*RailsAppLayerCloudwatchConfigurationArgs]
	CustomConfigureRecipes  pulumix.Input[[]string]
	CustomDeployRecipes     pulumix.Input[[]string]
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumix.Input[*string]
	// Custom JSON attributes to apply to the layer.
	CustomJson pulumix.Input[*string]
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumix.Input[[]string]
	CustomSetupRecipes     pulumix.Input[[]string]
	CustomShutdownRecipes  pulumix.Input[[]string]
	CustomUndeployRecipes  pulumix.Input[[]string]
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumix.Input[*bool]
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes pulumix.Input[[]*RailsAppLayerEbsVolumeArgs]
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumix.Input[*string]
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumix.Input[*bool]
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumix.Input[*int]
	LoadBasedAutoScaling    pulumix.Input[*RailsAppLayerLoadBasedAutoScalingArgs]
	// Whether OpsWorks should manage bundler. On by default.
	ManageBundler pulumix.Input[*bool]
	// A human-readable name for the layer.
	Name pulumix.Input[*string]
	// The version of Passenger to use. Defaults to "4.0.46".
	PassengerVersion pulumix.Input[*string]
	// The version of Ruby to use. Defaults to "2.0.0".
	RubyVersion pulumix.Input[*string]
	// The version of RubyGems to use. Defaults to "2.2.2".
	RubygemsVersion pulumix.Input[*string]
	// ID of the stack the layer will belong to.
	StackId pulumix.Input[*string]
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumix.Input[[]string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The following extra optional arguments, all lists of Chef recipe names, allow
	// custom Chef recipes to be applied to layer instances at the five different
	// lifecycle events, if custom cookbooks are enabled on the layer's stack:
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumix.Input[*bool]
}

func (RailsAppLayerState) ElementType() reflect.Type {
	return reflect.TypeOf((*railsAppLayerState)(nil)).Elem()
}

type railsAppLayerArgs struct {
	// Keyword for the app server to use. Defaults to "apachePassenger".
	AppServer *string `pulumi:"appServer"`
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps *bool `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps *bool `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing *bool `pulumi:"autoHealing"`
	// When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3".
	BundlerVersion          *string                               `pulumi:"bundlerVersion"`
	CloudwatchConfiguration *RailsAppLayerCloudwatchConfiguration `pulumi:"cloudwatchConfiguration"`
	CustomConfigureRecipes  []string                              `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes     []string                              `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn *string `pulumi:"customInstanceProfileArn"`
	// Custom JSON attributes to apply to the layer.
	CustomJson *string `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds []string `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes     []string `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes  []string `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes  []string `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown *bool `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes []RailsAppLayerEbsVolume `pulumi:"ebsVolumes"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer *string `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot *bool `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout *int                               `pulumi:"instanceShutdownTimeout"`
	LoadBasedAutoScaling    *RailsAppLayerLoadBasedAutoScaling `pulumi:"loadBasedAutoScaling"`
	// Whether OpsWorks should manage bundler. On by default.
	ManageBundler *bool `pulumi:"manageBundler"`
	// A human-readable name for the layer.
	Name *string `pulumi:"name"`
	// The version of Passenger to use. Defaults to "4.0.46".
	PassengerVersion *string `pulumi:"passengerVersion"`
	// The version of Ruby to use. Defaults to "2.0.0".
	RubyVersion *string `pulumi:"rubyVersion"`
	// The version of RubyGems to use. Defaults to "2.2.2".
	RubygemsVersion *string `pulumi:"rubygemsVersion"`
	// ID of the stack the layer will belong to.
	StackId string `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages []string `pulumi:"systemPackages"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The following extra optional arguments, all lists of Chef recipe names, allow
	// custom Chef recipes to be applied to layer instances at the five different
	// lifecycle events, if custom cookbooks are enabled on the layer's stack:
	Tags map[string]string `pulumi:"tags"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances *bool `pulumi:"useEbsOptimizedInstances"`
}

// The set of arguments for constructing a RailsAppLayer resource.
type RailsAppLayerArgs struct {
	// Keyword for the app server to use. Defaults to "apachePassenger".
	AppServer pulumix.Input[*string]
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumix.Input[*bool]
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumix.Input[*bool]
	// Whether to enable auto-healing for the layer.
	AutoHealing pulumix.Input[*bool]
	// When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3".
	BundlerVersion          pulumix.Input[*string]
	CloudwatchConfiguration pulumix.Input[*RailsAppLayerCloudwatchConfigurationArgs]
	CustomConfigureRecipes  pulumix.Input[[]string]
	CustomDeployRecipes     pulumix.Input[[]string]
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumix.Input[*string]
	// Custom JSON attributes to apply to the layer.
	CustomJson pulumix.Input[*string]
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumix.Input[[]string]
	CustomSetupRecipes     pulumix.Input[[]string]
	CustomShutdownRecipes  pulumix.Input[[]string]
	CustomUndeployRecipes  pulumix.Input[[]string]
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumix.Input[*bool]
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes pulumix.Input[[]*RailsAppLayerEbsVolumeArgs]
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumix.Input[*string]
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumix.Input[*bool]
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumix.Input[*int]
	LoadBasedAutoScaling    pulumix.Input[*RailsAppLayerLoadBasedAutoScalingArgs]
	// Whether OpsWorks should manage bundler. On by default.
	ManageBundler pulumix.Input[*bool]
	// A human-readable name for the layer.
	Name pulumix.Input[*string]
	// The version of Passenger to use. Defaults to "4.0.46".
	PassengerVersion pulumix.Input[*string]
	// The version of Ruby to use. Defaults to "2.0.0".
	RubyVersion pulumix.Input[*string]
	// The version of RubyGems to use. Defaults to "2.2.2".
	RubygemsVersion pulumix.Input[*string]
	// ID of the stack the layer will belong to.
	StackId pulumix.Input[string]
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumix.Input[[]string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// The following extra optional arguments, all lists of Chef recipe names, allow
	// custom Chef recipes to be applied to layer instances at the five different
	// lifecycle events, if custom cookbooks are enabled on the layer's stack:
	Tags pulumix.Input[map[string]string]
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumix.Input[*bool]
}

func (RailsAppLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*railsAppLayerArgs)(nil)).Elem()
}

type RailsAppLayerOutput struct{ *pulumi.OutputState }

func (RailsAppLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayer)(nil)).Elem()
}

func (o RailsAppLayerOutput) ToRailsAppLayerOutput() RailsAppLayerOutput {
	return o
}

func (o RailsAppLayerOutput) ToRailsAppLayerOutputWithContext(ctx context.Context) RailsAppLayerOutput {
	return o
}

func (o RailsAppLayerOutput) ToOutput(ctx context.Context) pulumix.Output[RailsAppLayer] {
	return pulumix.Output[RailsAppLayer]{
		OutputState: o.OutputState,
	}
}

// Keyword for the app server to use. Defaults to "apachePassenger".
func (o RailsAppLayerOutput) AppServer() pulumix.Output[*string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*string] { return v.AppServer })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Amazon Resource Name(ARN) of the layer.
func (o RailsAppLayerOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to automatically assign an elastic IP address to the layer's instances.
func (o RailsAppLayerOutput) AutoAssignElasticIps() pulumix.Output[*bool] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*bool] { return v.AutoAssignElasticIps })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
func (o RailsAppLayerOutput) AutoAssignPublicIps() pulumix.Output[*bool] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*bool] { return v.AutoAssignPublicIps })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether to enable auto-healing for the layer.
func (o RailsAppLayerOutput) AutoHealing() pulumix.Output[*bool] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*bool] { return v.AutoHealing })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3".
func (o RailsAppLayerOutput) BundlerVersion() pulumix.Output[*string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*string] { return v.BundlerVersion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o RailsAppLayerOutput) CloudwatchConfiguration() pulumix.GPtrOutput[RailsAppLayerCloudwatchConfiguration, RailsAppLayerCloudwatchConfigurationOutput] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.GPtrOutput[RailsAppLayerCloudwatchConfiguration, RailsAppLayerCloudwatchConfigurationOutput] {
		return v.CloudwatchConfiguration
	})
	unwrapped := pulumix.Flatten[*RailsAppLayerCloudwatchConfiguration, pulumix.GPtrOutput[RailsAppLayerCloudwatchConfiguration, RailsAppLayerCloudwatchConfigurationOutput]](value)
	return pulumix.GPtrOutput[RailsAppLayerCloudwatchConfiguration, RailsAppLayerCloudwatchConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func (o RailsAppLayerOutput) CustomConfigureRecipes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.ArrayOutput[string] { return v.CustomConfigureRecipes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o RailsAppLayerOutput) CustomDeployRecipes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.ArrayOutput[string] { return v.CustomDeployRecipes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ARN of an IAM profile that will be used for the layer's instances.
func (o RailsAppLayerOutput) CustomInstanceProfileArn() pulumix.Output[*string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*string] { return v.CustomInstanceProfileArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Custom JSON attributes to apply to the layer.
func (o RailsAppLayerOutput) CustomJson() pulumix.Output[*string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*string] { return v.CustomJson })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Ids for a set of security groups to apply to the layer's instances.
func (o RailsAppLayerOutput) CustomSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.ArrayOutput[string] { return v.CustomSecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o RailsAppLayerOutput) CustomSetupRecipes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.ArrayOutput[string] { return v.CustomSetupRecipes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o RailsAppLayerOutput) CustomShutdownRecipes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.ArrayOutput[string] { return v.CustomShutdownRecipes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o RailsAppLayerOutput) CustomUndeployRecipes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.ArrayOutput[string] { return v.CustomUndeployRecipes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether to enable Elastic Load Balancing connection draining.
func (o RailsAppLayerOutput) DrainElbOnShutdown() pulumix.Output[*bool] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*bool] { return v.DrainElbOnShutdown })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
func (o RailsAppLayerOutput) EbsVolumes() pulumix.GArrayOutput[RailsAppLayerEbsVolume, RailsAppLayerEbsVolumeOutput] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.GArrayOutput[RailsAppLayerEbsVolume, RailsAppLayerEbsVolumeOutput] {
		return v.EbsVolumes
	})
	unwrapped := pulumix.Flatten[[]RailsAppLayerEbsVolume, pulumix.GArrayOutput[RailsAppLayerEbsVolume, RailsAppLayerEbsVolumeOutput]](value)
	return pulumix.GArrayOutput[RailsAppLayerEbsVolume, RailsAppLayerEbsVolumeOutput]{OutputState: unwrapped.OutputState}
}

// Name of an Elastic Load Balancer to attach to this layer
func (o RailsAppLayerOutput) ElasticLoadBalancer() pulumix.Output[*string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*string] { return v.ElasticLoadBalancer })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether to install OS and package updates on each instance when it boots.
func (o RailsAppLayerOutput) InstallUpdatesOnBoot() pulumix.Output[*bool] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*bool] { return v.InstallUpdatesOnBoot })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
func (o RailsAppLayerOutput) InstanceShutdownTimeout() pulumix.Output[*int] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*int] { return v.InstanceShutdownTimeout })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o RailsAppLayerOutput) LoadBasedAutoScaling() pulumix.GPtrOutput[RailsAppLayerLoadBasedAutoScaling, RailsAppLayerLoadBasedAutoScalingOutput] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.GPtrOutput[RailsAppLayerLoadBasedAutoScaling, RailsAppLayerLoadBasedAutoScalingOutput] {
		return v.LoadBasedAutoScaling
	})
	unwrapped := pulumix.Flatten[*RailsAppLayerLoadBasedAutoScaling, pulumix.GPtrOutput[RailsAppLayerLoadBasedAutoScaling, RailsAppLayerLoadBasedAutoScalingOutput]](value)
	return pulumix.GPtrOutput[RailsAppLayerLoadBasedAutoScaling, RailsAppLayerLoadBasedAutoScalingOutput]{OutputState: unwrapped.OutputState}
}

// Whether OpsWorks should manage bundler. On by default.
func (o RailsAppLayerOutput) ManageBundler() pulumix.Output[*bool] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*bool] { return v.ManageBundler })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A human-readable name for the layer.
func (o RailsAppLayerOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The version of Passenger to use. Defaults to "4.0.46".
func (o RailsAppLayerOutput) PassengerVersion() pulumix.Output[*string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*string] { return v.PassengerVersion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The version of Ruby to use. Defaults to "2.0.0".
func (o RailsAppLayerOutput) RubyVersion() pulumix.Output[*string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*string] { return v.RubyVersion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The version of RubyGems to use. Defaults to "2.2.2".
func (o RailsAppLayerOutput) RubygemsVersion() pulumix.Output[*string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*string] { return v.RubygemsVersion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ID of the stack the layer will belong to.
func (o RailsAppLayerOutput) StackId() pulumix.Output[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[string] { return v.StackId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Names of a set of system packages to install on the layer's instances.
func (o RailsAppLayerOutput) SystemPackages() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.ArrayOutput[string] { return v.SystemPackages })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
//
// The following extra optional arguments, all lists of Chef recipe names, allow
// custom Chef recipes to be applied to layer instances at the five different
// lifecycle events, if custom cookbooks are enabled on the layer's stack:
func (o RailsAppLayerOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RailsAppLayerOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether to use EBS-optimized instances.
func (o RailsAppLayerOutput) UseEbsOptimizedInstances() pulumix.Output[*bool] {
	value := pulumix.Apply[RailsAppLayer](o, func(v RailsAppLayer) pulumix.Output[*bool] { return v.UseEbsOptimizedInstances })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(RailsAppLayerOutput{})
}
