// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The ECS container definition data source allows access to details of
// a specific container within an AWS ECS service.
func GetContainerDefinition(ctx *pulumi.Context, args *GetContainerDefinitionArgs, opts ...pulumi.InvokeOption) (*GetContainerDefinitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetContainerDefinitionResult
	err := ctx.Invoke("aws:ecs/getContainerDefinition:getContainerDefinition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerDefinition.
type GetContainerDefinitionArgs struct {
	// Name of the container definition
	ContainerName string `pulumi:"containerName"`
	// ARN of the task definition which contains the container
	TaskDefinition string `pulumi:"taskDefinition"`
}

// A collection of values returned by getContainerDefinition.
type GetContainerDefinitionResult struct {
	ContainerName string `pulumi:"containerName"`
	// CPU limit for this container definition
	Cpu int `pulumi:"cpu"`
	// Indicator if networking is disabled
	DisableNetworking bool `pulumi:"disableNetworking"`
	// Set docker labels
	DockerLabels map[string]string `pulumi:"dockerLabels"`
	// Environment in use
	Environment map[string]string `pulumi:"environment"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Docker image in use, including the digest
	Image string `pulumi:"image"`
	// Digest of the docker image in use
	ImageDigest string `pulumi:"imageDigest"`
	// Memory limit for this container definition
	Memory int `pulumi:"memory"`
	// Soft limit (in MiB) of memory to reserve for the container. When system memory is under contention, Docker attempts to keep the container memory to this soft limit
	MemoryReservation int    `pulumi:"memoryReservation"`
	TaskDefinition    string `pulumi:"taskDefinition"`
}

func GetContainerDefinitionOutput(ctx *pulumi.Context, args GetContainerDefinitionOutputArgs, opts ...pulumi.InvokeOption) GetContainerDefinitionResultOutput {
	outputResult := pulumix.ApplyErr[*GetContainerDefinitionArgs](args.ToOutput(), func(plainArgs *GetContainerDefinitionArgs) (*GetContainerDefinitionResult, error) {
		return GetContainerDefinition(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetContainerDefinitionResultOutput, *GetContainerDefinitionResult](outputResult)
}

// A collection of arguments for invoking getContainerDefinition.
type GetContainerDefinitionOutputArgs struct {
	// Name of the container definition
	ContainerName pulumix.Input[string] `pulumi:"containerName"`
	// ARN of the task definition which contains the container
	TaskDefinition pulumix.Input[string] `pulumi:"taskDefinition"`
}

func (args GetContainerDefinitionOutputArgs) ToOutput() pulumix.Output[*GetContainerDefinitionArgs] {
	allArgs := pulumix.All(
		args.ContainerName.ToOutput(context.Background()).AsAny(),
		args.TaskDefinition.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetContainerDefinitionArgs {
		return &GetContainerDefinitionArgs{
			ContainerName:  resolvedArgs[0].(string),
			TaskDefinition: resolvedArgs[1].(string),
		}
	})
}

type GetContainerDefinitionResultOutput struct{ *pulumi.OutputState }

func (GetContainerDefinitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerDefinitionResult)(nil)).Elem()
}

func (o GetContainerDefinitionResultOutput) ToOutput(context.Context) pulumix.Output[*GetContainerDefinitionResult] {
	return pulumix.Output[*GetContainerDefinitionResult]{
		OutputState: o.OutputState,
	}
}

func (o GetContainerDefinitionResultOutput) ContainerName() pulumix.Output[string] {
	return pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) string { return v.ContainerName })
}

func (o GetContainerDefinitionResultOutput) Cpu() pulumix.Output[int] {
	return pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) int { return v.Cpu })
}

func (o GetContainerDefinitionResultOutput) DisableNetworking() pulumix.Output[bool] {
	return pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) bool { return v.DisableNetworking })
}

func (o GetContainerDefinitionResultOutput) DockerLabels() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) map[string]string { return v.DockerLabels })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetContainerDefinitionResultOutput) Environment() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) map[string]string { return v.Environment })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetContainerDefinitionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) string { return v.Id })
}

func (o GetContainerDefinitionResultOutput) Image() pulumix.Output[string] {
	return pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) string { return v.Image })
}

func (o GetContainerDefinitionResultOutput) ImageDigest() pulumix.Output[string] {
	return pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) string { return v.ImageDigest })
}

func (o GetContainerDefinitionResultOutput) Memory() pulumix.Output[int] {
	return pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) int { return v.Memory })
}

func (o GetContainerDefinitionResultOutput) MemoryReservation() pulumix.Output[int] {
	return pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) int { return v.MemoryReservation })
}

func (o GetContainerDefinitionResultOutput) TaskDefinition() pulumix.Output[string] {
	return pulumix.Apply[*GetContainerDefinitionResult](o, func(v *GetContainerDefinitionResult) string { return v.TaskDefinition })
}
