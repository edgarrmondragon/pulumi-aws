// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppSync API Association.
type DomainNameApiAssociation struct {
	pulumi.CustomResourceState

	// API ID.
	ApiId pulumix.Output[string] `pulumi:"apiId"`
	// Appsync domain name.
	DomainName pulumix.Output[string] `pulumi:"domainName"`
}

// NewDomainNameApiAssociation registers a new resource with the given unique name, arguments, and options.
func NewDomainNameApiAssociation(ctx *pulumi.Context,
	name string, args *DomainNameApiAssociationArgs, opts ...pulumi.ResourceOption) (*DomainNameApiAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainNameApiAssociation
	err := ctx.RegisterResource("aws:appsync/domainNameApiAssociation:DomainNameApiAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainNameApiAssociation gets an existing DomainNameApiAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainNameApiAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainNameApiAssociationState, opts ...pulumi.ResourceOption) (*DomainNameApiAssociation, error) {
	var resource DomainNameApiAssociation
	err := ctx.ReadResource("aws:appsync/domainNameApiAssociation:DomainNameApiAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainNameApiAssociation resources.
type domainNameApiAssociationState struct {
	// API ID.
	ApiId *string `pulumi:"apiId"`
	// Appsync domain name.
	DomainName *string `pulumi:"domainName"`
}

type DomainNameApiAssociationState struct {
	// API ID.
	ApiId pulumix.Input[*string]
	// Appsync domain name.
	DomainName pulumix.Input[*string]
}

func (DomainNameApiAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameApiAssociationState)(nil)).Elem()
}

type domainNameApiAssociationArgs struct {
	// API ID.
	ApiId string `pulumi:"apiId"`
	// Appsync domain name.
	DomainName string `pulumi:"domainName"`
}

// The set of arguments for constructing a DomainNameApiAssociation resource.
type DomainNameApiAssociationArgs struct {
	// API ID.
	ApiId pulumix.Input[string]
	// Appsync domain name.
	DomainName pulumix.Input[string]
}

func (DomainNameApiAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameApiAssociationArgs)(nil)).Elem()
}

type DomainNameApiAssociationOutput struct{ *pulumi.OutputState }

func (DomainNameApiAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameApiAssociation)(nil)).Elem()
}

func (o DomainNameApiAssociationOutput) ToDomainNameApiAssociationOutput() DomainNameApiAssociationOutput {
	return o
}

func (o DomainNameApiAssociationOutput) ToDomainNameApiAssociationOutputWithContext(ctx context.Context) DomainNameApiAssociationOutput {
	return o
}

func (o DomainNameApiAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[DomainNameApiAssociation] {
	return pulumix.Output[DomainNameApiAssociation]{
		OutputState: o.OutputState,
	}
}

// API ID.
func (o DomainNameApiAssociationOutput) ApiId() pulumix.Output[string] {
	value := pulumix.Apply[DomainNameApiAssociation](o, func(v DomainNameApiAssociation) pulumix.Output[string] { return v.ApiId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Appsync domain name.
func (o DomainNameApiAssociationOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainNameApiAssociation](o, func(v DomainNameApiAssociation) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DomainNameApiAssociationOutput{})
}
