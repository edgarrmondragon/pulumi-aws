// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a device.
func LookupDevice(ctx *pulumi.Context, args *LookupDeviceArgs, opts ...pulumi.InvokeOption) (*LookupDeviceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDeviceResult
	err := ctx.Invoke("aws:networkmanager/getDevice:getDevice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDevice.
type LookupDeviceArgs struct {
	// ID of the device.
	DeviceId string `pulumi:"deviceId"`
	// ID of the global network.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// Key-value tags for the device.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getDevice.
type LookupDeviceResult struct {
	// ARN of the device.
	Arn string `pulumi:"arn"`
	// AWS location of the device. Documented below.
	AwsLocations []GetDeviceAwsLocation `pulumi:"awsLocations"`
	// Description of the device.
	Description     string `pulumi:"description"`
	DeviceId        string `pulumi:"deviceId"`
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Location of the device. Documented below.
	Locations []GetDeviceLocation `pulumi:"locations"`
	// Model of device.
	Model string `pulumi:"model"`
	// Serial number of the device.
	SerialNumber string `pulumi:"serialNumber"`
	// ID of the site.
	SiteId string `pulumi:"siteId"`
	// Key-value tags for the device.
	Tags map[string]string `pulumi:"tags"`
	// Type of device.
	Type string `pulumi:"type"`
	// Vendor of the device.
	Vendor string `pulumi:"vendor"`
}

func LookupDeviceOutput(ctx *pulumi.Context, args LookupDeviceOutputArgs, opts ...pulumi.InvokeOption) LookupDeviceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDeviceArgs](args.ToOutput(), func(plainArgs *LookupDeviceArgs) (*LookupDeviceResult, error) {
		return LookupDevice(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDeviceResultOutput, *LookupDeviceResult](outputResult)
}

// A collection of arguments for invoking getDevice.
type LookupDeviceOutputArgs struct {
	// ID of the device.
	DeviceId pulumix.Input[string] `pulumi:"deviceId"`
	// ID of the global network.
	GlobalNetworkId pulumix.Input[string] `pulumi:"globalNetworkId"`
	// Key-value tags for the device.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupDeviceOutputArgs) ToOutput() pulumix.Output[*LookupDeviceArgs] {
	allArgs := pulumix.All(
		args.DeviceId.ToOutput(context.Background()).AsAny(),
		args.GlobalNetworkId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDeviceArgs {
		return &LookupDeviceArgs{
			DeviceId:        resolvedArgs[0].(string),
			GlobalNetworkId: resolvedArgs[1].(string),
			Tags:            resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupDeviceResultOutput struct{ *pulumi.OutputState }

func (LookupDeviceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeviceResult)(nil)).Elem()
}

func (o LookupDeviceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDeviceResult] {
	return pulumix.Output[*LookupDeviceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDeviceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) string { return v.Arn })
}

func (o LookupDeviceResultOutput) AwsLocations() pulumix.GArrayOutput[GetDeviceAwsLocation, GetDeviceAwsLocationOutput] {
	value := pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) []GetDeviceAwsLocation { return v.AwsLocations })
	return pulumix.GArrayOutput[GetDeviceAwsLocation, GetDeviceAwsLocationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDeviceResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) string { return v.Description })
}

func (o LookupDeviceResultOutput) DeviceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) string { return v.DeviceId })
}

func (o LookupDeviceResultOutput) GlobalNetworkId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) string { return v.GlobalNetworkId })
}

func (o LookupDeviceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) string { return v.Id })
}

func (o LookupDeviceResultOutput) Locations() pulumix.GArrayOutput[GetDeviceLocation, GetDeviceLocationOutput] {
	value := pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) []GetDeviceLocation { return v.Locations })
	return pulumix.GArrayOutput[GetDeviceLocation, GetDeviceLocationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDeviceResultOutput) Model() pulumix.Output[string] {
	return pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) string { return v.Model })
}

func (o LookupDeviceResultOutput) SerialNumber() pulumix.Output[string] {
	return pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) string { return v.SerialNumber })
}

func (o LookupDeviceResultOutput) SiteId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) string { return v.SiteId })
}

func (o LookupDeviceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupDeviceResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) string { return v.Type })
}

func (o LookupDeviceResultOutput) Vendor() pulumix.Output[string] {
	return pulumix.Apply[*LookupDeviceResult](o, func(v *LookupDeviceResult) string { return v.Vendor })
}
