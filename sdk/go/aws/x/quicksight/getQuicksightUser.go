// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about a specific
// QuickSight user. By using this data source, you can reference QuickSight user
// properties without having to hard code ARNs or unique IDs as input.
func GetQuicksightUser(ctx *pulumi.Context, args *GetQuicksightUserArgs, opts ...pulumi.InvokeOption) (*GetQuicksightUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetQuicksightUserResult
	err := ctx.Invoke("aws:quicksight/getQuicksightUser:getQuicksightUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQuicksightUser.
type GetQuicksightUserArgs struct {
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// QuickSight namespace. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
	// The name of the user that you want to match.
	//
	// The following arguments are optional:
	UserName string `pulumi:"userName"`
}

// A collection of values returned by getQuicksightUser.
type GetQuicksightUserResult struct {
	// The active status of user. When you create an Amazon QuickSight user thatâ€™s not an IAM user or an Active Directory user, that user is inactive until they sign in and provide a password.
	Active bool `pulumi:"active"`
	// The Amazon Resource Name (ARN) for the user.
	Arn          string `pulumi:"arn"`
	AwsAccountId string `pulumi:"awsAccountId"`
	// The user's email address.
	Email string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The type of identity authentication used by the user.
	IdentityType string  `pulumi:"identityType"`
	Namespace    *string `pulumi:"namespace"`
	// The principal ID of the user.
	PrincipalId string `pulumi:"principalId"`
	UserName    string `pulumi:"userName"`
	// The Amazon QuickSight role for the user. The user role can be one of the following:.
	UserRole string `pulumi:"userRole"`
}

func GetQuicksightUserOutput(ctx *pulumi.Context, args GetQuicksightUserOutputArgs, opts ...pulumi.InvokeOption) GetQuicksightUserResultOutput {
	outputResult := pulumix.ApplyErr[*GetQuicksightUserArgs](args.ToOutput(), func(plainArgs *GetQuicksightUserArgs) (*GetQuicksightUserResult, error) {
		return GetQuicksightUser(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetQuicksightUserResultOutput, *GetQuicksightUserResult](outputResult)
}

// A collection of arguments for invoking getQuicksightUser.
type GetQuicksightUserOutputArgs struct {
	// AWS account ID.
	AwsAccountId pulumix.Input[*string] `pulumi:"awsAccountId"`
	// QuickSight namespace. Defaults to `default`.
	Namespace pulumix.Input[*string] `pulumi:"namespace"`
	// The name of the user that you want to match.
	//
	// The following arguments are optional:
	UserName pulumix.Input[string] `pulumi:"userName"`
}

func (args GetQuicksightUserOutputArgs) ToOutput() pulumix.Output[*GetQuicksightUserArgs] {
	allArgs := pulumix.All(
		args.AwsAccountId.ToOutput(context.Background()).AsAny(),
		args.Namespace.ToOutput(context.Background()).AsAny(),
		args.UserName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetQuicksightUserArgs {
		return &GetQuicksightUserArgs{
			AwsAccountId: resolvedArgs[0].(*string),
			Namespace:    resolvedArgs[1].(*string),
			UserName:     resolvedArgs[2].(string),
		}
	})
}

type GetQuicksightUserResultOutput struct{ *pulumi.OutputState }

func (GetQuicksightUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuicksightUserResult)(nil)).Elem()
}

func (o GetQuicksightUserResultOutput) ToOutput(context.Context) pulumix.Output[*GetQuicksightUserResult] {
	return pulumix.Output[*GetQuicksightUserResult]{
		OutputState: o.OutputState,
	}
}

func (o GetQuicksightUserResultOutput) Active() pulumix.Output[bool] {
	return pulumix.Apply[*GetQuicksightUserResult](o, func(v *GetQuicksightUserResult) bool { return v.Active })
}

func (o GetQuicksightUserResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightUserResult](o, func(v *GetQuicksightUserResult) string { return v.Arn })
}

func (o GetQuicksightUserResultOutput) AwsAccountId() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightUserResult](o, func(v *GetQuicksightUserResult) string { return v.AwsAccountId })
}

func (o GetQuicksightUserResultOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightUserResult](o, func(v *GetQuicksightUserResult) string { return v.Email })
}

func (o GetQuicksightUserResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightUserResult](o, func(v *GetQuicksightUserResult) string { return v.Id })
}

func (o GetQuicksightUserResultOutput) IdentityType() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightUserResult](o, func(v *GetQuicksightUserResult) string { return v.IdentityType })
}

func (o GetQuicksightUserResultOutput) Namespace() pulumix.Output[*string] {
	return pulumix.Apply[*GetQuicksightUserResult](o, func(v *GetQuicksightUserResult) *string { return v.Namespace })
}

func (o GetQuicksightUserResultOutput) PrincipalId() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightUserResult](o, func(v *GetQuicksightUserResult) string { return v.PrincipalId })
}

func (o GetQuicksightUserResultOutput) UserName() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightUserResult](o, func(v *GetQuicksightUserResult) string { return v.UserName })
}

func (o GetQuicksightUserResultOutput) UserRole() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightUserResult](o, func(v *GetQuicksightUserResult) string { return v.UserRole })
}
