// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipes

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PipeSourceParameters struct {
	// The collection of event patterns used to filter events. Detailed below.
	FilterCriteria *PipeSourceParametersFilterCriteria `pulumi:"filterCriteria"`
}

// PipeSourceParametersInput is an input type that accepts PipeSourceParametersArgs and PipeSourceParametersOutput values.
// You can construct a concrete instance of `PipeSourceParametersInput` via:
//
//	PipeSourceParametersArgs{...}
type PipeSourceParametersInput interface {
	pulumi.Input

	ToPipeSourceParametersOutput() PipeSourceParametersOutput
	ToPipeSourceParametersOutputWithContext(context.Context) PipeSourceParametersOutput
}

type PipeSourceParametersArgs struct {
	// The collection of event patterns used to filter events. Detailed below.
	FilterCriteria PipeSourceParametersFilterCriteriaPtrInput `pulumi:"filterCriteria"`
}

func (PipeSourceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParameters)(nil)).Elem()
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersOutput() PipeSourceParametersOutput {
	return i.ToPipeSourceParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersOutputWithContext(ctx context.Context) PipeSourceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersOutput)
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return i.ToPipeSourceParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersOutput).ToPipeSourceParametersPtrOutputWithContext(ctx)
}

// PipeSourceParametersPtrInput is an input type that accepts PipeSourceParametersArgs, PipeSourceParametersPtr and PipeSourceParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersPtrInput` via:
//
//	        PipeSourceParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput
	ToPipeSourceParametersPtrOutputWithContext(context.Context) PipeSourceParametersPtrOutput
}

type pipeSourceParametersPtrType PipeSourceParametersArgs

func PipeSourceParametersPtr(v *PipeSourceParametersArgs) PipeSourceParametersPtrInput {
	return (*pipeSourceParametersPtrType)(v)
}

func (*pipeSourceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParameters)(nil)).Elem()
}

func (i *pipeSourceParametersPtrType) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return i.ToPipeSourceParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersPtrType) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersPtrOutput)
}

type PipeSourceParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParameters)(nil)).Elem()
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersOutput() PipeSourceParametersOutput {
	return o
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersOutputWithContext(ctx context.Context) PipeSourceParametersOutput {
	return o
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return o.ToPipeSourceParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParameters) *PipeSourceParameters {
		return &v
	}).(PipeSourceParametersPtrOutput)
}

// The collection of event patterns used to filter events. Detailed below.
func (o PipeSourceParametersOutput) FilterCriteria() PipeSourceParametersFilterCriteriaPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceParametersFilterCriteria { return v.FilterCriteria }).(PipeSourceParametersFilterCriteriaPtrOutput)
}

type PipeSourceParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParameters)(nil)).Elem()
}

func (o PipeSourceParametersPtrOutput) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return o
}

func (o PipeSourceParametersPtrOutput) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return o
}

func (o PipeSourceParametersPtrOutput) Elem() PipeSourceParametersOutput {
	return o.ApplyT(func(v *PipeSourceParameters) PipeSourceParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceParameters
		return ret
	}).(PipeSourceParametersOutput)
}

// The collection of event patterns used to filter events. Detailed below.
func (o PipeSourceParametersPtrOutput) FilterCriteria() PipeSourceParametersFilterCriteriaPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceParametersFilterCriteria {
		if v == nil {
			return nil
		}
		return v.FilterCriteria
	}).(PipeSourceParametersFilterCriteriaPtrOutput)
}

type PipeSourceParametersFilterCriteria struct {
	// An array of up to 5 event patterns. Detailed below.
	Filters []PipeSourceParametersFilterCriteriaFilter `pulumi:"filters"`
}

// PipeSourceParametersFilterCriteriaInput is an input type that accepts PipeSourceParametersFilterCriteriaArgs and PipeSourceParametersFilterCriteriaOutput values.
// You can construct a concrete instance of `PipeSourceParametersFilterCriteriaInput` via:
//
//	PipeSourceParametersFilterCriteriaArgs{...}
type PipeSourceParametersFilterCriteriaInput interface {
	pulumi.Input

	ToPipeSourceParametersFilterCriteriaOutput() PipeSourceParametersFilterCriteriaOutput
	ToPipeSourceParametersFilterCriteriaOutputWithContext(context.Context) PipeSourceParametersFilterCriteriaOutput
}

type PipeSourceParametersFilterCriteriaArgs struct {
	// An array of up to 5 event patterns. Detailed below.
	Filters PipeSourceParametersFilterCriteriaFilterArrayInput `pulumi:"filters"`
}

func (PipeSourceParametersFilterCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteria)(nil)).Elem()
}

func (i PipeSourceParametersFilterCriteriaArgs) ToPipeSourceParametersFilterCriteriaOutput() PipeSourceParametersFilterCriteriaOutput {
	return i.ToPipeSourceParametersFilterCriteriaOutputWithContext(context.Background())
}

func (i PipeSourceParametersFilterCriteriaArgs) ToPipeSourceParametersFilterCriteriaOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaOutput)
}

func (i PipeSourceParametersFilterCriteriaArgs) ToPipeSourceParametersFilterCriteriaPtrOutput() PipeSourceParametersFilterCriteriaPtrOutput {
	return i.ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersFilterCriteriaArgs) ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaOutput).ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx)
}

// PipeSourceParametersFilterCriteriaPtrInput is an input type that accepts PipeSourceParametersFilterCriteriaArgs, PipeSourceParametersFilterCriteriaPtr and PipeSourceParametersFilterCriteriaPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersFilterCriteriaPtrInput` via:
//
//	        PipeSourceParametersFilterCriteriaArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersFilterCriteriaPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersFilterCriteriaPtrOutput() PipeSourceParametersFilterCriteriaPtrOutput
	ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(context.Context) PipeSourceParametersFilterCriteriaPtrOutput
}

type pipeSourceParametersFilterCriteriaPtrType PipeSourceParametersFilterCriteriaArgs

func PipeSourceParametersFilterCriteriaPtr(v *PipeSourceParametersFilterCriteriaArgs) PipeSourceParametersFilterCriteriaPtrInput {
	return (*pipeSourceParametersFilterCriteriaPtrType)(v)
}

func (*pipeSourceParametersFilterCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersFilterCriteria)(nil)).Elem()
}

func (i *pipeSourceParametersFilterCriteriaPtrType) ToPipeSourceParametersFilterCriteriaPtrOutput() PipeSourceParametersFilterCriteriaPtrOutput {
	return i.ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersFilterCriteriaPtrType) ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaPtrOutput)
}

type PipeSourceParametersFilterCriteriaOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersFilterCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteria)(nil)).Elem()
}

func (o PipeSourceParametersFilterCriteriaOutput) ToPipeSourceParametersFilterCriteriaOutput() PipeSourceParametersFilterCriteriaOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaOutput) ToPipeSourceParametersFilterCriteriaOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaOutput) ToPipeSourceParametersFilterCriteriaPtrOutput() PipeSourceParametersFilterCriteriaPtrOutput {
	return o.ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersFilterCriteriaOutput) ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersFilterCriteria) *PipeSourceParametersFilterCriteria {
		return &v
	}).(PipeSourceParametersFilterCriteriaPtrOutput)
}

// An array of up to 5 event patterns. Detailed below.
func (o PipeSourceParametersFilterCriteriaOutput) Filters() PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return o.ApplyT(func(v PipeSourceParametersFilterCriteria) []PipeSourceParametersFilterCriteriaFilter {
		return v.Filters
	}).(PipeSourceParametersFilterCriteriaFilterArrayOutput)
}

type PipeSourceParametersFilterCriteriaPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersFilterCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersFilterCriteria)(nil)).Elem()
}

func (o PipeSourceParametersFilterCriteriaPtrOutput) ToPipeSourceParametersFilterCriteriaPtrOutput() PipeSourceParametersFilterCriteriaPtrOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaPtrOutput) ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaPtrOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaPtrOutput) Elem() PipeSourceParametersFilterCriteriaOutput {
	return o.ApplyT(func(v *PipeSourceParametersFilterCriteria) PipeSourceParametersFilterCriteria {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersFilterCriteria
		return ret
	}).(PipeSourceParametersFilterCriteriaOutput)
}

// An array of up to 5 event patterns. Detailed below.
func (o PipeSourceParametersFilterCriteriaPtrOutput) Filters() PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return o.ApplyT(func(v *PipeSourceParametersFilterCriteria) []PipeSourceParametersFilterCriteriaFilter {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(PipeSourceParametersFilterCriteriaFilterArrayOutput)
}

type PipeSourceParametersFilterCriteriaFilter struct {
	// The event pattern. At most 4096 characters.
	Pattern string `pulumi:"pattern"`
}

// PipeSourceParametersFilterCriteriaFilterInput is an input type that accepts PipeSourceParametersFilterCriteriaFilterArgs and PipeSourceParametersFilterCriteriaFilterOutput values.
// You can construct a concrete instance of `PipeSourceParametersFilterCriteriaFilterInput` via:
//
//	PipeSourceParametersFilterCriteriaFilterArgs{...}
type PipeSourceParametersFilterCriteriaFilterInput interface {
	pulumi.Input

	ToPipeSourceParametersFilterCriteriaFilterOutput() PipeSourceParametersFilterCriteriaFilterOutput
	ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(context.Context) PipeSourceParametersFilterCriteriaFilterOutput
}

type PipeSourceParametersFilterCriteriaFilterArgs struct {
	// The event pattern. At most 4096 characters.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (PipeSourceParametersFilterCriteriaFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteriaFilter)(nil)).Elem()
}

func (i PipeSourceParametersFilterCriteriaFilterArgs) ToPipeSourceParametersFilterCriteriaFilterOutput() PipeSourceParametersFilterCriteriaFilterOutput {
	return i.ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(context.Background())
}

func (i PipeSourceParametersFilterCriteriaFilterArgs) ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaFilterOutput)
}

// PipeSourceParametersFilterCriteriaFilterArrayInput is an input type that accepts PipeSourceParametersFilterCriteriaFilterArray and PipeSourceParametersFilterCriteriaFilterArrayOutput values.
// You can construct a concrete instance of `PipeSourceParametersFilterCriteriaFilterArrayInput` via:
//
//	PipeSourceParametersFilterCriteriaFilterArray{ PipeSourceParametersFilterCriteriaFilterArgs{...} }
type PipeSourceParametersFilterCriteriaFilterArrayInput interface {
	pulumi.Input

	ToPipeSourceParametersFilterCriteriaFilterArrayOutput() PipeSourceParametersFilterCriteriaFilterArrayOutput
	ToPipeSourceParametersFilterCriteriaFilterArrayOutputWithContext(context.Context) PipeSourceParametersFilterCriteriaFilterArrayOutput
}

type PipeSourceParametersFilterCriteriaFilterArray []PipeSourceParametersFilterCriteriaFilterInput

func (PipeSourceParametersFilterCriteriaFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeSourceParametersFilterCriteriaFilter)(nil)).Elem()
}

func (i PipeSourceParametersFilterCriteriaFilterArray) ToPipeSourceParametersFilterCriteriaFilterArrayOutput() PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return i.ToPipeSourceParametersFilterCriteriaFilterArrayOutputWithContext(context.Background())
}

func (i PipeSourceParametersFilterCriteriaFilterArray) ToPipeSourceParametersFilterCriteriaFilterArrayOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaFilterArrayOutput)
}

type PipeSourceParametersFilterCriteriaFilterOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersFilterCriteriaFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteriaFilter)(nil)).Elem()
}

func (o PipeSourceParametersFilterCriteriaFilterOutput) ToPipeSourceParametersFilterCriteriaFilterOutput() PipeSourceParametersFilterCriteriaFilterOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaFilterOutput) ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaFilterOutput {
	return o
}

// The event pattern. At most 4096 characters.
func (o PipeSourceParametersFilterCriteriaFilterOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersFilterCriteriaFilter) string { return v.Pattern }).(pulumi.StringOutput)
}

type PipeSourceParametersFilterCriteriaFilterArrayOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersFilterCriteriaFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeSourceParametersFilterCriteriaFilter)(nil)).Elem()
}

func (o PipeSourceParametersFilterCriteriaFilterArrayOutput) ToPipeSourceParametersFilterCriteriaFilterArrayOutput() PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaFilterArrayOutput) ToPipeSourceParametersFilterCriteriaFilterArrayOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaFilterArrayOutput) Index(i pulumi.IntInput) PipeSourceParametersFilterCriteriaFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeSourceParametersFilterCriteriaFilter {
		return vs[0].([]PipeSourceParametersFilterCriteriaFilter)[vs[1].(int)]
	}).(PipeSourceParametersFilterCriteriaFilterOutput)
}

type PipeTargetParameters struct {
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target.
	InputTemplate *string `pulumi:"inputTemplate"`
}

// PipeTargetParametersInput is an input type that accepts PipeTargetParametersArgs and PipeTargetParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersInput` via:
//
//	PipeTargetParametersArgs{...}
type PipeTargetParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersOutput() PipeTargetParametersOutput
	ToPipeTargetParametersOutputWithContext(context.Context) PipeTargetParametersOutput
}

type PipeTargetParametersArgs struct {
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target.
	InputTemplate pulumi.StringPtrInput `pulumi:"inputTemplate"`
}

func (PipeTargetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParameters)(nil)).Elem()
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersOutput() PipeTargetParametersOutput {
	return i.ToPipeTargetParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersOutputWithContext(ctx context.Context) PipeTargetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersOutput)
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return i.ToPipeTargetParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersOutput).ToPipeTargetParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersPtrInput is an input type that accepts PipeTargetParametersArgs, PipeTargetParametersPtr and PipeTargetParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersPtrInput` via:
//
//	        PipeTargetParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput
	ToPipeTargetParametersPtrOutputWithContext(context.Context) PipeTargetParametersPtrOutput
}

type pipeTargetParametersPtrType PipeTargetParametersArgs

func PipeTargetParametersPtr(v *PipeTargetParametersArgs) PipeTargetParametersPtrInput {
	return (*pipeTargetParametersPtrType)(v)
}

func (*pipeTargetParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParameters)(nil)).Elem()
}

func (i *pipeTargetParametersPtrType) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return i.ToPipeTargetParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersPtrType) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersPtrOutput)
}

type PipeTargetParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParameters)(nil)).Elem()
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersOutput() PipeTargetParametersOutput {
	return o
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersOutputWithContext(ctx context.Context) PipeTargetParametersOutput {
	return o
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return o.ToPipeTargetParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParameters) *PipeTargetParameters {
		return &v
	}).(PipeTargetParametersPtrOutput)
}

// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target.
func (o PipeTargetParametersOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *string { return v.InputTemplate }).(pulumi.StringPtrOutput)
}

type PipeTargetParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParameters)(nil)).Elem()
}

func (o PipeTargetParametersPtrOutput) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return o
}

func (o PipeTargetParametersPtrOutput) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return o
}

func (o PipeTargetParametersPtrOutput) Elem() PipeTargetParametersOutput {
	return o.ApplyT(func(v *PipeTargetParameters) PipeTargetParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParameters
		return ret
	}).(PipeTargetParametersOutput)
}

// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target.
func (o PipeTargetParametersPtrOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *string {
		if v == nil {
			return nil
		}
		return v.InputTemplate
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersInput)(nil)).Elem(), PipeSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersPtrInput)(nil)).Elem(), PipeSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersFilterCriteriaInput)(nil)).Elem(), PipeSourceParametersFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersFilterCriteriaPtrInput)(nil)).Elem(), PipeSourceParametersFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersFilterCriteriaFilterInput)(nil)).Elem(), PipeSourceParametersFilterCriteriaFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersFilterCriteriaFilterArrayInput)(nil)).Elem(), PipeSourceParametersFilterCriteriaFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersInput)(nil)).Elem(), PipeTargetParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersPtrInput)(nil)).Elem(), PipeTargetParametersArgs{})
	pulumi.RegisterOutputType(PipeSourceParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersFilterCriteriaOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersFilterCriteriaPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersFilterCriteriaFilterOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersFilterCriteriaFilterArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersPtrOutput{})
}
