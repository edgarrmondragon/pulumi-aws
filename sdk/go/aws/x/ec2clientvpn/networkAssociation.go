// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2clientvpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides network associations for AWS Client VPN endpoints. For more information on usage, please see the
// [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
type NetworkAssociation struct {
	pulumi.CustomResourceState

	// The unique ID of the target network association.
	AssociationId pulumix.Output[string] `pulumi:"associationId"`
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumix.Output[string] `pulumi:"clientVpnEndpointId"`
	// The ID of the subnet to associate with the Client VPN endpoint.
	SubnetId pulumix.Output[string] `pulumi:"subnetId"`
	// The ID of the VPC in which the target subnet is located.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewNetworkAssociation registers a new resource with the given unique name, arguments, and options.
func NewNetworkAssociation(ctx *pulumi.Context,
	name string, args *NetworkAssociationArgs, opts ...pulumi.ResourceOption) (*NetworkAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientVpnEndpointId == nil {
		return nil, errors.New("invalid value for required argument 'ClientVpnEndpointId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAssociation
	err := ctx.RegisterResource("aws:ec2clientvpn/networkAssociation:NetworkAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAssociation gets an existing NetworkAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAssociationState, opts ...pulumi.ResourceOption) (*NetworkAssociation, error) {
	var resource NetworkAssociation
	err := ctx.ReadResource("aws:ec2clientvpn/networkAssociation:NetworkAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAssociation resources.
type networkAssociationState struct {
	// The unique ID of the target network association.
	AssociationId *string `pulumi:"associationId"`
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId *string `pulumi:"clientVpnEndpointId"`
	// The ID of the subnet to associate with the Client VPN endpoint.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of the VPC in which the target subnet is located.
	VpcId *string `pulumi:"vpcId"`
}

type NetworkAssociationState struct {
	// The unique ID of the target network association.
	AssociationId pulumix.Input[*string]
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumix.Input[*string]
	// The ID of the subnet to associate with the Client VPN endpoint.
	SubnetId pulumix.Input[*string]
	// The ID of the VPC in which the target subnet is located.
	VpcId pulumix.Input[*string]
}

func (NetworkAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAssociationState)(nil)).Elem()
}

type networkAssociationArgs struct {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId string `pulumi:"clientVpnEndpointId"`
	// The ID of the subnet to associate with the Client VPN endpoint.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a NetworkAssociation resource.
type NetworkAssociationArgs struct {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumix.Input[string]
	// The ID of the subnet to associate with the Client VPN endpoint.
	SubnetId pulumix.Input[string]
}

func (NetworkAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAssociationArgs)(nil)).Elem()
}

type NetworkAssociationOutput struct{ *pulumi.OutputState }

func (NetworkAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAssociation)(nil)).Elem()
}

func (o NetworkAssociationOutput) ToNetworkAssociationOutput() NetworkAssociationOutput {
	return o
}

func (o NetworkAssociationOutput) ToNetworkAssociationOutputWithContext(ctx context.Context) NetworkAssociationOutput {
	return o
}

func (o NetworkAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkAssociation] {
	return pulumix.Output[NetworkAssociation]{
		OutputState: o.OutputState,
	}
}

// The unique ID of the target network association.
func (o NetworkAssociationOutput) AssociationId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAssociation](o, func(v NetworkAssociation) pulumix.Output[string] { return v.AssociationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Client VPN endpoint.
func (o NetworkAssociationOutput) ClientVpnEndpointId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAssociation](o, func(v NetworkAssociation) pulumix.Output[string] { return v.ClientVpnEndpointId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the subnet to associate with the Client VPN endpoint.
func (o NetworkAssociationOutput) SubnetId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAssociation](o, func(v NetworkAssociation) pulumix.Output[string] { return v.SubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the VPC in which the target subnet is located.
func (o NetworkAssociationOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAssociation](o, func(v NetworkAssociation) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(NetworkAssociationOutput{})
}
