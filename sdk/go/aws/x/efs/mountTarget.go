// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic File System (EFS) mount target.
type MountTarget struct {
	pulumi.CustomResourceState

	// The unique and consistent identifier of the Availability Zone (AZ) that the mount target resides in.
	AvailabilityZoneId pulumix.Output[string] `pulumi:"availabilityZoneId"`
	// The name of the Availability Zone (AZ) that the mount target resides in.
	AvailabilityZoneName pulumix.Output[string] `pulumi:"availabilityZoneName"`
	// The DNS name for the EFS file system.
	DnsName pulumix.Output[string] `pulumi:"dnsName"`
	// Amazon Resource Name of the file system.
	FileSystemArn pulumix.Output[string] `pulumi:"fileSystemArn"`
	// The ID of the file system for which the mount target is intended.
	FileSystemId pulumix.Output[string] `pulumi:"fileSystemId"`
	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	IpAddress pulumix.Output[string] `pulumi:"ipAddress"`
	// The DNS name for the given subnet/AZ per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
	MountTargetDnsName pulumix.Output[string] `pulumi:"mountTargetDnsName"`
	// The ID of the network interface that Amazon EFS created when it created the mount target.
	NetworkInterfaceId pulumix.Output[string] `pulumi:"networkInterfaceId"`
	// AWS account ID that owns the resource.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// A list of up to 5 VPC security group IDs (that must
	// be for the same VPC as subnet specified) in effect for the mount target.
	SecurityGroups pulumix.ArrayOutput[string] `pulumi:"securityGroups"`
	// The ID of the subnet to add the mount target in.
	SubnetId pulumix.Output[string] `pulumi:"subnetId"`
}

// NewMountTarget registers a new resource with the given unique name, arguments, and options.
func NewMountTarget(ctx *pulumi.Context,
	name string, args *MountTargetArgs, opts ...pulumi.ResourceOption) (*MountTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MountTarget
	err := ctx.RegisterResource("aws:efs/mountTarget:MountTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMountTarget gets an existing MountTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMountTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MountTargetState, opts ...pulumi.ResourceOption) (*MountTarget, error) {
	var resource MountTarget
	err := ctx.ReadResource("aws:efs/mountTarget:MountTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MountTarget resources.
type mountTargetState struct {
	// The unique and consistent identifier of the Availability Zone (AZ) that the mount target resides in.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// The name of the Availability Zone (AZ) that the mount target resides in.
	AvailabilityZoneName *string `pulumi:"availabilityZoneName"`
	// The DNS name for the EFS file system.
	DnsName *string `pulumi:"dnsName"`
	// Amazon Resource Name of the file system.
	FileSystemArn *string `pulumi:"fileSystemArn"`
	// The ID of the file system for which the mount target is intended.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	IpAddress *string `pulumi:"ipAddress"`
	// The DNS name for the given subnet/AZ per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
	MountTargetDnsName *string `pulumi:"mountTargetDnsName"`
	// The ID of the network interface that Amazon EFS created when it created the mount target.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// AWS account ID that owns the resource.
	OwnerId *string `pulumi:"ownerId"`
	// A list of up to 5 VPC security group IDs (that must
	// be for the same VPC as subnet specified) in effect for the mount target.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The ID of the subnet to add the mount target in.
	SubnetId *string `pulumi:"subnetId"`
}

type MountTargetState struct {
	// The unique and consistent identifier of the Availability Zone (AZ) that the mount target resides in.
	AvailabilityZoneId pulumix.Input[*string]
	// The name of the Availability Zone (AZ) that the mount target resides in.
	AvailabilityZoneName pulumix.Input[*string]
	// The DNS name for the EFS file system.
	DnsName pulumix.Input[*string]
	// Amazon Resource Name of the file system.
	FileSystemArn pulumix.Input[*string]
	// The ID of the file system for which the mount target is intended.
	FileSystemId pulumix.Input[*string]
	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	IpAddress pulumix.Input[*string]
	// The DNS name for the given subnet/AZ per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
	MountTargetDnsName pulumix.Input[*string]
	// The ID of the network interface that Amazon EFS created when it created the mount target.
	NetworkInterfaceId pulumix.Input[*string]
	// AWS account ID that owns the resource.
	OwnerId pulumix.Input[*string]
	// A list of up to 5 VPC security group IDs (that must
	// be for the same VPC as subnet specified) in effect for the mount target.
	SecurityGroups pulumix.Input[[]string]
	// The ID of the subnet to add the mount target in.
	SubnetId pulumix.Input[*string]
}

func (MountTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*mountTargetState)(nil)).Elem()
}

type mountTargetArgs struct {
	// The ID of the file system for which the mount target is intended.
	FileSystemId string `pulumi:"fileSystemId"`
	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	IpAddress *string `pulumi:"ipAddress"`
	// A list of up to 5 VPC security group IDs (that must
	// be for the same VPC as subnet specified) in effect for the mount target.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The ID of the subnet to add the mount target in.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a MountTarget resource.
type MountTargetArgs struct {
	// The ID of the file system for which the mount target is intended.
	FileSystemId pulumix.Input[string]
	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	IpAddress pulumix.Input[*string]
	// A list of up to 5 VPC security group IDs (that must
	// be for the same VPC as subnet specified) in effect for the mount target.
	SecurityGroups pulumix.Input[[]string]
	// The ID of the subnet to add the mount target in.
	SubnetId pulumix.Input[string]
}

func (MountTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mountTargetArgs)(nil)).Elem()
}

type MountTargetOutput struct{ *pulumi.OutputState }

func (MountTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountTarget)(nil)).Elem()
}

func (o MountTargetOutput) ToMountTargetOutput() MountTargetOutput {
	return o
}

func (o MountTargetOutput) ToMountTargetOutputWithContext(ctx context.Context) MountTargetOutput {
	return o
}

func (o MountTargetOutput) ToOutput(ctx context.Context) pulumix.Output[MountTarget] {
	return pulumix.Output[MountTarget]{
		OutputState: o.OutputState,
	}
}

// The unique and consistent identifier of the Availability Zone (AZ) that the mount target resides in.
func (o MountTargetOutput) AvailabilityZoneId() pulumix.Output[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.Output[string] { return v.AvailabilityZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Availability Zone (AZ) that the mount target resides in.
func (o MountTargetOutput) AvailabilityZoneName() pulumix.Output[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.Output[string] { return v.AvailabilityZoneName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The DNS name for the EFS file system.
func (o MountTargetOutput) DnsName() pulumix.Output[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.Output[string] { return v.DnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name of the file system.
func (o MountTargetOutput) FileSystemArn() pulumix.Output[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.Output[string] { return v.FileSystemArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the file system for which the mount target is intended.
func (o MountTargetOutput) FileSystemId() pulumix.Output[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.Output[string] { return v.FileSystemId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The address (within the address range of the specified subnet) at
// which the file system may be mounted via the mount target.
func (o MountTargetOutput) IpAddress() pulumix.Output[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.Output[string] { return v.IpAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The DNS name for the given subnet/AZ per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
func (o MountTargetOutput) MountTargetDnsName() pulumix.Output[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.Output[string] { return v.MountTargetDnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the network interface that Amazon EFS created when it created the mount target.
func (o MountTargetOutput) NetworkInterfaceId() pulumix.Output[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.Output[string] { return v.NetworkInterfaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID that owns the resource.
func (o MountTargetOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of up to 5 VPC security group IDs (that must
// be for the same VPC as subnet specified) in effect for the mount target.
func (o MountTargetOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.ArrayOutput[string] { return v.SecurityGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the subnet to add the mount target in.
func (o MountTargetOutput) SubnetId() pulumix.Output[string] {
	value := pulumix.Apply[MountTarget](o, func(v MountTarget) pulumix.Output[string] { return v.SubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MountTargetOutput{})
}
