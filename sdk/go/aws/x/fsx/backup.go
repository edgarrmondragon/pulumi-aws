// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a FSx Backup resource.
//
// ## Lustre Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/fsx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleLustreFileSystem, err := fsx.NewLustreFileSystem(ctx, "exampleLustreFileSystem", &fsx.LustreFileSystemArgs{
//				StorageCapacity: pulumi.Int(1200),
//				SubnetIds: pulumi.String{
//					aws_subnet.Example.Id,
//				},
//				DeploymentType:           pulumi.String("PERSISTENT_1"),
//				PerUnitStorageThroughput: pulumi.Int(50),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fsx.NewBackup(ctx, "exampleBackup", &fsx.BackupArgs{
//				FileSystemId: exampleLustreFileSystem.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Windows Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/fsx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleWindowsFileSystem, err := fsx.NewWindowsFileSystem(ctx, "exampleWindowsFileSystem", &fsx.WindowsFileSystemArgs{
//				ActiveDirectoryId: pulumi.Any(aws_directory_service_directory.Eample.Id),
//				SkipFinalBackup:   pulumi.Bool(true),
//				StorageCapacity:   pulumi.Int(32),
//				SubnetIds: pulumi.StringArray{
//					aws_subnet.Example1.Id,
//				},
//				ThroughputCapacity: pulumi.Int(8),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fsx.NewBackup(ctx, "exampleBackup", &fsx.BackupArgs{
//				FileSystemId: exampleWindowsFileSystem.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## ONTAP Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/fsx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleOntapVolume, err := fsx.NewOntapVolume(ctx, "exampleOntapVolume", &fsx.OntapVolumeArgs{
//				JunctionPath:             pulumi.String("/example"),
//				SizeInMegabytes:          pulumi.Int(1024),
//				StorageEfficiencyEnabled: pulumi.Bool(true),
//				StorageVirtualMachineId:  pulumi.Any(aws_fsx_ontap_storage_virtual_machine.Test.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fsx.NewBackup(ctx, "exampleBackup", &fsx.BackupArgs{
//				VolumeId: exampleOntapVolume.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## OpenZFS Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/fsx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleOpenZfsFileSystem, err := fsx.NewOpenZfsFileSystem(ctx, "exampleOpenZfsFileSystem", &fsx.OpenZfsFileSystemArgs{
//				StorageCapacity: pulumi.Int(64),
//				SubnetIds: pulumi.String{
//					aws_subnet.Example.Id,
//				},
//				DeploymentType:     pulumi.String("SINGLE_AZ_1"),
//				ThroughputCapacity: pulumi.Int(64),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fsx.NewBackup(ctx, "exampleBackup", &fsx.BackupArgs{
//				FileSystemId: exampleOpenZfsFileSystem.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import FSx Backups using the `id`. For example:
//
// ```sh
//
//	$ pulumi import aws:fsx/backup:Backup example fs-543ab12b1ca672f33
//
// ```
type Backup struct {
	pulumi.CustomResourceState

	// Amazon Resource Name of the backup.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ID of the file system to back up. Required if backing up Lustre or Windows file systems.
	FileSystemId pulumix.Output[*string] `pulumi:"fileSystemId"`
	// The ID of the AWS Key Management Service (AWS KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// AWS account identifier that created the file system.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of the file system backup.
	Type pulumix.Output[string] `pulumi:"type"`
	// The ID of the volume to back up. Required if backing up a ONTAP Volume.
	VolumeId pulumix.Output[*string] `pulumi:"volumeId"`
}

// NewBackup registers a new resource with the given unique name, arguments, and options.
func NewBackup(ctx *pulumi.Context,
	name string, args *BackupArgs, opts ...pulumi.ResourceOption) (*Backup, error) {
	if args == nil {
		args = &BackupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Backup
	err := ctx.RegisterResource("aws:fsx/backup:Backup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackup gets an existing Backup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupState, opts ...pulumi.ResourceOption) (*Backup, error) {
	var resource Backup
	err := ctx.ReadResource("aws:fsx/backup:Backup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Backup resources.
type backupState struct {
	// Amazon Resource Name of the backup.
	Arn *string `pulumi:"arn"`
	// The ID of the file system to back up. Required if backing up Lustre or Windows file systems.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The ID of the AWS Key Management Service (AWS KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// AWS account identifier that created the file system.
	OwnerId *string `pulumi:"ownerId"`
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of the file system backup.
	Type *string `pulumi:"type"`
	// The ID of the volume to back up. Required if backing up a ONTAP Volume.
	VolumeId *string `pulumi:"volumeId"`
}

type BackupState struct {
	// Amazon Resource Name of the backup.
	Arn pulumix.Input[*string]
	// The ID of the file system to back up. Required if backing up Lustre or Windows file systems.
	FileSystemId pulumix.Input[*string]
	// The ID of the AWS Key Management Service (AWS KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest.
	KmsKeyId pulumix.Input[*string]
	// AWS account identifier that created the file system.
	OwnerId pulumix.Input[*string]
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of the file system backup.
	Type pulumix.Input[*string]
	// The ID of the volume to back up. Required if backing up a ONTAP Volume.
	VolumeId pulumix.Input[*string]
}

func (BackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupState)(nil)).Elem()
}

type backupArgs struct {
	// The ID of the file system to back up. Required if backing up Lustre or Windows file systems.
	FileSystemId *string `pulumi:"fileSystemId"`
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the volume to back up. Required if backing up a ONTAP Volume.
	VolumeId *string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Backup resource.
type BackupArgs struct {
	// The ID of the file system to back up. Required if backing up Lustre or Windows file systems.
	FileSystemId pulumix.Input[*string]
	// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumix.Input[map[string]string]
	// The ID of the volume to back up. Required if backing up a ONTAP Volume.
	VolumeId pulumix.Input[*string]
}

func (BackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupArgs)(nil)).Elem()
}

type BackupOutput struct{ *pulumi.OutputState }

func (BackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Backup)(nil)).Elem()
}

func (o BackupOutput) ToBackupOutput() BackupOutput {
	return o
}

func (o BackupOutput) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return o
}

func (o BackupOutput) ToOutput(ctx context.Context) pulumix.Output[Backup] {
	return pulumix.Output[Backup]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name of the backup.
func (o BackupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Backup](o, func(v Backup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the file system to back up. Required if backing up Lustre or Windows file systems.
func (o BackupOutput) FileSystemId() pulumix.Output[*string] {
	value := pulumix.Apply[Backup](o, func(v Backup) pulumix.Output[*string] { return v.FileSystemId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the AWS Key Management Service (AWS KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest.
func (o BackupOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[Backup](o, func(v Backup) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account identifier that created the file system.
func (o BackupOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[Backup](o, func(v Backup) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the file system. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
func (o BackupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Backup](o, func(v Backup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o BackupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Backup](o, func(v Backup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of the file system backup.
func (o BackupOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Backup](o, func(v Backup) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the volume to back up. Required if backing up a ONTAP Volume.
func (o BackupOutput) VolumeId() pulumix.Output[*string] {
	value := pulumix.Apply[Backup](o, func(v Backup) pulumix.Output[*string] { return v.VolumeId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(BackupOutput{})
}
