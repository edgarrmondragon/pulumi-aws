// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Amazon Redshift Serverless Snapshot.
type Snapshot struct {
	pulumi.CustomResourceState

	// All of the Amazon Web Services accounts that have access to restore a snapshot to a provisioned cluster.
	AccountsWithProvisionedRestoreAccesses pulumix.ArrayOutput[string] `pulumi:"accountsWithProvisionedRestoreAccesses"`
	// All of the Amazon Web Services accounts that have access to restore a snapshot to a namespace.
	AccountsWithRestoreAccesses pulumix.ArrayOutput[string] `pulumi:"accountsWithRestoreAccesses"`
	// The username of the database within a snapshot.
	AdminUsername pulumix.Output[string] `pulumi:"adminUsername"`
	// The Amazon Resource Name (ARN) of the snapshot.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The unique identifier of the KMS key used to encrypt the snapshot.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// The Amazon Resource Name (ARN) of the namespace the snapshot was created from.
	NamespaceArn pulumix.Output[string] `pulumi:"namespaceArn"`
	// The namespace to create a snapshot for.
	NamespaceName pulumix.Output[string] `pulumi:"namespaceName"`
	// The owner Amazon Web Services; account of the snapshot.
	OwnerAccount pulumix.Output[string] `pulumi:"ownerAccount"`
	// How long to retain the created snapshot. Default value is `-1`.
	RetentionPeriod pulumix.Output[*int] `pulumi:"retentionPeriod"`
	// The name of the snapshot.
	SnapshotName pulumix.Output[string] `pulumi:"snapshotName"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.SnapshotName == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("aws:redshiftserverless/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("aws:redshiftserverless/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	// All of the Amazon Web Services accounts that have access to restore a snapshot to a provisioned cluster.
	AccountsWithProvisionedRestoreAccesses []string `pulumi:"accountsWithProvisionedRestoreAccesses"`
	// All of the Amazon Web Services accounts that have access to restore a snapshot to a namespace.
	AccountsWithRestoreAccesses []string `pulumi:"accountsWithRestoreAccesses"`
	// The username of the database within a snapshot.
	AdminUsername *string `pulumi:"adminUsername"`
	// The Amazon Resource Name (ARN) of the snapshot.
	Arn *string `pulumi:"arn"`
	// The unique identifier of the KMS key used to encrypt the snapshot.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The Amazon Resource Name (ARN) of the namespace the snapshot was created from.
	NamespaceArn *string `pulumi:"namespaceArn"`
	// The namespace to create a snapshot for.
	NamespaceName *string `pulumi:"namespaceName"`
	// The owner Amazon Web Services; account of the snapshot.
	OwnerAccount *string `pulumi:"ownerAccount"`
	// How long to retain the created snapshot. Default value is `-1`.
	RetentionPeriod *int `pulumi:"retentionPeriod"`
	// The name of the snapshot.
	SnapshotName *string `pulumi:"snapshotName"`
}

type SnapshotState struct {
	// All of the Amazon Web Services accounts that have access to restore a snapshot to a provisioned cluster.
	AccountsWithProvisionedRestoreAccesses pulumix.Input[[]string]
	// All of the Amazon Web Services accounts that have access to restore a snapshot to a namespace.
	AccountsWithRestoreAccesses pulumix.Input[[]string]
	// The username of the database within a snapshot.
	AdminUsername pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the snapshot.
	Arn pulumix.Input[*string]
	// The unique identifier of the KMS key used to encrypt the snapshot.
	KmsKeyId pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the namespace the snapshot was created from.
	NamespaceArn pulumix.Input[*string]
	// The namespace to create a snapshot for.
	NamespaceName pulumix.Input[*string]
	// The owner Amazon Web Services; account of the snapshot.
	OwnerAccount pulumix.Input[*string]
	// How long to retain the created snapshot. Default value is `-1`.
	RetentionPeriod pulumix.Input[*int]
	// The name of the snapshot.
	SnapshotName pulumix.Input[*string]
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// The namespace to create a snapshot for.
	NamespaceName string `pulumi:"namespaceName"`
	// How long to retain the created snapshot. Default value is `-1`.
	RetentionPeriod *int `pulumi:"retentionPeriod"`
	// The name of the snapshot.
	SnapshotName string `pulumi:"snapshotName"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// The namespace to create a snapshot for.
	NamespaceName pulumix.Input[string]
	// How long to retain the created snapshot. Default value is `-1`.
	RetentionPeriod pulumix.Input[*int]
	// The name of the snapshot.
	SnapshotName pulumix.Input[string]
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToOutput(ctx context.Context) pulumix.Output[Snapshot] {
	return pulumix.Output[Snapshot]{
		OutputState: o.OutputState,
	}
}

// All of the Amazon Web Services accounts that have access to restore a snapshot to a provisioned cluster.
func (o SnapshotOutput) AccountsWithProvisionedRestoreAccesses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.ArrayOutput[string] { return v.AccountsWithProvisionedRestoreAccesses })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// All of the Amazon Web Services accounts that have access to restore a snapshot to a namespace.
func (o SnapshotOutput) AccountsWithRestoreAccesses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.ArrayOutput[string] { return v.AccountsWithRestoreAccesses })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The username of the database within a snapshot.
func (o SnapshotOutput) AdminUsername() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.AdminUsername })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the snapshot.
func (o SnapshotOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The unique identifier of the KMS key used to encrypt the snapshot.
func (o SnapshotOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the namespace the snapshot was created from.
func (o SnapshotOutput) NamespaceArn() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.NamespaceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The namespace to create a snapshot for.
func (o SnapshotOutput) NamespaceName() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.NamespaceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The owner Amazon Web Services; account of the snapshot.
func (o SnapshotOutput) OwnerAccount() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.OwnerAccount })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// How long to retain the created snapshot. Default value is `-1`.
func (o SnapshotOutput) RetentionPeriod() pulumix.Output[*int] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[*int] { return v.RetentionPeriod })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The name of the snapshot.
func (o SnapshotOutput) SnapshotName() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.SnapshotName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SnapshotOutput{})
}
