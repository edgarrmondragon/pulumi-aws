// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic Container Registry Repository Policy.
//
// Note that currently only one policy may be applied to a repository.
type RepositoryPolicy struct {
	pulumi.CustomResourceState

	// The policy document. This is a JSON formatted string.
	Policy pulumix.Output[string] `pulumi:"policy"`
	// The registry ID where the repository was created.
	RegistryId pulumix.Output[string] `pulumi:"registryId"`
	// Name of the repository to apply the policy.
	Repository pulumix.Output[string] `pulumi:"repository"`
}

// NewRepositoryPolicy registers a new resource with the given unique name, arguments, and options.
func NewRepositoryPolicy(ctx *pulumi.Context,
	name string, args *RepositoryPolicyArgs, opts ...pulumi.ResourceOption) (*RepositoryPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryPolicy
	err := ctx.RegisterResource("aws:ecr/repositoryPolicy:RepositoryPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryPolicy gets an existing RepositoryPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryPolicyState, opts ...pulumi.ResourceOption) (*RepositoryPolicy, error) {
	var resource RepositoryPolicy
	err := ctx.ReadResource("aws:ecr/repositoryPolicy:RepositoryPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryPolicy resources.
type repositoryPolicyState struct {
	// The policy document. This is a JSON formatted string.
	Policy interface{} `pulumi:"policy"`
	// The registry ID where the repository was created.
	RegistryId *string `pulumi:"registryId"`
	// Name of the repository to apply the policy.
	Repository *string `pulumi:"repository"`
}

type RepositoryPolicyState struct {
	// The policy document. This is a JSON formatted string.
	Policy pulumix.Input[*any]
	// The registry ID where the repository was created.
	RegistryId pulumix.Input[*string]
	// Name of the repository to apply the policy.
	Repository pulumix.Input[*string]
}

func (RepositoryPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryPolicyState)(nil)).Elem()
}

type repositoryPolicyArgs struct {
	// The policy document. This is a JSON formatted string.
	Policy interface{} `pulumi:"policy"`
	// Name of the repository to apply the policy.
	Repository string `pulumi:"repository"`
}

// The set of arguments for constructing a RepositoryPolicy resource.
type RepositoryPolicyArgs struct {
	// The policy document. This is a JSON formatted string.
	Policy pulumix.Input[any]
	// Name of the repository to apply the policy.
	Repository pulumix.Input[string]
}

func (RepositoryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryPolicyArgs)(nil)).Elem()
}

type RepositoryPolicyOutput struct{ *pulumi.OutputState }

func (RepositoryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryPolicy)(nil)).Elem()
}

func (o RepositoryPolicyOutput) ToRepositoryPolicyOutput() RepositoryPolicyOutput {
	return o
}

func (o RepositoryPolicyOutput) ToRepositoryPolicyOutputWithContext(ctx context.Context) RepositoryPolicyOutput {
	return o
}

func (o RepositoryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryPolicy] {
	return pulumix.Output[RepositoryPolicy]{
		OutputState: o.OutputState,
	}
}

// The policy document. This is a JSON formatted string.
func (o RepositoryPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryPolicy](o, func(v RepositoryPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The registry ID where the repository was created.
func (o RepositoryPolicyOutput) RegistryId() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryPolicy](o, func(v RepositoryPolicy) pulumix.Output[string] { return v.RegistryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the repository to apply the policy.
func (o RepositoryPolicyOutput) Repository() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryPolicy](o, func(v RepositoryPolicy) pulumix.Output[string] { return v.Repository })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RepositoryPolicyOutput{})
}
