// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to retrieve information about a CloudFront cache policy.
func LookupCachePolicy(ctx *pulumi.Context, args *LookupCachePolicyArgs, opts ...pulumi.InvokeOption) (*LookupCachePolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCachePolicyResult
	err := ctx.Invoke("aws:cloudfront/getCachePolicy:getCachePolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCachePolicy.
type LookupCachePolicyArgs struct {
	// Identifier for the cache policy.
	Id *string `pulumi:"id"`
	// Unique name to identify the cache policy.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCachePolicy.
type LookupCachePolicyResult struct {
	// Comment to describe the cache policy.
	Comment string `pulumi:"comment"`
	// Default amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	DefaultTtl int `pulumi:"defaultTtl"`
	// Current version of the cache policy.
	Etag string  `pulumi:"etag"`
	Id   *string `pulumi:"id"`
	// Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	MaxTtl int `pulumi:"maxTtl"`
	// Minimum amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	MinTtl int     `pulumi:"minTtl"`
	Name   *string `pulumi:"name"`
	// The HTTP headers, cookies, and URL query strings to include in the cache key. See Parameters In Cache Key And Forwarded To Origin for more information.
	ParametersInCacheKeyAndForwardedToOrigins []GetCachePolicyParametersInCacheKeyAndForwardedToOrigin `pulumi:"parametersInCacheKeyAndForwardedToOrigins"`
}

func LookupCachePolicyOutput(ctx *pulumi.Context, args LookupCachePolicyOutputArgs, opts ...pulumi.InvokeOption) LookupCachePolicyResultOutput {
	outputResult := pulumix.ApplyErr[*LookupCachePolicyArgs](args.ToOutput(), func(plainArgs *LookupCachePolicyArgs) (*LookupCachePolicyResult, error) {
		return LookupCachePolicy(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupCachePolicyResultOutput, *LookupCachePolicyResult](outputResult)
}

// A collection of arguments for invoking getCachePolicy.
type LookupCachePolicyOutputArgs struct {
	// Identifier for the cache policy.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Unique name to identify the cache policy.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (args LookupCachePolicyOutputArgs) ToOutput() pulumix.Output[*LookupCachePolicyArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupCachePolicyArgs {
		return &LookupCachePolicyArgs{
			Id:   resolvedArgs[0].(*string),
			Name: resolvedArgs[1].(*string),
		}
	})
}

type LookupCachePolicyResultOutput struct{ *pulumi.OutputState }

func (LookupCachePolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCachePolicyResult)(nil)).Elem()
}

func (o LookupCachePolicyResultOutput) ToOutput(context.Context) pulumix.Output[*LookupCachePolicyResult] {
	return pulumix.Output[*LookupCachePolicyResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCachePolicyResultOutput) Comment() pulumix.Output[string] {
	return pulumix.Apply[*LookupCachePolicyResult](o, func(v *LookupCachePolicyResult) string { return v.Comment })
}

func (o LookupCachePolicyResultOutput) DefaultTtl() pulumix.Output[int] {
	return pulumix.Apply[*LookupCachePolicyResult](o, func(v *LookupCachePolicyResult) int { return v.DefaultTtl })
}

func (o LookupCachePolicyResultOutput) Etag() pulumix.Output[string] {
	return pulumix.Apply[*LookupCachePolicyResult](o, func(v *LookupCachePolicyResult) string { return v.Etag })
}

func (o LookupCachePolicyResultOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[*LookupCachePolicyResult](o, func(v *LookupCachePolicyResult) *string { return v.Id })
}

func (o LookupCachePolicyResultOutput) MaxTtl() pulumix.Output[int] {
	return pulumix.Apply[*LookupCachePolicyResult](o, func(v *LookupCachePolicyResult) int { return v.MaxTtl })
}

func (o LookupCachePolicyResultOutput) MinTtl() pulumix.Output[int] {
	return pulumix.Apply[*LookupCachePolicyResult](o, func(v *LookupCachePolicyResult) int { return v.MinTtl })
}

func (o LookupCachePolicyResultOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[*LookupCachePolicyResult](o, func(v *LookupCachePolicyResult) *string { return v.Name })
}

func (o LookupCachePolicyResultOutput) ParametersInCacheKeyAndForwardedToOrigins() pulumix.GArrayOutput[GetCachePolicyParametersInCacheKeyAndForwardedToOrigin, GetCachePolicyParametersInCacheKeyAndForwardedToOriginOutput] {
	value := pulumix.Apply[*LookupCachePolicyResult](o, func(v *LookupCachePolicyResult) []GetCachePolicyParametersInCacheKeyAndForwardedToOrigin {
		return v.ParametersInCacheKeyAndForwardedToOrigins
	})
	return pulumix.GArrayOutput[GetCachePolicyParametersInCacheKeyAndForwardedToOrigin, GetCachePolicyParametersInCacheKeyAndForwardedToOriginOutput]{
		OutputState: value.OutputState,
	}
}
