// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ClusterClusterEndpoint struct {
	// DNS hostname of the node.
	Address *string `pulumi:"address"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port *int `pulumi:"port"`
}

type ClusterClusterEndpointArgs struct {
	// DNS hostname of the node.
	Address pulumix.Input[*string] `pulumi:"address"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port pulumix.Input[*int] `pulumi:"port"`
}

func (ClusterClusterEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClusterEndpoint)(nil)).Elem()
}

func (i ClusterClusterEndpointArgs) ToClusterClusterEndpointOutput() ClusterClusterEndpointOutput {
	return i.ToClusterClusterEndpointOutputWithContext(context.Background())
}

func (i ClusterClusterEndpointArgs) ToClusterClusterEndpointOutputWithContext(ctx context.Context) ClusterClusterEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClusterEndpointOutput)
}

func (i *ClusterClusterEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterClusterEndpointArgs] {
	return pulumix.Val(i)
}

type ClusterClusterEndpointOutput struct{ *pulumi.OutputState }

func (ClusterClusterEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClusterEndpoint)(nil)).Elem()
}

func (o ClusterClusterEndpointOutput) ToClusterClusterEndpointOutput() ClusterClusterEndpointOutput {
	return o
}

func (o ClusterClusterEndpointOutput) ToClusterClusterEndpointOutputWithContext(ctx context.Context) ClusterClusterEndpointOutput {
	return o
}

func (o ClusterClusterEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterClusterEndpoint] {
	return pulumix.Output[ClusterClusterEndpoint]{
		OutputState: o.OutputState,
	}
}

// DNS hostname of the node.
func (o ClusterClusterEndpointOutput) Address() pulumix.Output[*string] {
	return pulumix.Apply[ClusterClusterEndpoint](o, func(v ClusterClusterEndpoint) *string { return v.Address })
}

// The port number on which each of the nodes accepts connections. Defaults to `6379`.
func (o ClusterClusterEndpointOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[ClusterClusterEndpoint](o, func(v ClusterClusterEndpoint) *int { return v.Port })
}

type ClusterShard struct {
	// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Set of nodes in this shard.
	Nodes []ClusterShardNode `pulumi:"nodes"`
	// Number of individual nodes in this shard.
	NumNodes *int `pulumi:"numNodes"`
	// Keyspace for this shard. Example: `0-16383`.
	Slots *string `pulumi:"slots"`
}

type ClusterShardArgs struct {
	// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Set of nodes in this shard.
	Nodes pulumix.Input[[]*ClusterShardNodeArgs] `pulumi:"nodes"`
	// Number of individual nodes in this shard.
	NumNodes pulumix.Input[*int] `pulumi:"numNodes"`
	// Keyspace for this shard. Example: `0-16383`.
	Slots pulumix.Input[*string] `pulumi:"slots"`
}

func (ClusterShardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShard)(nil)).Elem()
}

func (i ClusterShardArgs) ToClusterShardOutput() ClusterShardOutput {
	return i.ToClusterShardOutputWithContext(context.Background())
}

func (i ClusterShardArgs) ToClusterShardOutputWithContext(ctx context.Context) ClusterShardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterShardOutput)
}

func (i *ClusterShardArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterShardArgs] {
	return pulumix.Val(i)
}

type ClusterShardOutput struct{ *pulumi.OutputState }

func (ClusterShardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShard)(nil)).Elem()
}

func (o ClusterShardOutput) ToClusterShardOutput() ClusterShardOutput {
	return o
}

func (o ClusterShardOutput) ToClusterShardOutputWithContext(ctx context.Context) ClusterShardOutput {
	return o
}

func (o ClusterShardOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterShard] {
	return pulumix.Output[ClusterShard]{
		OutputState: o.OutputState,
	}
}

// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o ClusterShardOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ClusterShard](o, func(v ClusterShard) *string { return v.Name })
}

// Set of nodes in this shard.
func (o ClusterShardOutput) Nodes() pulumix.GArrayOutput[ClusterShardNode, ClusterShardNodeOutput] {
	value := pulumix.Apply[ClusterShard](o, func(v ClusterShard) []ClusterShardNode { return v.Nodes })
	return pulumix.GArrayOutput[ClusterShardNode, ClusterShardNodeOutput]{OutputState: value.OutputState}
}

// Number of individual nodes in this shard.
func (o ClusterShardOutput) NumNodes() pulumix.Output[*int] {
	return pulumix.Apply[ClusterShard](o, func(v ClusterShard) *int { return v.NumNodes })
}

// Keyspace for this shard. Example: `0-16383`.
func (o ClusterShardOutput) Slots() pulumix.Output[*string] {
	return pulumix.Apply[ClusterShard](o, func(v ClusterShard) *string { return v.Slots })
}

type ClusterShardNode struct {
	// The Availability Zone in which the node resides.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
	CreateTime *string                    `pulumi:"createTime"`
	Endpoints  []ClusterShardNodeEndpoint `pulumi:"endpoints"`
	// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
}

type ClusterShardNodeArgs struct {
	// The Availability Zone in which the node resides.
	AvailabilityZone pulumix.Input[*string] `pulumi:"availabilityZone"`
	// The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
	CreateTime pulumix.Input[*string]                         `pulumi:"createTime"`
	Endpoints  pulumix.Input[[]*ClusterShardNodeEndpointArgs] `pulumi:"endpoints"`
	// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (ClusterShardNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShardNode)(nil)).Elem()
}

func (i ClusterShardNodeArgs) ToClusterShardNodeOutput() ClusterShardNodeOutput {
	return i.ToClusterShardNodeOutputWithContext(context.Background())
}

func (i ClusterShardNodeArgs) ToClusterShardNodeOutputWithContext(ctx context.Context) ClusterShardNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterShardNodeOutput)
}

func (i *ClusterShardNodeArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterShardNodeArgs] {
	return pulumix.Val(i)
}

type ClusterShardNodeOutput struct{ *pulumi.OutputState }

func (ClusterShardNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShardNode)(nil)).Elem()
}

func (o ClusterShardNodeOutput) ToClusterShardNodeOutput() ClusterShardNodeOutput {
	return o
}

func (o ClusterShardNodeOutput) ToClusterShardNodeOutputWithContext(ctx context.Context) ClusterShardNodeOutput {
	return o
}

func (o ClusterShardNodeOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterShardNode] {
	return pulumix.Output[ClusterShardNode]{
		OutputState: o.OutputState,
	}
}

// The Availability Zone in which the node resides.
func (o ClusterShardNodeOutput) AvailabilityZone() pulumix.Output[*string] {
	return pulumix.Apply[ClusterShardNode](o, func(v ClusterShardNode) *string { return v.AvailabilityZone })
}

// The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
func (o ClusterShardNodeOutput) CreateTime() pulumix.Output[*string] {
	return pulumix.Apply[ClusterShardNode](o, func(v ClusterShardNode) *string { return v.CreateTime })
}

func (o ClusterShardNodeOutput) Endpoints() pulumix.GArrayOutput[ClusterShardNodeEndpoint, ClusterShardNodeEndpointOutput] {
	value := pulumix.Apply[ClusterShardNode](o, func(v ClusterShardNode) []ClusterShardNodeEndpoint { return v.Endpoints })
	return pulumix.GArrayOutput[ClusterShardNodeEndpoint, ClusterShardNodeEndpointOutput]{OutputState: value.OutputState}
}

// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o ClusterShardNodeOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ClusterShardNode](o, func(v ClusterShardNode) *string { return v.Name })
}

type ClusterShardNodeEndpoint struct {
	// DNS hostname of the node.
	Address *string `pulumi:"address"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port *int `pulumi:"port"`
}

type ClusterShardNodeEndpointArgs struct {
	// DNS hostname of the node.
	Address pulumix.Input[*string] `pulumi:"address"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port pulumix.Input[*int] `pulumi:"port"`
}

func (ClusterShardNodeEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShardNodeEndpoint)(nil)).Elem()
}

func (i ClusterShardNodeEndpointArgs) ToClusterShardNodeEndpointOutput() ClusterShardNodeEndpointOutput {
	return i.ToClusterShardNodeEndpointOutputWithContext(context.Background())
}

func (i ClusterShardNodeEndpointArgs) ToClusterShardNodeEndpointOutputWithContext(ctx context.Context) ClusterShardNodeEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterShardNodeEndpointOutput)
}

func (i *ClusterShardNodeEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterShardNodeEndpointArgs] {
	return pulumix.Val(i)
}

type ClusterShardNodeEndpointOutput struct{ *pulumi.OutputState }

func (ClusterShardNodeEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShardNodeEndpoint)(nil)).Elem()
}

func (o ClusterShardNodeEndpointOutput) ToClusterShardNodeEndpointOutput() ClusterShardNodeEndpointOutput {
	return o
}

func (o ClusterShardNodeEndpointOutput) ToClusterShardNodeEndpointOutputWithContext(ctx context.Context) ClusterShardNodeEndpointOutput {
	return o
}

func (o ClusterShardNodeEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterShardNodeEndpoint] {
	return pulumix.Output[ClusterShardNodeEndpoint]{
		OutputState: o.OutputState,
	}
}

// DNS hostname of the node.
func (o ClusterShardNodeEndpointOutput) Address() pulumix.Output[*string] {
	return pulumix.Apply[ClusterShardNodeEndpoint](o, func(v ClusterShardNodeEndpoint) *string { return v.Address })
}

// The port number on which each of the nodes accepts connections. Defaults to `6379`.
func (o ClusterShardNodeEndpointOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[ClusterShardNodeEndpoint](o, func(v ClusterShardNodeEndpoint) *int { return v.Port })
}

type ParameterGroupParameter struct {
	// The name of the parameter.
	Name string `pulumi:"name"`
	// The value of the parameter.
	Value string `pulumi:"value"`
}

type ParameterGroupParameterArgs struct {
	// The name of the parameter.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return i.ToParameterGroupParameterOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterOutput)
}

func (i *ParameterGroupParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ParameterGroupParameterArgs] {
	return pulumix.Val(i)
}

type ParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ParameterGroupParameter] {
	return pulumix.Output[ParameterGroupParameter]{
		OutputState: o.OutputState,
	}
}

// The name of the parameter.
func (o ParameterGroupParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) string { return v.Name })
}

// The value of the parameter.
func (o ParameterGroupParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) string { return v.Value })
}

type SnapshotClusterConfiguration struct {
	// Description for the cluster.
	Description *string `pulumi:"description"`
	// Version number of the Redis engine used by the cluster.
	EngineVersion *string `pulumi:"engineVersion"`
	// The weekly time range during which maintenance on the cluster is performed.
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Compute and memory capacity of the nodes in the cluster.
	NodeType *string `pulumi:"nodeType"`
	// Number of shards in the cluster.
	NumShards *int `pulumi:"numShards"`
	// Name of the parameter group associated with the cluster.
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// Port number on which the cluster accepts connections.
	Port *int `pulumi:"port"`
	// Number of days for which MemoryDB retains automatic snapshots before deleting them.
	SnapshotRetentionLimit *int `pulumi:"snapshotRetentionLimit"`
	// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
	SnapshotWindow *string `pulumi:"snapshotWindow"`
	// Name of the subnet group used by the cluster.
	SubnetGroupName *string `pulumi:"subnetGroupName"`
	// ARN of the SNS topic to which cluster notifications are sent.
	TopicArn *string `pulumi:"topicArn"`
	// The VPC in which the cluster exists.
	VpcId *string `pulumi:"vpcId"`
}

type SnapshotClusterConfigurationArgs struct {
	// Description for the cluster.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Version number of the Redis engine used by the cluster.
	EngineVersion pulumix.Input[*string] `pulumi:"engineVersion"`
	// The weekly time range during which maintenance on the cluster is performed.
	MaintenanceWindow pulumix.Input[*string] `pulumi:"maintenanceWindow"`
	// Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Compute and memory capacity of the nodes in the cluster.
	NodeType pulumix.Input[*string] `pulumi:"nodeType"`
	// Number of shards in the cluster.
	NumShards pulumix.Input[*int] `pulumi:"numShards"`
	// Name of the parameter group associated with the cluster.
	ParameterGroupName pulumix.Input[*string] `pulumi:"parameterGroupName"`
	// Port number on which the cluster accepts connections.
	Port pulumix.Input[*int] `pulumi:"port"`
	// Number of days for which MemoryDB retains automatic snapshots before deleting them.
	SnapshotRetentionLimit pulumix.Input[*int] `pulumi:"snapshotRetentionLimit"`
	// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
	SnapshotWindow pulumix.Input[*string] `pulumi:"snapshotWindow"`
	// Name of the subnet group used by the cluster.
	SubnetGroupName pulumix.Input[*string] `pulumi:"subnetGroupName"`
	// ARN of the SNS topic to which cluster notifications are sent.
	TopicArn pulumix.Input[*string] `pulumi:"topicArn"`
	// The VPC in which the cluster exists.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (SnapshotClusterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotClusterConfiguration)(nil)).Elem()
}

func (i SnapshotClusterConfigurationArgs) ToSnapshotClusterConfigurationOutput() SnapshotClusterConfigurationOutput {
	return i.ToSnapshotClusterConfigurationOutputWithContext(context.Background())
}

func (i SnapshotClusterConfigurationArgs) ToSnapshotClusterConfigurationOutputWithContext(ctx context.Context) SnapshotClusterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotClusterConfigurationOutput)
}

func (i *SnapshotClusterConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*SnapshotClusterConfigurationArgs] {
	return pulumix.Val(i)
}

type SnapshotClusterConfigurationOutput struct{ *pulumi.OutputState }

func (SnapshotClusterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotClusterConfiguration)(nil)).Elem()
}

func (o SnapshotClusterConfigurationOutput) ToSnapshotClusterConfigurationOutput() SnapshotClusterConfigurationOutput {
	return o
}

func (o SnapshotClusterConfigurationOutput) ToSnapshotClusterConfigurationOutputWithContext(ctx context.Context) SnapshotClusterConfigurationOutput {
	return o
}

func (o SnapshotClusterConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[SnapshotClusterConfiguration] {
	return pulumix.Output[SnapshotClusterConfiguration]{
		OutputState: o.OutputState,
	}
}

// Description for the cluster.
func (o SnapshotClusterConfigurationOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *string { return v.Description })
}

// Version number of the Redis engine used by the cluster.
func (o SnapshotClusterConfigurationOutput) EngineVersion() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *string { return v.EngineVersion })
}

// The weekly time range during which maintenance on the cluster is performed.
func (o SnapshotClusterConfigurationOutput) MaintenanceWindow() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *string { return v.MaintenanceWindow })
}

// Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o SnapshotClusterConfigurationOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *string { return v.Name })
}

// Compute and memory capacity of the nodes in the cluster.
func (o SnapshotClusterConfigurationOutput) NodeType() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *string { return v.NodeType })
}

// Number of shards in the cluster.
func (o SnapshotClusterConfigurationOutput) NumShards() pulumix.Output[*int] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *int { return v.NumShards })
}

// Name of the parameter group associated with the cluster.
func (o SnapshotClusterConfigurationOutput) ParameterGroupName() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *string { return v.ParameterGroupName })
}

// Port number on which the cluster accepts connections.
func (o SnapshotClusterConfigurationOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *int { return v.Port })
}

// Number of days for which MemoryDB retains automatic snapshots before deleting them.
func (o SnapshotClusterConfigurationOutput) SnapshotRetentionLimit() pulumix.Output[*int] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *int { return v.SnapshotRetentionLimit })
}

// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
func (o SnapshotClusterConfigurationOutput) SnapshotWindow() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *string { return v.SnapshotWindow })
}

// Name of the subnet group used by the cluster.
func (o SnapshotClusterConfigurationOutput) SubnetGroupName() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *string { return v.SubnetGroupName })
}

// ARN of the SNS topic to which cluster notifications are sent.
func (o SnapshotClusterConfigurationOutput) TopicArn() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *string { return v.TopicArn })
}

// The VPC in which the cluster exists.
func (o SnapshotClusterConfigurationOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[SnapshotClusterConfiguration](o, func(v SnapshotClusterConfiguration) *string { return v.VpcId })
}

type UserAuthenticationMode struct {
	// The number of passwords belonging to the user.
	PasswordCount *int `pulumi:"passwordCount"`
	// The set of passwords used for authentication. You can create up to two passwords for each user.
	Passwords []string `pulumi:"passwords"`
	// Indicates whether the user requires a password to authenticate. Must be set to `password`.
	Type string `pulumi:"type"`
}

type UserAuthenticationModeArgs struct {
	// The number of passwords belonging to the user.
	PasswordCount pulumix.Input[*int] `pulumi:"passwordCount"`
	// The set of passwords used for authentication. You can create up to two passwords for each user.
	Passwords pulumix.Input[[]string] `pulumi:"passwords"`
	// Indicates whether the user requires a password to authenticate. Must be set to `password`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (UserAuthenticationModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthenticationMode)(nil)).Elem()
}

func (i UserAuthenticationModeArgs) ToUserAuthenticationModeOutput() UserAuthenticationModeOutput {
	return i.ToUserAuthenticationModeOutputWithContext(context.Background())
}

func (i UserAuthenticationModeArgs) ToUserAuthenticationModeOutputWithContext(ctx context.Context) UserAuthenticationModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationModeOutput)
}

func (i *UserAuthenticationModeArgs) ToOutput(ctx context.Context) pulumix.Output[*UserAuthenticationModeArgs] {
	return pulumix.Val(i)
}

type UserAuthenticationModeOutput struct{ *pulumi.OutputState }

func (UserAuthenticationModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthenticationMode)(nil)).Elem()
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModeOutput() UserAuthenticationModeOutput {
	return o
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModeOutputWithContext(ctx context.Context) UserAuthenticationModeOutput {
	return o
}

func (o UserAuthenticationModeOutput) ToOutput(ctx context.Context) pulumix.Output[UserAuthenticationMode] {
	return pulumix.Output[UserAuthenticationMode]{
		OutputState: o.OutputState,
	}
}

// The number of passwords belonging to the user.
func (o UserAuthenticationModeOutput) PasswordCount() pulumix.Output[*int] {
	return pulumix.Apply[UserAuthenticationMode](o, func(v UserAuthenticationMode) *int { return v.PasswordCount })
}

// The set of passwords used for authentication. You can create up to two passwords for each user.
func (o UserAuthenticationModeOutput) Passwords() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[UserAuthenticationMode](o, func(v UserAuthenticationMode) []string { return v.Passwords })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Indicates whether the user requires a password to authenticate. Must be set to `password`.
func (o UserAuthenticationModeOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[UserAuthenticationMode](o, func(v UserAuthenticationMode) string { return v.Type })
}

type GetClusterClusterEndpoint struct {
	// DNS hostname of the node.
	Address string `pulumi:"address"`
	// Port number that this node is listening on.
	Port int `pulumi:"port"`
}

type GetClusterClusterEndpointArgs struct {
	// DNS hostname of the node.
	Address pulumix.Input[string] `pulumi:"address"`
	// Port number that this node is listening on.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (GetClusterClusterEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterClusterEndpoint)(nil)).Elem()
}

func (i GetClusterClusterEndpointArgs) ToGetClusterClusterEndpointOutput() GetClusterClusterEndpointOutput {
	return i.ToGetClusterClusterEndpointOutputWithContext(context.Background())
}

func (i GetClusterClusterEndpointArgs) ToGetClusterClusterEndpointOutputWithContext(ctx context.Context) GetClusterClusterEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterClusterEndpointOutput)
}

func (i *GetClusterClusterEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterClusterEndpointArgs] {
	return pulumix.Val(i)
}

type GetClusterClusterEndpointOutput struct{ *pulumi.OutputState }

func (GetClusterClusterEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterClusterEndpoint)(nil)).Elem()
}

func (o GetClusterClusterEndpointOutput) ToGetClusterClusterEndpointOutput() GetClusterClusterEndpointOutput {
	return o
}

func (o GetClusterClusterEndpointOutput) ToGetClusterClusterEndpointOutputWithContext(ctx context.Context) GetClusterClusterEndpointOutput {
	return o
}

func (o GetClusterClusterEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterClusterEndpoint] {
	return pulumix.Output[GetClusterClusterEndpoint]{
		OutputState: o.OutputState,
	}
}

// DNS hostname of the node.
func (o GetClusterClusterEndpointOutput) Address() pulumix.Output[string] {
	return pulumix.Apply[GetClusterClusterEndpoint](o, func(v GetClusterClusterEndpoint) string { return v.Address })
}

// Port number that this node is listening on.
func (o GetClusterClusterEndpointOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetClusterClusterEndpoint](o, func(v GetClusterClusterEndpoint) int { return v.Port })
}

type GetClusterShard struct {
	// Name of the cluster.
	Name string `pulumi:"name"`
	// Set of nodes in this shard.
	Nodes []GetClusterShardNode `pulumi:"nodes"`
	// Number of individual nodes in this shard.
	NumNodes int `pulumi:"numNodes"`
	// Keyspace for this shard. Example: `0-16383`.
	Slots string `pulumi:"slots"`
}

type GetClusterShardArgs struct {
	// Name of the cluster.
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of nodes in this shard.
	Nodes pulumix.Input[[]*GetClusterShardNodeArgs] `pulumi:"nodes"`
	// Number of individual nodes in this shard.
	NumNodes pulumix.Input[int] `pulumi:"numNodes"`
	// Keyspace for this shard. Example: `0-16383`.
	Slots pulumix.Input[string] `pulumi:"slots"`
}

func (GetClusterShardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterShard)(nil)).Elem()
}

func (i GetClusterShardArgs) ToGetClusterShardOutput() GetClusterShardOutput {
	return i.ToGetClusterShardOutputWithContext(context.Background())
}

func (i GetClusterShardArgs) ToGetClusterShardOutputWithContext(ctx context.Context) GetClusterShardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterShardOutput)
}

func (i *GetClusterShardArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterShardArgs] {
	return pulumix.Val(i)
}

type GetClusterShardOutput struct{ *pulumi.OutputState }

func (GetClusterShardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterShard)(nil)).Elem()
}

func (o GetClusterShardOutput) ToGetClusterShardOutput() GetClusterShardOutput {
	return o
}

func (o GetClusterShardOutput) ToGetClusterShardOutputWithContext(ctx context.Context) GetClusterShardOutput {
	return o
}

func (o GetClusterShardOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterShard] {
	return pulumix.Output[GetClusterShard]{
		OutputState: o.OutputState,
	}
}

// Name of the cluster.
func (o GetClusterShardOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetClusterShard](o, func(v GetClusterShard) string { return v.Name })
}

// Set of nodes in this shard.
func (o GetClusterShardOutput) Nodes() pulumix.GArrayOutput[GetClusterShardNode, GetClusterShardNodeOutput] {
	value := pulumix.Apply[GetClusterShard](o, func(v GetClusterShard) []GetClusterShardNode { return v.Nodes })
	return pulumix.GArrayOutput[GetClusterShardNode, GetClusterShardNodeOutput]{OutputState: value.OutputState}
}

// Number of individual nodes in this shard.
func (o GetClusterShardOutput) NumNodes() pulumix.Output[int] {
	return pulumix.Apply[GetClusterShard](o, func(v GetClusterShard) int { return v.NumNodes })
}

// Keyspace for this shard. Example: `0-16383`.
func (o GetClusterShardOutput) Slots() pulumix.Output[string] {
	return pulumix.Apply[GetClusterShard](o, func(v GetClusterShard) string { return v.Slots })
}

type GetClusterShardNode struct {
	// The Availability Zone in which the node resides.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
	CreateTime string                        `pulumi:"createTime"`
	Endpoints  []GetClusterShardNodeEndpoint `pulumi:"endpoints"`
	// Name of the cluster.
	Name string `pulumi:"name"`
}

type GetClusterShardNodeArgs struct {
	// The Availability Zone in which the node resides.
	AvailabilityZone pulumix.Input[string] `pulumi:"availabilityZone"`
	// The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
	CreateTime pulumix.Input[string]                             `pulumi:"createTime"`
	Endpoints  pulumix.Input[[]*GetClusterShardNodeEndpointArgs] `pulumi:"endpoints"`
	// Name of the cluster.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetClusterShardNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterShardNode)(nil)).Elem()
}

func (i GetClusterShardNodeArgs) ToGetClusterShardNodeOutput() GetClusterShardNodeOutput {
	return i.ToGetClusterShardNodeOutputWithContext(context.Background())
}

func (i GetClusterShardNodeArgs) ToGetClusterShardNodeOutputWithContext(ctx context.Context) GetClusterShardNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterShardNodeOutput)
}

func (i *GetClusterShardNodeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterShardNodeArgs] {
	return pulumix.Val(i)
}

type GetClusterShardNodeOutput struct{ *pulumi.OutputState }

func (GetClusterShardNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterShardNode)(nil)).Elem()
}

func (o GetClusterShardNodeOutput) ToGetClusterShardNodeOutput() GetClusterShardNodeOutput {
	return o
}

func (o GetClusterShardNodeOutput) ToGetClusterShardNodeOutputWithContext(ctx context.Context) GetClusterShardNodeOutput {
	return o
}

func (o GetClusterShardNodeOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterShardNode] {
	return pulumix.Output[GetClusterShardNode]{
		OutputState: o.OutputState,
	}
}

// The Availability Zone in which the node resides.
func (o GetClusterShardNodeOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[GetClusterShardNode](o, func(v GetClusterShardNode) string { return v.AvailabilityZone })
}

// The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
func (o GetClusterShardNodeOutput) CreateTime() pulumix.Output[string] {
	return pulumix.Apply[GetClusterShardNode](o, func(v GetClusterShardNode) string { return v.CreateTime })
}

func (o GetClusterShardNodeOutput) Endpoints() pulumix.GArrayOutput[GetClusterShardNodeEndpoint, GetClusterShardNodeEndpointOutput] {
	value := pulumix.Apply[GetClusterShardNode](o, func(v GetClusterShardNode) []GetClusterShardNodeEndpoint { return v.Endpoints })
	return pulumix.GArrayOutput[GetClusterShardNodeEndpoint, GetClusterShardNodeEndpointOutput]{OutputState: value.OutputState}
}

// Name of the cluster.
func (o GetClusterShardNodeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetClusterShardNode](o, func(v GetClusterShardNode) string { return v.Name })
}

type GetClusterShardNodeEndpoint struct {
	// DNS hostname of the node.
	Address string `pulumi:"address"`
	// Port number that this node is listening on.
	Port int `pulumi:"port"`
}

type GetClusterShardNodeEndpointArgs struct {
	// DNS hostname of the node.
	Address pulumix.Input[string] `pulumi:"address"`
	// Port number that this node is listening on.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (GetClusterShardNodeEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterShardNodeEndpoint)(nil)).Elem()
}

func (i GetClusterShardNodeEndpointArgs) ToGetClusterShardNodeEndpointOutput() GetClusterShardNodeEndpointOutput {
	return i.ToGetClusterShardNodeEndpointOutputWithContext(context.Background())
}

func (i GetClusterShardNodeEndpointArgs) ToGetClusterShardNodeEndpointOutputWithContext(ctx context.Context) GetClusterShardNodeEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterShardNodeEndpointOutput)
}

func (i *GetClusterShardNodeEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterShardNodeEndpointArgs] {
	return pulumix.Val(i)
}

type GetClusterShardNodeEndpointOutput struct{ *pulumi.OutputState }

func (GetClusterShardNodeEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterShardNodeEndpoint)(nil)).Elem()
}

func (o GetClusterShardNodeEndpointOutput) ToGetClusterShardNodeEndpointOutput() GetClusterShardNodeEndpointOutput {
	return o
}

func (o GetClusterShardNodeEndpointOutput) ToGetClusterShardNodeEndpointOutputWithContext(ctx context.Context) GetClusterShardNodeEndpointOutput {
	return o
}

func (o GetClusterShardNodeEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterShardNodeEndpoint] {
	return pulumix.Output[GetClusterShardNodeEndpoint]{
		OutputState: o.OutputState,
	}
}

// DNS hostname of the node.
func (o GetClusterShardNodeEndpointOutput) Address() pulumix.Output[string] {
	return pulumix.Apply[GetClusterShardNodeEndpoint](o, func(v GetClusterShardNodeEndpoint) string { return v.Address })
}

// Port number that this node is listening on.
func (o GetClusterShardNodeEndpointOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetClusterShardNodeEndpoint](o, func(v GetClusterShardNodeEndpoint) int { return v.Port })
}

type GetParameterGroupParameter struct {
	// Name of the parameter group.
	Name string `pulumi:"name"`
	// Value of the parameter.
	Value string `pulumi:"value"`
}

type GetParameterGroupParameterArgs struct {
	// Name of the parameter group.
	Name pulumix.Input[string] `pulumi:"name"`
	// Value of the parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParameterGroupParameter)(nil)).Elem()
}

func (i GetParameterGroupParameterArgs) ToGetParameterGroupParameterOutput() GetParameterGroupParameterOutput {
	return i.ToGetParameterGroupParameterOutputWithContext(context.Background())
}

func (i GetParameterGroupParameterArgs) ToGetParameterGroupParameterOutputWithContext(ctx context.Context) GetParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetParameterGroupParameterOutput)
}

func (i *GetParameterGroupParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetParameterGroupParameterArgs] {
	return pulumix.Val(i)
}

type GetParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (GetParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParameterGroupParameter)(nil)).Elem()
}

func (o GetParameterGroupParameterOutput) ToGetParameterGroupParameterOutput() GetParameterGroupParameterOutput {
	return o
}

func (o GetParameterGroupParameterOutput) ToGetParameterGroupParameterOutputWithContext(ctx context.Context) GetParameterGroupParameterOutput {
	return o
}

func (o GetParameterGroupParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetParameterGroupParameter] {
	return pulumix.Output[GetParameterGroupParameter]{
		OutputState: o.OutputState,
	}
}

// Name of the parameter group.
func (o GetParameterGroupParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetParameterGroupParameter](o, func(v GetParameterGroupParameter) string { return v.Name })
}

// Value of the parameter.
func (o GetParameterGroupParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetParameterGroupParameter](o, func(v GetParameterGroupParameter) string { return v.Value })
}

type GetSnapshotClusterConfiguration struct {
	// Description for the cluster.
	Description string `pulumi:"description"`
	// Version number of the Redis engine used by the cluster.
	EngineVersion string `pulumi:"engineVersion"`
	// The weekly time range during which maintenance on the cluster is performed.
	MaintenanceWindow string `pulumi:"maintenanceWindow"`
	// Name of the snapshot.
	Name string `pulumi:"name"`
	// Compute and memory capacity of the nodes in the cluster.
	NodeType string `pulumi:"nodeType"`
	// Number of shards in the cluster.
	NumShards int `pulumi:"numShards"`
	// Name of the parameter group associated with the cluster.
	ParameterGroupName string `pulumi:"parameterGroupName"`
	// Port number on which the cluster accepts connections.
	Port int `pulumi:"port"`
	// Number of days for which MemoryDB retains automatic snapshots before deleting them.
	SnapshotRetentionLimit int `pulumi:"snapshotRetentionLimit"`
	// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
	SnapshotWindow string `pulumi:"snapshotWindow"`
	// Name of the subnet group used by the cluster.
	SubnetGroupName string `pulumi:"subnetGroupName"`
	// ARN of the SNS topic to which cluster notifications are sent.
	TopicArn string `pulumi:"topicArn"`
	// The VPC in which the cluster exists.
	VpcId string `pulumi:"vpcId"`
}

type GetSnapshotClusterConfigurationArgs struct {
	// Description for the cluster.
	Description pulumix.Input[string] `pulumi:"description"`
	// Version number of the Redis engine used by the cluster.
	EngineVersion pulumix.Input[string] `pulumi:"engineVersion"`
	// The weekly time range during which maintenance on the cluster is performed.
	MaintenanceWindow pulumix.Input[string] `pulumi:"maintenanceWindow"`
	// Name of the snapshot.
	Name pulumix.Input[string] `pulumi:"name"`
	// Compute and memory capacity of the nodes in the cluster.
	NodeType pulumix.Input[string] `pulumi:"nodeType"`
	// Number of shards in the cluster.
	NumShards pulumix.Input[int] `pulumi:"numShards"`
	// Name of the parameter group associated with the cluster.
	ParameterGroupName pulumix.Input[string] `pulumi:"parameterGroupName"`
	// Port number on which the cluster accepts connections.
	Port pulumix.Input[int] `pulumi:"port"`
	// Number of days for which MemoryDB retains automatic snapshots before deleting them.
	SnapshotRetentionLimit pulumix.Input[int] `pulumi:"snapshotRetentionLimit"`
	// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
	SnapshotWindow pulumix.Input[string] `pulumi:"snapshotWindow"`
	// Name of the subnet group used by the cluster.
	SubnetGroupName pulumix.Input[string] `pulumi:"subnetGroupName"`
	// ARN of the SNS topic to which cluster notifications are sent.
	TopicArn pulumix.Input[string] `pulumi:"topicArn"`
	// The VPC in which the cluster exists.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (GetSnapshotClusterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotClusterConfiguration)(nil)).Elem()
}

func (i GetSnapshotClusterConfigurationArgs) ToGetSnapshotClusterConfigurationOutput() GetSnapshotClusterConfigurationOutput {
	return i.ToGetSnapshotClusterConfigurationOutputWithContext(context.Background())
}

func (i GetSnapshotClusterConfigurationArgs) ToGetSnapshotClusterConfigurationOutputWithContext(ctx context.Context) GetSnapshotClusterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotClusterConfigurationOutput)
}

func (i *GetSnapshotClusterConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSnapshotClusterConfigurationArgs] {
	return pulumix.Val(i)
}

type GetSnapshotClusterConfigurationOutput struct{ *pulumi.OutputState }

func (GetSnapshotClusterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotClusterConfiguration)(nil)).Elem()
}

func (o GetSnapshotClusterConfigurationOutput) ToGetSnapshotClusterConfigurationOutput() GetSnapshotClusterConfigurationOutput {
	return o
}

func (o GetSnapshotClusterConfigurationOutput) ToGetSnapshotClusterConfigurationOutputWithContext(ctx context.Context) GetSnapshotClusterConfigurationOutput {
	return o
}

func (o GetSnapshotClusterConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetSnapshotClusterConfiguration] {
	return pulumix.Output[GetSnapshotClusterConfiguration]{
		OutputState: o.OutputState,
	}
}

// Description for the cluster.
func (o GetSnapshotClusterConfigurationOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) string { return v.Description })
}

// Version number of the Redis engine used by the cluster.
func (o GetSnapshotClusterConfigurationOutput) EngineVersion() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) string { return v.EngineVersion })
}

// The weekly time range during which maintenance on the cluster is performed.
func (o GetSnapshotClusterConfigurationOutput) MaintenanceWindow() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) string { return v.MaintenanceWindow })
}

// Name of the snapshot.
func (o GetSnapshotClusterConfigurationOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) string { return v.Name })
}

// Compute and memory capacity of the nodes in the cluster.
func (o GetSnapshotClusterConfigurationOutput) NodeType() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) string { return v.NodeType })
}

// Number of shards in the cluster.
func (o GetSnapshotClusterConfigurationOutput) NumShards() pulumix.Output[int] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) int { return v.NumShards })
}

// Name of the parameter group associated with the cluster.
func (o GetSnapshotClusterConfigurationOutput) ParameterGroupName() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) string { return v.ParameterGroupName })
}

// Port number on which the cluster accepts connections.
func (o GetSnapshotClusterConfigurationOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) int { return v.Port })
}

// Number of days for which MemoryDB retains automatic snapshots before deleting them.
func (o GetSnapshotClusterConfigurationOutput) SnapshotRetentionLimit() pulumix.Output[int] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) int { return v.SnapshotRetentionLimit })
}

// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
func (o GetSnapshotClusterConfigurationOutput) SnapshotWindow() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) string { return v.SnapshotWindow })
}

// Name of the subnet group used by the cluster.
func (o GetSnapshotClusterConfigurationOutput) SubnetGroupName() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) string { return v.SubnetGroupName })
}

// ARN of the SNS topic to which cluster notifications are sent.
func (o GetSnapshotClusterConfigurationOutput) TopicArn() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) string { return v.TopicArn })
}

// The VPC in which the cluster exists.
func (o GetSnapshotClusterConfigurationOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[GetSnapshotClusterConfiguration](o, func(v GetSnapshotClusterConfiguration) string { return v.VpcId })
}

type GetUserAuthenticationMode struct {
	// The number of passwords belonging to the user.
	PasswordCount int `pulumi:"passwordCount"`
	// Whether the user requires a password to authenticate.
	Type string `pulumi:"type"`
}

type GetUserAuthenticationModeArgs struct {
	// The number of passwords belonging to the user.
	PasswordCount pulumix.Input[int] `pulumi:"passwordCount"`
	// Whether the user requires a password to authenticate.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetUserAuthenticationModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserAuthenticationMode)(nil)).Elem()
}

func (i GetUserAuthenticationModeArgs) ToGetUserAuthenticationModeOutput() GetUserAuthenticationModeOutput {
	return i.ToGetUserAuthenticationModeOutputWithContext(context.Background())
}

func (i GetUserAuthenticationModeArgs) ToGetUserAuthenticationModeOutputWithContext(ctx context.Context) GetUserAuthenticationModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserAuthenticationModeOutput)
}

func (i *GetUserAuthenticationModeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserAuthenticationModeArgs] {
	return pulumix.Val(i)
}

type GetUserAuthenticationModeOutput struct{ *pulumi.OutputState }

func (GetUserAuthenticationModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserAuthenticationMode)(nil)).Elem()
}

func (o GetUserAuthenticationModeOutput) ToGetUserAuthenticationModeOutput() GetUserAuthenticationModeOutput {
	return o
}

func (o GetUserAuthenticationModeOutput) ToGetUserAuthenticationModeOutputWithContext(ctx context.Context) GetUserAuthenticationModeOutput {
	return o
}

func (o GetUserAuthenticationModeOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserAuthenticationMode] {
	return pulumix.Output[GetUserAuthenticationMode]{
		OutputState: o.OutputState,
	}
}

// The number of passwords belonging to the user.
func (o GetUserAuthenticationModeOutput) PasswordCount() pulumix.Output[int] {
	return pulumix.Apply[GetUserAuthenticationMode](o, func(v GetUserAuthenticationMode) int { return v.PasswordCount })
}

// Whether the user requires a password to authenticate.
func (o GetUserAuthenticationModeOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetUserAuthenticationMode](o, func(v GetUserAuthenticationMode) string { return v.Type })
}

func init() {
	pulumi.RegisterOutputType(ClusterClusterEndpointOutput{})
	pulumi.RegisterOutputType(ClusterShardOutput{})
	pulumi.RegisterOutputType(ClusterShardNodeOutput{})
	pulumi.RegisterOutputType(ClusterShardNodeEndpointOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(SnapshotClusterConfigurationOutput{})
	pulumi.RegisterOutputType(UserAuthenticationModeOutput{})
	pulumi.RegisterOutputType(GetClusterClusterEndpointOutput{})
	pulumi.RegisterOutputType(GetClusterShardOutput{})
	pulumi.RegisterOutputType(GetClusterShardNodeOutput{})
	pulumi.RegisterOutputType(GetClusterShardNodeEndpointOutput{})
	pulumi.RegisterOutputType(GetParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(GetSnapshotClusterConfigurationOutput{})
	pulumi.RegisterOutputType(GetUserAuthenticationModeOutput{})
}
