// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Composite Alarm resource.
//
// > **NOTE:** An alarm (composite or metric) cannot be destroyed when there are other composite alarms depending on it. This can lead to a cyclical dependency on update, as the provider will unsuccessfully attempt to destroy alarms before updating the rule. Consider using `dependsOn`, references to alarm names, and two-stage updates.
type CompositeAlarm struct {
	pulumi.CustomResourceState

	// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
	ActionsEnabled pulumix.Output[*bool] `pulumi:"actionsEnabled"`
	// Actions will be suppressed if the suppressor alarm is in the ALARM state.
	ActionsSuppressor pulumix.GPtrOutput[CompositeAlarmActionsSuppressor, CompositeAlarmActionsSuppressorOutput] `pulumi:"actionsSuppressor"`
	// The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	AlarmActions pulumix.ArrayOutput[string] `pulumi:"alarmActions"`
	// The description for the composite alarm.
	AlarmDescription pulumix.Output[*string] `pulumi:"alarmDescription"`
	// The name for the composite alarm. This name must be unique within the region.
	AlarmName pulumix.Output[string] `pulumi:"alarmName"`
	// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
	AlarmRule pulumix.Output[string] `pulumi:"alarmRule"`
	// The ARN of the composite alarm.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	InsufficientDataActions pulumix.ArrayOutput[string] `pulumi:"insufficientDataActions"`
	// The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	OkActions pulumix.ArrayOutput[string] `pulumi:"okActions"`
	// A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewCompositeAlarm registers a new resource with the given unique name, arguments, and options.
func NewCompositeAlarm(ctx *pulumi.Context,
	name string, args *CompositeAlarmArgs, opts ...pulumi.ResourceOption) (*CompositeAlarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlarmName == nil {
		return nil, errors.New("invalid value for required argument 'AlarmName'")
	}
	if args.AlarmRule == nil {
		return nil, errors.New("invalid value for required argument 'AlarmRule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CompositeAlarm
	err := ctx.RegisterResource("aws:cloudwatch/compositeAlarm:CompositeAlarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCompositeAlarm gets an existing CompositeAlarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCompositeAlarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CompositeAlarmState, opts ...pulumi.ResourceOption) (*CompositeAlarm, error) {
	var resource CompositeAlarm
	err := ctx.ReadResource("aws:cloudwatch/compositeAlarm:CompositeAlarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CompositeAlarm resources.
type compositeAlarmState struct {
	// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
	ActionsEnabled *bool `pulumi:"actionsEnabled"`
	// Actions will be suppressed if the suppressor alarm is in the ALARM state.
	ActionsSuppressor *CompositeAlarmActionsSuppressor `pulumi:"actionsSuppressor"`
	// The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	AlarmActions []string `pulumi:"alarmActions"`
	// The description for the composite alarm.
	AlarmDescription *string `pulumi:"alarmDescription"`
	// The name for the composite alarm. This name must be unique within the region.
	AlarmName *string `pulumi:"alarmName"`
	// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
	AlarmRule *string `pulumi:"alarmRule"`
	// The ARN of the composite alarm.
	Arn *string `pulumi:"arn"`
	// The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	InsufficientDataActions []string `pulumi:"insufficientDataActions"`
	// The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	OkActions []string `pulumi:"okActions"`
	// A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type CompositeAlarmState struct {
	// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
	ActionsEnabled pulumix.Input[*bool]
	// Actions will be suppressed if the suppressor alarm is in the ALARM state.
	ActionsSuppressor pulumix.Input[*CompositeAlarmActionsSuppressorArgs]
	// The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	AlarmActions pulumix.Input[[]string]
	// The description for the composite alarm.
	AlarmDescription pulumix.Input[*string]
	// The name for the composite alarm. This name must be unique within the region.
	AlarmName pulumix.Input[*string]
	// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
	AlarmRule pulumix.Input[*string]
	// The ARN of the composite alarm.
	Arn pulumix.Input[*string]
	// The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	InsufficientDataActions pulumix.Input[[]string]
	// The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	OkActions pulumix.Input[[]string]
	// A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (CompositeAlarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*compositeAlarmState)(nil)).Elem()
}

type compositeAlarmArgs struct {
	// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
	ActionsEnabled *bool `pulumi:"actionsEnabled"`
	// Actions will be suppressed if the suppressor alarm is in the ALARM state.
	ActionsSuppressor *CompositeAlarmActionsSuppressor `pulumi:"actionsSuppressor"`
	// The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	AlarmActions []string `pulumi:"alarmActions"`
	// The description for the composite alarm.
	AlarmDescription *string `pulumi:"alarmDescription"`
	// The name for the composite alarm. This name must be unique within the region.
	AlarmName string `pulumi:"alarmName"`
	// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
	AlarmRule string `pulumi:"alarmRule"`
	// The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	InsufficientDataActions []string `pulumi:"insufficientDataActions"`
	// The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	OkActions []string `pulumi:"okActions"`
	// A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a CompositeAlarm resource.
type CompositeAlarmArgs struct {
	// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
	ActionsEnabled pulumix.Input[*bool]
	// Actions will be suppressed if the suppressor alarm is in the ALARM state.
	ActionsSuppressor pulumix.Input[*CompositeAlarmActionsSuppressorArgs]
	// The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	AlarmActions pulumix.Input[[]string]
	// The description for the composite alarm.
	AlarmDescription pulumix.Input[*string]
	// The name for the composite alarm. This name must be unique within the region.
	AlarmName pulumix.Input[string]
	// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
	AlarmRule pulumix.Input[string]
	// The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	InsufficientDataActions pulumix.Input[[]string]
	// The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
	OkActions pulumix.Input[[]string]
	// A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (CompositeAlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*compositeAlarmArgs)(nil)).Elem()
}

type CompositeAlarmOutput struct{ *pulumi.OutputState }

func (CompositeAlarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositeAlarm)(nil)).Elem()
}

func (o CompositeAlarmOutput) ToCompositeAlarmOutput() CompositeAlarmOutput {
	return o
}

func (o CompositeAlarmOutput) ToCompositeAlarmOutputWithContext(ctx context.Context) CompositeAlarmOutput {
	return o
}

func (o CompositeAlarmOutput) ToOutput(ctx context.Context) pulumix.Output[CompositeAlarm] {
	return pulumix.Output[CompositeAlarm]{
		OutputState: o.OutputState,
	}
}

// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
func (o CompositeAlarmOutput) ActionsEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.Output[*bool] { return v.ActionsEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Actions will be suppressed if the suppressor alarm is in the ALARM state.
func (o CompositeAlarmOutput) ActionsSuppressor() pulumix.GPtrOutput[CompositeAlarmActionsSuppressor, CompositeAlarmActionsSuppressorOutput] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.GPtrOutput[CompositeAlarmActionsSuppressor, CompositeAlarmActionsSuppressorOutput] {
		return v.ActionsSuppressor
	})
	unwrapped := pulumix.Flatten[*CompositeAlarmActionsSuppressor, pulumix.GPtrOutput[CompositeAlarmActionsSuppressor, CompositeAlarmActionsSuppressorOutput]](value)
	return pulumix.GPtrOutput[CompositeAlarmActionsSuppressor, CompositeAlarmActionsSuppressorOutput]{OutputState: unwrapped.OutputState}
}

// The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
func (o CompositeAlarmOutput) AlarmActions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.ArrayOutput[string] { return v.AlarmActions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The description for the composite alarm.
func (o CompositeAlarmOutput) AlarmDescription() pulumix.Output[*string] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.Output[*string] { return v.AlarmDescription })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name for the composite alarm. This name must be unique within the region.
func (o CompositeAlarmOutput) AlarmName() pulumix.Output[string] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.Output[string] { return v.AlarmName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
func (o CompositeAlarmOutput) AlarmRule() pulumix.Output[string] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.Output[string] { return v.AlarmRule })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the composite alarm.
func (o CompositeAlarmOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
func (o CompositeAlarmOutput) InsufficientDataActions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.ArrayOutput[string] { return v.InsufficientDataActions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
func (o CompositeAlarmOutput) OkActions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.ArrayOutput[string] { return v.OkActions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CompositeAlarmOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o CompositeAlarmOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[CompositeAlarm](o, func(v CompositeAlarm) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CompositeAlarmOutput{})
}
