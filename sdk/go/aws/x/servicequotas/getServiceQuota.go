// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicequotas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a Service Quota.
//
// > **NOTE:** Global quotas apply to all AWS regions, but can only be accessed in `us-east-1` in the Commercial partition or `us-gov-west-1` in the GovCloud partition. In other regions, the AWS API will return the error `The request failed because the specified service does not exist.`
func LookupServiceQuota(ctx *pulumi.Context, args *LookupServiceQuotaArgs, opts ...pulumi.InvokeOption) (*LookupServiceQuotaResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceQuotaResult
	err := ctx.Invoke("aws:servicequotas/getServiceQuota:getServiceQuota", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceQuota.
type LookupServiceQuotaArgs struct {
	// Quota code within the service. When configured, the data source directly looks up the service quota. Available values can be found with the [AWS CLI service-quotas list-service-quotas command](https://docs.aws.amazon.com/cli/latest/reference/service-quotas/list-service-quotas.html). One of `quotaCode` or `quotaName` must be specified.
	QuotaCode *string `pulumi:"quotaCode"`
	// Quota name within the service. When configured, the data source searches through all service quotas to find the matching quota name. Available values can be found with the [AWS CLI service-quotas list-service-quotas command](https://docs.aws.amazon.com/cli/latest/reference/service-quotas/list-service-quotas.html). One of `quotaName` or `quotaCode` must be specified.
	QuotaName *string `pulumi:"quotaName"`
	// Service code for the quota. Available values can be found with the `servicequotas.getService` data source or [AWS CLI service-quotas list-services command](https://docs.aws.amazon.com/cli/latest/reference/service-quotas/list-services.html).
	ServiceCode string `pulumi:"serviceCode"`
}

// A collection of values returned by getServiceQuota.
type LookupServiceQuotaResult struct {
	// Whether the service quota is adjustable.
	Adjustable bool `pulumi:"adjustable"`
	// ARN of the service quota.
	Arn string `pulumi:"arn"`
	// Default value of the service quota.
	DefaultValue float64 `pulumi:"defaultValue"`
	// Whether the service quota is global for the AWS account.
	GlobalQuota bool `pulumi:"globalQuota"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	QuotaCode   string `pulumi:"quotaCode"`
	QuotaName   string `pulumi:"quotaName"`
	ServiceCode string `pulumi:"serviceCode"`
	// Name of the service.
	ServiceName string `pulumi:"serviceName"`
	// Information about the measurement.
	UsageMetrics []GetServiceQuotaUsageMetric `pulumi:"usageMetrics"`
	// Current value of the service quota.
	Value float64 `pulumi:"value"`
}

func LookupServiceQuotaOutput(ctx *pulumi.Context, args LookupServiceQuotaOutputArgs, opts ...pulumi.InvokeOption) LookupServiceQuotaResultOutput {
	outputResult := pulumix.ApplyErr[*LookupServiceQuotaArgs](args.ToOutput(), func(plainArgs *LookupServiceQuotaArgs) (*LookupServiceQuotaResult, error) {
		return LookupServiceQuota(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupServiceQuotaResultOutput, *LookupServiceQuotaResult](outputResult)
}

// A collection of arguments for invoking getServiceQuota.
type LookupServiceQuotaOutputArgs struct {
	// Quota code within the service. When configured, the data source directly looks up the service quota. Available values can be found with the [AWS CLI service-quotas list-service-quotas command](https://docs.aws.amazon.com/cli/latest/reference/service-quotas/list-service-quotas.html). One of `quotaCode` or `quotaName` must be specified.
	QuotaCode pulumix.Input[*string] `pulumi:"quotaCode"`
	// Quota name within the service. When configured, the data source searches through all service quotas to find the matching quota name. Available values can be found with the [AWS CLI service-quotas list-service-quotas command](https://docs.aws.amazon.com/cli/latest/reference/service-quotas/list-service-quotas.html). One of `quotaName` or `quotaCode` must be specified.
	QuotaName pulumix.Input[*string] `pulumi:"quotaName"`
	// Service code for the quota. Available values can be found with the `servicequotas.getService` data source or [AWS CLI service-quotas list-services command](https://docs.aws.amazon.com/cli/latest/reference/service-quotas/list-services.html).
	ServiceCode pulumix.Input[string] `pulumi:"serviceCode"`
}

func (args LookupServiceQuotaOutputArgs) ToOutput() pulumix.Output[*LookupServiceQuotaArgs] {
	allArgs := pulumix.All(
		args.QuotaCode.ToOutput(context.Background()).AsAny(),
		args.QuotaName.ToOutput(context.Background()).AsAny(),
		args.ServiceCode.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupServiceQuotaArgs {
		return &LookupServiceQuotaArgs{
			QuotaCode:   resolvedArgs[0].(*string),
			QuotaName:   resolvedArgs[1].(*string),
			ServiceCode: resolvedArgs[2].(string),
		}
	})
}

type LookupServiceQuotaResultOutput struct{ *pulumi.OutputState }

func (LookupServiceQuotaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceQuotaResult)(nil)).Elem()
}

func (o LookupServiceQuotaResultOutput) ToOutput(context.Context) pulumix.Output[*LookupServiceQuotaResult] {
	return pulumix.Output[*LookupServiceQuotaResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupServiceQuotaResultOutput) Adjustable() pulumix.Output[bool] {
	return pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) bool { return v.Adjustable })
}

func (o LookupServiceQuotaResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) string { return v.Arn })
}

func (o LookupServiceQuotaResultOutput) DefaultValue() pulumix.Output[float64] {
	return pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) float64 { return v.DefaultValue })
}

func (o LookupServiceQuotaResultOutput) GlobalQuota() pulumix.Output[bool] {
	return pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) bool { return v.GlobalQuota })
}

func (o LookupServiceQuotaResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) string { return v.Id })
}

func (o LookupServiceQuotaResultOutput) QuotaCode() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) string { return v.QuotaCode })
}

func (o LookupServiceQuotaResultOutput) QuotaName() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) string { return v.QuotaName })
}

func (o LookupServiceQuotaResultOutput) ServiceCode() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) string { return v.ServiceCode })
}

func (o LookupServiceQuotaResultOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) string { return v.ServiceName })
}

func (o LookupServiceQuotaResultOutput) UsageMetrics() pulumix.GArrayOutput[GetServiceQuotaUsageMetric, GetServiceQuotaUsageMetricOutput] {
	value := pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) []GetServiceQuotaUsageMetric { return v.UsageMetrics })
	return pulumix.GArrayOutput[GetServiceQuotaUsageMetric, GetServiceQuotaUsageMetricOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupServiceQuotaResultOutput) Value() pulumix.Output[float64] {
	return pulumix.Apply[*LookupServiceQuotaResult](o, func(v *LookupServiceQuotaResult) float64 { return v.Value })
}
