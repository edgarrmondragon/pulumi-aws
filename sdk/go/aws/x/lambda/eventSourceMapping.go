// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Lambda event source mapping. This allows Lambda functions to get events from Kinesis, DynamoDB, SQS, Amazon MQ and Managed Streaming for Apache Kafka (MSK).
//
// For information about Lambda and how to use it, see [What is AWS Lambda?](http://docs.aws.amazon.com/lambda/latest/dg/welcome.html).
// For information about event source mappings, see [CreateEventSourceMapping](http://docs.aws.amazon.com/lambda/latest/dg/API_CreateEventSourceMapping.html) in the API docs.
type EventSourceMapping struct {
	pulumi.CustomResourceState

	// Additional configuration block for Amazon Managed Kafka sources. Incompatible with "selfManagedEventSource" and "selfManagedKafkaEventSourceConfig". Detailed below.
	AmazonManagedKafkaEventSourceConfig pulumix.GPtrOutput[EventSourceMappingAmazonManagedKafkaEventSourceConfig, EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput] `pulumi:"amazonManagedKafkaEventSourceConfig"`
	// The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
	BatchSize pulumix.Output[*int] `pulumi:"batchSize"`
	// - (Optional) If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to `false`.
	BisectBatchOnFunctionError pulumix.Output[*bool] `pulumi:"bisectBatchOnFunctionError"`
	// - (Optional) An Amazon SQS queue or Amazon SNS topic destination for failed records. Only available for stream sources (DynamoDB and Kinesis). Detailed below.
	DestinationConfig pulumix.GPtrOutput[EventSourceMappingDestinationConfig, EventSourceMappingDestinationConfigOutput] `pulumi:"destinationConfig"`
	// - (Optional) Configuration settings for a DocumentDB event source. Detailed below.
	DocumentDbEventSourceConfig pulumix.GPtrOutput[EventSourceMappingDocumentDbEventSourceConfig, EventSourceMappingDocumentDbEventSourceConfigOutput] `pulumi:"documentDbEventSourceConfig"`
	// Determines if the mapping will be enabled on creation. Defaults to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
	EventSourceArn pulumix.Output[*string] `pulumi:"eventSourceArn"`
	// The criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
	FilterCriteria pulumix.GPtrOutput[EventSourceMappingFilterCriteria, EventSourceMappingFilterCriteriaOutput] `pulumi:"filterCriteria"`
	// The the ARN of the Lambda function the event source mapping is sending events to. (Note: this is a computed value that differs from `functionName` above.)
	FunctionArn pulumix.Output[string] `pulumi:"functionArn"`
	// The name or the ARN of the Lambda function that will be subscribing to events.
	FunctionName pulumix.Output[string] `pulumi:"functionName"`
	// A list of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
	FunctionResponseTypes pulumix.ArrayOutput[string] `pulumi:"functionResponseTypes"`
	// The date this resource was last modified.
	LastModified pulumix.Output[string] `pulumi:"lastModified"`
	// The result of the last AWS Lambda invocation of your Lambda function.
	LastProcessingResult pulumix.Output[string] `pulumi:"lastProcessingResult"`
	// The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either `maximumBatchingWindowInSeconds` expires or `batchSize` has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
	MaximumBatchingWindowInSeconds pulumix.Output[*int] `pulumi:"maximumBatchingWindowInSeconds"`
	// - (Optional) The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
	MaximumRecordAgeInSeconds pulumix.Output[int] `pulumi:"maximumRecordAgeInSeconds"`
	// - (Optional) The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
	MaximumRetryAttempts pulumix.Output[int] `pulumi:"maximumRetryAttempts"`
	// - (Optional) The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
	ParallelizationFactor pulumix.Output[int] `pulumi:"parallelizationFactor"`
	// The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
	Queues pulumix.Output[*string] `pulumi:"queues"`
	// Scaling configuration of the event source. Only available for SQS queues. Detailed below.
	ScalingConfig pulumix.GPtrOutput[EventSourceMappingScalingConfig, EventSourceMappingScalingConfigOutput] `pulumi:"scalingConfig"`
	// - (Optional) For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `sourceAccessConfiguration`. Detailed below.
	SelfManagedEventSource pulumix.GPtrOutput[EventSourceMappingSelfManagedEventSource, EventSourceMappingSelfManagedEventSourceOutput] `pulumi:"selfManagedEventSource"`
	// Additional configuration block for Self Managed Kafka sources. Incompatible with "eventSourceArn" and "amazonManagedKafkaEventSourceConfig". Detailed below.
	SelfManagedKafkaEventSourceConfig pulumix.GPtrOutput[EventSourceMappingSelfManagedKafkaEventSourceConfig, EventSourceMappingSelfManagedKafkaEventSourceConfigOutput] `pulumi:"selfManagedKafkaEventSourceConfig"`
	// For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `selfManagedEventSource`. Detailed below.
	SourceAccessConfigurations pulumix.GArrayOutput[EventSourceMappingSourceAccessConfiguration, EventSourceMappingSourceAccessConfigurationOutput] `pulumi:"sourceAccessConfigurations"`
	// The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
	StartingPosition pulumix.Output[*string] `pulumi:"startingPosition"`
	// A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `startingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
	StartingPositionTimestamp pulumix.Output[*string] `pulumi:"startingPositionTimestamp"`
	// The state of the event source mapping.
	State pulumix.Output[string] `pulumi:"state"`
	// The reason the event source mapping is in its current state.
	StateTransitionReason pulumix.Output[string] `pulumi:"stateTransitionReason"`
	// The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
	Topics pulumix.ArrayOutput[string] `pulumi:"topics"`
	// The duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
	TumblingWindowInSeconds pulumix.Output[*int] `pulumi:"tumblingWindowInSeconds"`
	// The UUID of the created event source mapping.
	Uuid pulumix.Output[string] `pulumi:"uuid"`
}

// NewEventSourceMapping registers a new resource with the given unique name, arguments, and options.
func NewEventSourceMapping(ctx *pulumi.Context,
	name string, args *EventSourceMappingArgs, opts ...pulumi.ResourceOption) (*EventSourceMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventSourceMapping
	err := ctx.RegisterResource("aws:lambda/eventSourceMapping:EventSourceMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSourceMapping gets an existing EventSourceMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSourceMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventSourceMappingState, opts ...pulumi.ResourceOption) (*EventSourceMapping, error) {
	var resource EventSourceMapping
	err := ctx.ReadResource("aws:lambda/eventSourceMapping:EventSourceMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventSourceMapping resources.
type eventSourceMappingState struct {
	// Additional configuration block for Amazon Managed Kafka sources. Incompatible with "selfManagedEventSource" and "selfManagedKafkaEventSourceConfig". Detailed below.
	AmazonManagedKafkaEventSourceConfig *EventSourceMappingAmazonManagedKafkaEventSourceConfig `pulumi:"amazonManagedKafkaEventSourceConfig"`
	// The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
	BatchSize *int `pulumi:"batchSize"`
	// - (Optional) If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to `false`.
	BisectBatchOnFunctionError *bool `pulumi:"bisectBatchOnFunctionError"`
	// - (Optional) An Amazon SQS queue or Amazon SNS topic destination for failed records. Only available for stream sources (DynamoDB and Kinesis). Detailed below.
	DestinationConfig *EventSourceMappingDestinationConfig `pulumi:"destinationConfig"`
	// - (Optional) Configuration settings for a DocumentDB event source. Detailed below.
	DocumentDbEventSourceConfig *EventSourceMappingDocumentDbEventSourceConfig `pulumi:"documentDbEventSourceConfig"`
	// Determines if the mapping will be enabled on creation. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
	EventSourceArn *string `pulumi:"eventSourceArn"`
	// The criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
	FilterCriteria *EventSourceMappingFilterCriteria `pulumi:"filterCriteria"`
	// The the ARN of the Lambda function the event source mapping is sending events to. (Note: this is a computed value that differs from `functionName` above.)
	FunctionArn *string `pulumi:"functionArn"`
	// The name or the ARN of the Lambda function that will be subscribing to events.
	FunctionName *string `pulumi:"functionName"`
	// A list of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
	FunctionResponseTypes []string `pulumi:"functionResponseTypes"`
	// The date this resource was last modified.
	LastModified *string `pulumi:"lastModified"`
	// The result of the last AWS Lambda invocation of your Lambda function.
	LastProcessingResult *string `pulumi:"lastProcessingResult"`
	// The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either `maximumBatchingWindowInSeconds` expires or `batchSize` has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// - (Optional) The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
	MaximumRecordAgeInSeconds *int `pulumi:"maximumRecordAgeInSeconds"`
	// - (Optional) The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
	// - (Optional) The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
	ParallelizationFactor *int `pulumi:"parallelizationFactor"`
	// The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
	Queues *string `pulumi:"queues"`
	// Scaling configuration of the event source. Only available for SQS queues. Detailed below.
	ScalingConfig *EventSourceMappingScalingConfig `pulumi:"scalingConfig"`
	// - (Optional) For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `sourceAccessConfiguration`. Detailed below.
	SelfManagedEventSource *EventSourceMappingSelfManagedEventSource `pulumi:"selfManagedEventSource"`
	// Additional configuration block for Self Managed Kafka sources. Incompatible with "eventSourceArn" and "amazonManagedKafkaEventSourceConfig". Detailed below.
	SelfManagedKafkaEventSourceConfig *EventSourceMappingSelfManagedKafkaEventSourceConfig `pulumi:"selfManagedKafkaEventSourceConfig"`
	// For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `selfManagedEventSource`. Detailed below.
	SourceAccessConfigurations []EventSourceMappingSourceAccessConfiguration `pulumi:"sourceAccessConfigurations"`
	// The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
	StartingPosition *string `pulumi:"startingPosition"`
	// A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `startingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
	StartingPositionTimestamp *string `pulumi:"startingPositionTimestamp"`
	// The state of the event source mapping.
	State *string `pulumi:"state"`
	// The reason the event source mapping is in its current state.
	StateTransitionReason *string `pulumi:"stateTransitionReason"`
	// The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
	Topics []string `pulumi:"topics"`
	// The duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
	TumblingWindowInSeconds *int `pulumi:"tumblingWindowInSeconds"`
	// The UUID of the created event source mapping.
	Uuid *string `pulumi:"uuid"`
}

type EventSourceMappingState struct {
	// Additional configuration block for Amazon Managed Kafka sources. Incompatible with "selfManagedEventSource" and "selfManagedKafkaEventSourceConfig". Detailed below.
	AmazonManagedKafkaEventSourceConfig pulumix.Input[*EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs]
	// The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
	BatchSize pulumix.Input[*int]
	// - (Optional) If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to `false`.
	BisectBatchOnFunctionError pulumix.Input[*bool]
	// - (Optional) An Amazon SQS queue or Amazon SNS topic destination for failed records. Only available for stream sources (DynamoDB and Kinesis). Detailed below.
	DestinationConfig pulumix.Input[*EventSourceMappingDestinationConfigArgs]
	// - (Optional) Configuration settings for a DocumentDB event source. Detailed below.
	DocumentDbEventSourceConfig pulumix.Input[*EventSourceMappingDocumentDbEventSourceConfigArgs]
	// Determines if the mapping will be enabled on creation. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
	EventSourceArn pulumix.Input[*string]
	// The criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
	FilterCriteria pulumix.Input[*EventSourceMappingFilterCriteriaArgs]
	// The the ARN of the Lambda function the event source mapping is sending events to. (Note: this is a computed value that differs from `functionName` above.)
	FunctionArn pulumix.Input[*string]
	// The name or the ARN of the Lambda function that will be subscribing to events.
	FunctionName pulumix.Input[*string]
	// A list of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
	FunctionResponseTypes pulumix.Input[[]string]
	// The date this resource was last modified.
	LastModified pulumix.Input[*string]
	// The result of the last AWS Lambda invocation of your Lambda function.
	LastProcessingResult pulumix.Input[*string]
	// The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either `maximumBatchingWindowInSeconds` expires or `batchSize` has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
	MaximumBatchingWindowInSeconds pulumix.Input[*int]
	// - (Optional) The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
	MaximumRecordAgeInSeconds pulumix.Input[*int]
	// - (Optional) The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
	MaximumRetryAttempts pulumix.Input[*int]
	// - (Optional) The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
	ParallelizationFactor pulumix.Input[*int]
	// The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
	Queues pulumix.Input[*string]
	// Scaling configuration of the event source. Only available for SQS queues. Detailed below.
	ScalingConfig pulumix.Input[*EventSourceMappingScalingConfigArgs]
	// - (Optional) For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `sourceAccessConfiguration`. Detailed below.
	SelfManagedEventSource pulumix.Input[*EventSourceMappingSelfManagedEventSourceArgs]
	// Additional configuration block for Self Managed Kafka sources. Incompatible with "eventSourceArn" and "amazonManagedKafkaEventSourceConfig". Detailed below.
	SelfManagedKafkaEventSourceConfig pulumix.Input[*EventSourceMappingSelfManagedKafkaEventSourceConfigArgs]
	// For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `selfManagedEventSource`. Detailed below.
	SourceAccessConfigurations pulumix.Input[[]*EventSourceMappingSourceAccessConfigurationArgs]
	// The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
	StartingPosition pulumix.Input[*string]
	// A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `startingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
	StartingPositionTimestamp pulumix.Input[*string]
	// The state of the event source mapping.
	State pulumix.Input[*string]
	// The reason the event source mapping is in its current state.
	StateTransitionReason pulumix.Input[*string]
	// The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
	Topics pulumix.Input[[]string]
	// The duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
	TumblingWindowInSeconds pulumix.Input[*int]
	// The UUID of the created event source mapping.
	Uuid pulumix.Input[*string]
}

func (EventSourceMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourceMappingState)(nil)).Elem()
}

type eventSourceMappingArgs struct {
	// Additional configuration block for Amazon Managed Kafka sources. Incompatible with "selfManagedEventSource" and "selfManagedKafkaEventSourceConfig". Detailed below.
	AmazonManagedKafkaEventSourceConfig *EventSourceMappingAmazonManagedKafkaEventSourceConfig `pulumi:"amazonManagedKafkaEventSourceConfig"`
	// The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
	BatchSize *int `pulumi:"batchSize"`
	// - (Optional) If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to `false`.
	BisectBatchOnFunctionError *bool `pulumi:"bisectBatchOnFunctionError"`
	// - (Optional) An Amazon SQS queue or Amazon SNS topic destination for failed records. Only available for stream sources (DynamoDB and Kinesis). Detailed below.
	DestinationConfig *EventSourceMappingDestinationConfig `pulumi:"destinationConfig"`
	// - (Optional) Configuration settings for a DocumentDB event source. Detailed below.
	DocumentDbEventSourceConfig *EventSourceMappingDocumentDbEventSourceConfig `pulumi:"documentDbEventSourceConfig"`
	// Determines if the mapping will be enabled on creation. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
	EventSourceArn *string `pulumi:"eventSourceArn"`
	// The criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
	FilterCriteria *EventSourceMappingFilterCriteria `pulumi:"filterCriteria"`
	// The name or the ARN of the Lambda function that will be subscribing to events.
	FunctionName string `pulumi:"functionName"`
	// A list of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
	FunctionResponseTypes []string `pulumi:"functionResponseTypes"`
	// The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either `maximumBatchingWindowInSeconds` expires or `batchSize` has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// - (Optional) The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
	MaximumRecordAgeInSeconds *int `pulumi:"maximumRecordAgeInSeconds"`
	// - (Optional) The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
	// - (Optional) The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
	ParallelizationFactor *int `pulumi:"parallelizationFactor"`
	// The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
	Queues *string `pulumi:"queues"`
	// Scaling configuration of the event source. Only available for SQS queues. Detailed below.
	ScalingConfig *EventSourceMappingScalingConfig `pulumi:"scalingConfig"`
	// - (Optional) For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `sourceAccessConfiguration`. Detailed below.
	SelfManagedEventSource *EventSourceMappingSelfManagedEventSource `pulumi:"selfManagedEventSource"`
	// Additional configuration block for Self Managed Kafka sources. Incompatible with "eventSourceArn" and "amazonManagedKafkaEventSourceConfig". Detailed below.
	SelfManagedKafkaEventSourceConfig *EventSourceMappingSelfManagedKafkaEventSourceConfig `pulumi:"selfManagedKafkaEventSourceConfig"`
	// For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `selfManagedEventSource`. Detailed below.
	SourceAccessConfigurations []EventSourceMappingSourceAccessConfiguration `pulumi:"sourceAccessConfigurations"`
	// The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
	StartingPosition *string `pulumi:"startingPosition"`
	// A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `startingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
	StartingPositionTimestamp *string `pulumi:"startingPositionTimestamp"`
	// The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
	Topics []string `pulumi:"topics"`
	// The duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
	TumblingWindowInSeconds *int `pulumi:"tumblingWindowInSeconds"`
}

// The set of arguments for constructing a EventSourceMapping resource.
type EventSourceMappingArgs struct {
	// Additional configuration block for Amazon Managed Kafka sources. Incompatible with "selfManagedEventSource" and "selfManagedKafkaEventSourceConfig". Detailed below.
	AmazonManagedKafkaEventSourceConfig pulumix.Input[*EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs]
	// The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
	BatchSize pulumix.Input[*int]
	// - (Optional) If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to `false`.
	BisectBatchOnFunctionError pulumix.Input[*bool]
	// - (Optional) An Amazon SQS queue or Amazon SNS topic destination for failed records. Only available for stream sources (DynamoDB and Kinesis). Detailed below.
	DestinationConfig pulumix.Input[*EventSourceMappingDestinationConfigArgs]
	// - (Optional) Configuration settings for a DocumentDB event source. Detailed below.
	DocumentDbEventSourceConfig pulumix.Input[*EventSourceMappingDocumentDbEventSourceConfigArgs]
	// Determines if the mapping will be enabled on creation. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
	EventSourceArn pulumix.Input[*string]
	// The criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
	FilterCriteria pulumix.Input[*EventSourceMappingFilterCriteriaArgs]
	// The name or the ARN of the Lambda function that will be subscribing to events.
	FunctionName pulumix.Input[string]
	// A list of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
	FunctionResponseTypes pulumix.Input[[]string]
	// The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either `maximumBatchingWindowInSeconds` expires or `batchSize` has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
	MaximumBatchingWindowInSeconds pulumix.Input[*int]
	// - (Optional) The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
	MaximumRecordAgeInSeconds pulumix.Input[*int]
	// - (Optional) The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
	MaximumRetryAttempts pulumix.Input[*int]
	// - (Optional) The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
	ParallelizationFactor pulumix.Input[*int]
	// The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
	Queues pulumix.Input[*string]
	// Scaling configuration of the event source. Only available for SQS queues. Detailed below.
	ScalingConfig pulumix.Input[*EventSourceMappingScalingConfigArgs]
	// - (Optional) For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `sourceAccessConfiguration`. Detailed below.
	SelfManagedEventSource pulumix.Input[*EventSourceMappingSelfManagedEventSourceArgs]
	// Additional configuration block for Self Managed Kafka sources. Incompatible with "eventSourceArn" and "amazonManagedKafkaEventSourceConfig". Detailed below.
	SelfManagedKafkaEventSourceConfig pulumix.Input[*EventSourceMappingSelfManagedKafkaEventSourceConfigArgs]
	// For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `selfManagedEventSource`. Detailed below.
	SourceAccessConfigurations pulumix.Input[[]*EventSourceMappingSourceAccessConfigurationArgs]
	// The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
	StartingPosition pulumix.Input[*string]
	// A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `startingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
	StartingPositionTimestamp pulumix.Input[*string]
	// The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
	Topics pulumix.Input[[]string]
	// The duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
	TumblingWindowInSeconds pulumix.Input[*int]
}

func (EventSourceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourceMappingArgs)(nil)).Elem()
}

type EventSourceMappingOutput struct{ *pulumi.OutputState }

func (EventSourceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMapping)(nil)).Elem()
}

func (o EventSourceMappingOutput) ToEventSourceMappingOutput() EventSourceMappingOutput {
	return o
}

func (o EventSourceMappingOutput) ToEventSourceMappingOutputWithContext(ctx context.Context) EventSourceMappingOutput {
	return o
}

func (o EventSourceMappingOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMapping] {
	return pulumix.Output[EventSourceMapping]{
		OutputState: o.OutputState,
	}
}

// Additional configuration block for Amazon Managed Kafka sources. Incompatible with "selfManagedEventSource" and "selfManagedKafkaEventSourceConfig". Detailed below.
func (o EventSourceMappingOutput) AmazonManagedKafkaEventSourceConfig() pulumix.GPtrOutput[EventSourceMappingAmazonManagedKafkaEventSourceConfig, EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.GPtrOutput[EventSourceMappingAmazonManagedKafkaEventSourceConfig, EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput] {
		return v.AmazonManagedKafkaEventSourceConfig
	})
	unwrapped := pulumix.Flatten[*EventSourceMappingAmazonManagedKafkaEventSourceConfig, pulumix.GPtrOutput[EventSourceMappingAmazonManagedKafkaEventSourceConfig, EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput]](value)
	return pulumix.GPtrOutput[EventSourceMappingAmazonManagedKafkaEventSourceConfig, EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput]{OutputState: unwrapped.OutputState}
}

// The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
func (o EventSourceMappingOutput) BatchSize() pulumix.Output[*int] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[*int] { return v.BatchSize })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// - (Optional) If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to `false`.
func (o EventSourceMappingOutput) BisectBatchOnFunctionError() pulumix.Output[*bool] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[*bool] { return v.BisectBatchOnFunctionError })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// - (Optional) An Amazon SQS queue or Amazon SNS topic destination for failed records. Only available for stream sources (DynamoDB and Kinesis). Detailed below.
func (o EventSourceMappingOutput) DestinationConfig() pulumix.GPtrOutput[EventSourceMappingDestinationConfig, EventSourceMappingDestinationConfigOutput] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.GPtrOutput[EventSourceMappingDestinationConfig, EventSourceMappingDestinationConfigOutput] {
		return v.DestinationConfig
	})
	unwrapped := pulumix.Flatten[*EventSourceMappingDestinationConfig, pulumix.GPtrOutput[EventSourceMappingDestinationConfig, EventSourceMappingDestinationConfigOutput]](value)
	return pulumix.GPtrOutput[EventSourceMappingDestinationConfig, EventSourceMappingDestinationConfigOutput]{OutputState: unwrapped.OutputState}
}

// - (Optional) Configuration settings for a DocumentDB event source. Detailed below.
func (o EventSourceMappingOutput) DocumentDbEventSourceConfig() pulumix.GPtrOutput[EventSourceMappingDocumentDbEventSourceConfig, EventSourceMappingDocumentDbEventSourceConfigOutput] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.GPtrOutput[EventSourceMappingDocumentDbEventSourceConfig, EventSourceMappingDocumentDbEventSourceConfigOutput] {
		return v.DocumentDbEventSourceConfig
	})
	unwrapped := pulumix.Flatten[*EventSourceMappingDocumentDbEventSourceConfig, pulumix.GPtrOutput[EventSourceMappingDocumentDbEventSourceConfig, EventSourceMappingDocumentDbEventSourceConfigOutput]](value)
	return pulumix.GPtrOutput[EventSourceMappingDocumentDbEventSourceConfig, EventSourceMappingDocumentDbEventSourceConfigOutput]{OutputState: unwrapped.OutputState}
}

// Determines if the mapping will be enabled on creation. Defaults to `true`.
func (o EventSourceMappingOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
func (o EventSourceMappingOutput) EventSourceArn() pulumix.Output[*string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[*string] { return v.EventSourceArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
func (o EventSourceMappingOutput) FilterCriteria() pulumix.GPtrOutput[EventSourceMappingFilterCriteria, EventSourceMappingFilterCriteriaOutput] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.GPtrOutput[EventSourceMappingFilterCriteria, EventSourceMappingFilterCriteriaOutput] {
		return v.FilterCriteria
	})
	unwrapped := pulumix.Flatten[*EventSourceMappingFilterCriteria, pulumix.GPtrOutput[EventSourceMappingFilterCriteria, EventSourceMappingFilterCriteriaOutput]](value)
	return pulumix.GPtrOutput[EventSourceMappingFilterCriteria, EventSourceMappingFilterCriteriaOutput]{OutputState: unwrapped.OutputState}
}

// The the ARN of the Lambda function the event source mapping is sending events to. (Note: this is a computed value that differs from `functionName` above.)
func (o EventSourceMappingOutput) FunctionArn() pulumix.Output[string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[string] { return v.FunctionArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name or the ARN of the Lambda function that will be subscribing to events.
func (o EventSourceMappingOutput) FunctionName() pulumix.Output[string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[string] { return v.FunctionName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
func (o EventSourceMappingOutput) FunctionResponseTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.ArrayOutput[string] { return v.FunctionResponseTypes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The date this resource was last modified.
func (o EventSourceMappingOutput) LastModified() pulumix.Output[string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[string] { return v.LastModified })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The result of the last AWS Lambda invocation of your Lambda function.
func (o EventSourceMappingOutput) LastProcessingResult() pulumix.Output[string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[string] { return v.LastProcessingResult })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either `maximumBatchingWindowInSeconds` expires or `batchSize` has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
func (o EventSourceMappingOutput) MaximumBatchingWindowInSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[*int] { return v.MaximumBatchingWindowInSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// - (Optional) The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
func (o EventSourceMappingOutput) MaximumRecordAgeInSeconds() pulumix.Output[int] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[int] { return v.MaximumRecordAgeInSeconds })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// - (Optional) The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
func (o EventSourceMappingOutput) MaximumRetryAttempts() pulumix.Output[int] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[int] { return v.MaximumRetryAttempts })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// - (Optional) The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
func (o EventSourceMappingOutput) ParallelizationFactor() pulumix.Output[int] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[int] { return v.ParallelizationFactor })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
func (o EventSourceMappingOutput) Queues() pulumix.Output[*string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[*string] { return v.Queues })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Scaling configuration of the event source. Only available for SQS queues. Detailed below.
func (o EventSourceMappingOutput) ScalingConfig() pulumix.GPtrOutput[EventSourceMappingScalingConfig, EventSourceMappingScalingConfigOutput] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.GPtrOutput[EventSourceMappingScalingConfig, EventSourceMappingScalingConfigOutput] {
		return v.ScalingConfig
	})
	unwrapped := pulumix.Flatten[*EventSourceMappingScalingConfig, pulumix.GPtrOutput[EventSourceMappingScalingConfig, EventSourceMappingScalingConfigOutput]](value)
	return pulumix.GPtrOutput[EventSourceMappingScalingConfig, EventSourceMappingScalingConfigOutput]{OutputState: unwrapped.OutputState}
}

// - (Optional) For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `sourceAccessConfiguration`. Detailed below.
func (o EventSourceMappingOutput) SelfManagedEventSource() pulumix.GPtrOutput[EventSourceMappingSelfManagedEventSource, EventSourceMappingSelfManagedEventSourceOutput] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.GPtrOutput[EventSourceMappingSelfManagedEventSource, EventSourceMappingSelfManagedEventSourceOutput] {
		return v.SelfManagedEventSource
	})
	unwrapped := pulumix.Flatten[*EventSourceMappingSelfManagedEventSource, pulumix.GPtrOutput[EventSourceMappingSelfManagedEventSource, EventSourceMappingSelfManagedEventSourceOutput]](value)
	return pulumix.GPtrOutput[EventSourceMappingSelfManagedEventSource, EventSourceMappingSelfManagedEventSourceOutput]{OutputState: unwrapped.OutputState}
}

// Additional configuration block for Self Managed Kafka sources. Incompatible with "eventSourceArn" and "amazonManagedKafkaEventSourceConfig". Detailed below.
func (o EventSourceMappingOutput) SelfManagedKafkaEventSourceConfig() pulumix.GPtrOutput[EventSourceMappingSelfManagedKafkaEventSourceConfig, EventSourceMappingSelfManagedKafkaEventSourceConfigOutput] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.GPtrOutput[EventSourceMappingSelfManagedKafkaEventSourceConfig, EventSourceMappingSelfManagedKafkaEventSourceConfigOutput] {
		return v.SelfManagedKafkaEventSourceConfig
	})
	unwrapped := pulumix.Flatten[*EventSourceMappingSelfManagedKafkaEventSourceConfig, pulumix.GPtrOutput[EventSourceMappingSelfManagedKafkaEventSourceConfig, EventSourceMappingSelfManagedKafkaEventSourceConfigOutput]](value)
	return pulumix.GPtrOutput[EventSourceMappingSelfManagedKafkaEventSourceConfig, EventSourceMappingSelfManagedKafkaEventSourceConfigOutput]{OutputState: unwrapped.OutputState}
}

// For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `selfManagedEventSource`. Detailed below.
func (o EventSourceMappingOutput) SourceAccessConfigurations() pulumix.GArrayOutput[EventSourceMappingSourceAccessConfiguration, EventSourceMappingSourceAccessConfigurationOutput] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.GArrayOutput[EventSourceMappingSourceAccessConfiguration, EventSourceMappingSourceAccessConfigurationOutput] {
		return v.SourceAccessConfigurations
	})
	unwrapped := pulumix.Flatten[[]EventSourceMappingSourceAccessConfiguration, pulumix.GArrayOutput[EventSourceMappingSourceAccessConfiguration, EventSourceMappingSourceAccessConfigurationOutput]](value)
	return pulumix.GArrayOutput[EventSourceMappingSourceAccessConfiguration, EventSourceMappingSourceAccessConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
func (o EventSourceMappingOutput) StartingPosition() pulumix.Output[*string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[*string] { return v.StartingPosition })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `startingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
func (o EventSourceMappingOutput) StartingPositionTimestamp() pulumix.Output[*string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[*string] { return v.StartingPositionTimestamp })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The state of the event source mapping.
func (o EventSourceMappingOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The reason the event source mapping is in its current state.
func (o EventSourceMappingOutput) StateTransitionReason() pulumix.Output[string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[string] { return v.StateTransitionReason })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
func (o EventSourceMappingOutput) Topics() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.ArrayOutput[string] { return v.Topics })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
func (o EventSourceMappingOutput) TumblingWindowInSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[*int] { return v.TumblingWindowInSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The UUID of the created event source mapping.
func (o EventSourceMappingOutput) Uuid() pulumix.Output[string] {
	value := pulumix.Apply[EventSourceMapping](o, func(v EventSourceMapping) pulumix.Output[string] { return v.Uuid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(EventSourceMappingOutput{})
}
