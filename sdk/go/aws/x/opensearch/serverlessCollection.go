// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS OpenSearch Serverless Collection.
//
// > **NOTE:** An `opensearch.ServerlessCollection` cannot be created without having an applicable encryption security policy. Use the `dependsOn` meta-argument to define this dependency.
//
// > **NOTE:** An `opensearch.ServerlessCollection` is not accessible without configuring an applicable network security policy. Data cannot be accessed without configuring an applicable data access policy.
type ServerlessCollection struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the collection.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
	CollectionEndpoint pulumix.Output[string] `pulumi:"collectionEndpoint"`
	// Collection-specific endpoint used to access OpenSearch Dashboards.
	DashboardEndpoint pulumix.Output[string] `pulumi:"dashboardEndpoint"`
	// Description of the collection.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The ARN of the Amazon Web Services KMS key used to encrypt the collection.
	KmsKeyArn pulumix.Output[string] `pulumi:"kmsKeyArn"`
	// Name of the collection.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumix.MapOutput[string]                                                            `pulumi:"tags"`
	TagsAll  pulumix.MapOutput[string]                                                            `pulumi:"tagsAll"`
	Timeouts pulumix.GPtrOutput[ServerlessCollectionTimeouts, ServerlessCollectionTimeoutsOutput] `pulumi:"timeouts"`
	// Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewServerlessCollection registers a new resource with the given unique name, arguments, and options.
func NewServerlessCollection(ctx *pulumi.Context,
	name string, args *ServerlessCollectionArgs, opts ...pulumi.ResourceOption) (*ServerlessCollection, error) {
	if args == nil {
		args = &ServerlessCollectionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessCollection
	err := ctx.RegisterResource("aws:opensearch/serverlessCollection:ServerlessCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessCollection gets an existing ServerlessCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessCollectionState, opts ...pulumi.ResourceOption) (*ServerlessCollection, error) {
	var resource ServerlessCollection
	err := ctx.ReadResource("aws:opensearch/serverlessCollection:ServerlessCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessCollection resources.
type serverlessCollectionState struct {
	// Amazon Resource Name (ARN) of the collection.
	Arn *string `pulumi:"arn"`
	// Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
	CollectionEndpoint *string `pulumi:"collectionEndpoint"`
	// Collection-specific endpoint used to access OpenSearch Dashboards.
	DashboardEndpoint *string `pulumi:"dashboardEndpoint"`
	// Description of the collection.
	Description *string `pulumi:"description"`
	// The ARN of the Amazon Web Services KMS key used to encrypt the collection.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Name of the collection.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string             `pulumi:"tags"`
	TagsAll  map[string]string             `pulumi:"tagsAll"`
	Timeouts *ServerlessCollectionTimeouts `pulumi:"timeouts"`
	// Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
	Type *string `pulumi:"type"`
}

type ServerlessCollectionState struct {
	// Amazon Resource Name (ARN) of the collection.
	Arn pulumix.Input[*string]
	// Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
	CollectionEndpoint pulumix.Input[*string]
	// Collection-specific endpoint used to access OpenSearch Dashboards.
	DashboardEndpoint pulumix.Input[*string]
	// Description of the collection.
	Description pulumix.Input[*string]
	// The ARN of the Amazon Web Services KMS key used to encrypt the collection.
	KmsKeyArn pulumix.Input[*string]
	// Name of the collection.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumix.Input[map[string]string]
	TagsAll  pulumix.Input[map[string]string]
	Timeouts pulumix.Input[*ServerlessCollectionTimeoutsArgs]
	// Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
	Type pulumix.Input[*string]
}

func (ServerlessCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessCollectionState)(nil)).Elem()
}

type serverlessCollectionArgs struct {
	// Description of the collection.
	Description *string `pulumi:"description"`
	// Name of the collection.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string             `pulumi:"tags"`
	Timeouts *ServerlessCollectionTimeouts `pulumi:"timeouts"`
	// Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ServerlessCollection resource.
type ServerlessCollectionArgs struct {
	// Description of the collection.
	Description pulumix.Input[*string]
	// Name of the collection.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumix.Input[map[string]string]
	Timeouts pulumix.Input[*ServerlessCollectionTimeoutsArgs]
	// Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
	Type pulumix.Input[*string]
}

func (ServerlessCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessCollectionArgs)(nil)).Elem()
}

type ServerlessCollectionOutput struct{ *pulumi.OutputState }

func (ServerlessCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessCollection)(nil)).Elem()
}

func (o ServerlessCollectionOutput) ToServerlessCollectionOutput() ServerlessCollectionOutput {
	return o
}

func (o ServerlessCollectionOutput) ToServerlessCollectionOutputWithContext(ctx context.Context) ServerlessCollectionOutput {
	return o
}

func (o ServerlessCollectionOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessCollection] {
	return pulumix.Output[ServerlessCollection]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the collection.
func (o ServerlessCollectionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessCollection](o, func(v ServerlessCollection) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
func (o ServerlessCollectionOutput) CollectionEndpoint() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessCollection](o, func(v ServerlessCollection) pulumix.Output[string] { return v.CollectionEndpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Collection-specific endpoint used to access OpenSearch Dashboards.
func (o ServerlessCollectionOutput) DashboardEndpoint() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessCollection](o, func(v ServerlessCollection) pulumix.Output[string] { return v.DashboardEndpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the collection.
func (o ServerlessCollectionOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ServerlessCollection](o, func(v ServerlessCollection) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ARN of the Amazon Web Services KMS key used to encrypt the collection.
func (o ServerlessCollectionOutput) KmsKeyArn() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessCollection](o, func(v ServerlessCollection) pulumix.Output[string] { return v.KmsKeyArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the collection.
//
// The following arguments are optional:
func (o ServerlessCollectionOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessCollection](o, func(v ServerlessCollection) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ServerlessCollectionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServerlessCollection](o, func(v ServerlessCollection) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ServerlessCollectionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServerlessCollection](o, func(v ServerlessCollection) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ServerlessCollectionOutput) Timeouts() pulumix.GPtrOutput[ServerlessCollectionTimeouts, ServerlessCollectionTimeoutsOutput] {
	value := pulumix.Apply[ServerlessCollection](o, func(v ServerlessCollection) pulumix.GPtrOutput[ServerlessCollectionTimeouts, ServerlessCollectionTimeoutsOutput] {
		return v.Timeouts
	})
	unwrapped := pulumix.Flatten[*ServerlessCollectionTimeouts, pulumix.GPtrOutput[ServerlessCollectionTimeouts, ServerlessCollectionTimeoutsOutput]](value)
	return pulumix.GPtrOutput[ServerlessCollectionTimeouts, ServerlessCollectionTimeoutsOutput]{OutputState: unwrapped.OutputState}
}

// Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
func (o ServerlessCollectionOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessCollection](o, func(v ServerlessCollection) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ServerlessCollectionOutput{})
}
