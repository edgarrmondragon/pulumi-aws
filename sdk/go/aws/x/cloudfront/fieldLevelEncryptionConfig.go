// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudFront Field-level Encryption Config resource.
type FieldLevelEncryptionConfig struct {
	pulumi.CustomResourceState

	// Internal value used by CloudFront to allow future updates to the Field Level Encryption Config.
	CallerReference pulumix.Output[string] `pulumi:"callerReference"`
	// An optional comment about the Field Level Encryption Config.
	Comment pulumix.Output[*string] `pulumi:"comment"`
	// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
	ContentTypeProfileConfig pulumix.GPtrOutput[FieldLevelEncryptionConfigContentTypeProfileConfig, FieldLevelEncryptionConfigContentTypeProfileConfigOutput] `pulumi:"contentTypeProfileConfig"`
	// The current version of the Field Level Encryption Config. For example: `E2QWRUHAPOMQZL`.
	Etag pulumix.Output[string] `pulumi:"etag"`
	// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
	QueryArgProfileConfig pulumix.GPtrOutput[FieldLevelEncryptionConfigQueryArgProfileConfig, FieldLevelEncryptionConfigQueryArgProfileConfigOutput] `pulumi:"queryArgProfileConfig"`
}

// NewFieldLevelEncryptionConfig registers a new resource with the given unique name, arguments, and options.
func NewFieldLevelEncryptionConfig(ctx *pulumi.Context,
	name string, args *FieldLevelEncryptionConfigArgs, opts ...pulumi.ResourceOption) (*FieldLevelEncryptionConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentTypeProfileConfig == nil {
		return nil, errors.New("invalid value for required argument 'ContentTypeProfileConfig'")
	}
	if args.QueryArgProfileConfig == nil {
		return nil, errors.New("invalid value for required argument 'QueryArgProfileConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FieldLevelEncryptionConfig
	err := ctx.RegisterResource("aws:cloudfront/fieldLevelEncryptionConfig:FieldLevelEncryptionConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFieldLevelEncryptionConfig gets an existing FieldLevelEncryptionConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFieldLevelEncryptionConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FieldLevelEncryptionConfigState, opts ...pulumi.ResourceOption) (*FieldLevelEncryptionConfig, error) {
	var resource FieldLevelEncryptionConfig
	err := ctx.ReadResource("aws:cloudfront/fieldLevelEncryptionConfig:FieldLevelEncryptionConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FieldLevelEncryptionConfig resources.
type fieldLevelEncryptionConfigState struct {
	// Internal value used by CloudFront to allow future updates to the Field Level Encryption Config.
	CallerReference *string `pulumi:"callerReference"`
	// An optional comment about the Field Level Encryption Config.
	Comment *string `pulumi:"comment"`
	// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
	ContentTypeProfileConfig *FieldLevelEncryptionConfigContentTypeProfileConfig `pulumi:"contentTypeProfileConfig"`
	// The current version of the Field Level Encryption Config. For example: `E2QWRUHAPOMQZL`.
	Etag *string `pulumi:"etag"`
	// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
	QueryArgProfileConfig *FieldLevelEncryptionConfigQueryArgProfileConfig `pulumi:"queryArgProfileConfig"`
}

type FieldLevelEncryptionConfigState struct {
	// Internal value used by CloudFront to allow future updates to the Field Level Encryption Config.
	CallerReference pulumix.Input[*string]
	// An optional comment about the Field Level Encryption Config.
	Comment pulumix.Input[*string]
	// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
	ContentTypeProfileConfig pulumix.Input[*FieldLevelEncryptionConfigContentTypeProfileConfigArgs]
	// The current version of the Field Level Encryption Config. For example: `E2QWRUHAPOMQZL`.
	Etag pulumix.Input[*string]
	// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
	QueryArgProfileConfig pulumix.Input[*FieldLevelEncryptionConfigQueryArgProfileConfigArgs]
}

func (FieldLevelEncryptionConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*fieldLevelEncryptionConfigState)(nil)).Elem()
}

type fieldLevelEncryptionConfigArgs struct {
	// An optional comment about the Field Level Encryption Config.
	Comment *string `pulumi:"comment"`
	// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
	ContentTypeProfileConfig FieldLevelEncryptionConfigContentTypeProfileConfig `pulumi:"contentTypeProfileConfig"`
	// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
	QueryArgProfileConfig FieldLevelEncryptionConfigQueryArgProfileConfig `pulumi:"queryArgProfileConfig"`
}

// The set of arguments for constructing a FieldLevelEncryptionConfig resource.
type FieldLevelEncryptionConfigArgs struct {
	// An optional comment about the Field Level Encryption Config.
	Comment pulumix.Input[*string]
	// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
	ContentTypeProfileConfig pulumix.Input[*FieldLevelEncryptionConfigContentTypeProfileConfigArgs]
	// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
	QueryArgProfileConfig pulumix.Input[*FieldLevelEncryptionConfigQueryArgProfileConfigArgs]
}

func (FieldLevelEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fieldLevelEncryptionConfigArgs)(nil)).Elem()
}

type FieldLevelEncryptionConfigOutput struct{ *pulumi.OutputState }

func (FieldLevelEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldLevelEncryptionConfig)(nil)).Elem()
}

func (o FieldLevelEncryptionConfigOutput) ToFieldLevelEncryptionConfigOutput() FieldLevelEncryptionConfigOutput {
	return o
}

func (o FieldLevelEncryptionConfigOutput) ToFieldLevelEncryptionConfigOutputWithContext(ctx context.Context) FieldLevelEncryptionConfigOutput {
	return o
}

func (o FieldLevelEncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FieldLevelEncryptionConfig] {
	return pulumix.Output[FieldLevelEncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// Internal value used by CloudFront to allow future updates to the Field Level Encryption Config.
func (o FieldLevelEncryptionConfigOutput) CallerReference() pulumix.Output[string] {
	value := pulumix.Apply[FieldLevelEncryptionConfig](o, func(v FieldLevelEncryptionConfig) pulumix.Output[string] { return v.CallerReference })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An optional comment about the Field Level Encryption Config.
func (o FieldLevelEncryptionConfigOutput) Comment() pulumix.Output[*string] {
	value := pulumix.Apply[FieldLevelEncryptionConfig](o, func(v FieldLevelEncryptionConfig) pulumix.Output[*string] { return v.Comment })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
func (o FieldLevelEncryptionConfigOutput) ContentTypeProfileConfig() pulumix.GPtrOutput[FieldLevelEncryptionConfigContentTypeProfileConfig, FieldLevelEncryptionConfigContentTypeProfileConfigOutput] {
	value := pulumix.Apply[FieldLevelEncryptionConfig](o, func(v FieldLevelEncryptionConfig) pulumix.GPtrOutput[FieldLevelEncryptionConfigContentTypeProfileConfig, FieldLevelEncryptionConfigContentTypeProfileConfigOutput] {
		return v.ContentTypeProfileConfig
	})
	unwrapped := pulumix.Flatten[*FieldLevelEncryptionConfigContentTypeProfileConfig, pulumix.GPtrOutput[FieldLevelEncryptionConfigContentTypeProfileConfig, FieldLevelEncryptionConfigContentTypeProfileConfigOutput]](value)
	return pulumix.GPtrOutput[FieldLevelEncryptionConfigContentTypeProfileConfig, FieldLevelEncryptionConfigContentTypeProfileConfigOutput]{OutputState: unwrapped.OutputState}
}

// The current version of the Field Level Encryption Config. For example: `E2QWRUHAPOMQZL`.
func (o FieldLevelEncryptionConfigOutput) Etag() pulumix.Output[string] {
	value := pulumix.Apply[FieldLevelEncryptionConfig](o, func(v FieldLevelEncryptionConfig) pulumix.Output[string] { return v.Etag })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
func (o FieldLevelEncryptionConfigOutput) QueryArgProfileConfig() pulumix.GPtrOutput[FieldLevelEncryptionConfigQueryArgProfileConfig, FieldLevelEncryptionConfigQueryArgProfileConfigOutput] {
	value := pulumix.Apply[FieldLevelEncryptionConfig](o, func(v FieldLevelEncryptionConfig) pulumix.GPtrOutput[FieldLevelEncryptionConfigQueryArgProfileConfig, FieldLevelEncryptionConfigQueryArgProfileConfigOutput] {
		return v.QueryArgProfileConfig
	})
	unwrapped := pulumix.Flatten[*FieldLevelEncryptionConfigQueryArgProfileConfig, pulumix.GPtrOutput[FieldLevelEncryptionConfigQueryArgProfileConfig, FieldLevelEncryptionConfigQueryArgProfileConfigOutput]](value)
	return pulumix.GPtrOutput[FieldLevelEncryptionConfigQueryArgProfileConfig, FieldLevelEncryptionConfigQueryArgProfileConfigOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FieldLevelEncryptionConfigOutput{})
}
