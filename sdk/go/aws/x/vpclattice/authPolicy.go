// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS VPC Lattice Auth Policy.
type AuthPolicy struct {
	pulumi.CustomResourceState

	// The auth policy. The policy string in JSON must not contain newlines or blank lines.
	Policy pulumix.Output[string] `pulumi:"policy"`
	// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
	ResourceIdentifier pulumix.Output[string] `pulumi:"resourceIdentifier"`
	// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
	State pulumix.Output[*string] `pulumi:"state"`
}

// NewAuthPolicy registers a new resource with the given unique name, arguments, and options.
func NewAuthPolicy(ctx *pulumi.Context,
	name string, args *AuthPolicyArgs, opts ...pulumi.ResourceOption) (*AuthPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.ResourceIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ResourceIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthPolicy
	err := ctx.RegisterResource("aws:vpclattice/authPolicy:AuthPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthPolicy gets an existing AuthPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthPolicyState, opts ...pulumi.ResourceOption) (*AuthPolicy, error) {
	var resource AuthPolicy
	err := ctx.ReadResource("aws:vpclattice/authPolicy:AuthPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthPolicy resources.
type authPolicyState struct {
	// The auth policy. The policy string in JSON must not contain newlines or blank lines.
	Policy *string `pulumi:"policy"`
	// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
	ResourceIdentifier *string `pulumi:"resourceIdentifier"`
	// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
	State *string `pulumi:"state"`
}

type AuthPolicyState struct {
	// The auth policy. The policy string in JSON must not contain newlines or blank lines.
	Policy pulumix.Input[*string]
	// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
	ResourceIdentifier pulumix.Input[*string]
	// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
	State pulumix.Input[*string]
}

func (AuthPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*authPolicyState)(nil)).Elem()
}

type authPolicyArgs struct {
	// The auth policy. The policy string in JSON must not contain newlines or blank lines.
	Policy string `pulumi:"policy"`
	// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
	ResourceIdentifier string `pulumi:"resourceIdentifier"`
	// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a AuthPolicy resource.
type AuthPolicyArgs struct {
	// The auth policy. The policy string in JSON must not contain newlines or blank lines.
	Policy pulumix.Input[string]
	// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
	ResourceIdentifier pulumix.Input[string]
	// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
	State pulumix.Input[*string]
}

func (AuthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authPolicyArgs)(nil)).Elem()
}

type AuthPolicyOutput struct{ *pulumi.OutputState }

func (AuthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthPolicy)(nil)).Elem()
}

func (o AuthPolicyOutput) ToAuthPolicyOutput() AuthPolicyOutput {
	return o
}

func (o AuthPolicyOutput) ToAuthPolicyOutputWithContext(ctx context.Context) AuthPolicyOutput {
	return o
}

func (o AuthPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[AuthPolicy] {
	return pulumix.Output[AuthPolicy]{
		OutputState: o.OutputState,
	}
}

// The auth policy. The policy string in JSON must not contain newlines or blank lines.
func (o AuthPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[AuthPolicy](o, func(v AuthPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
func (o AuthPolicyOutput) ResourceIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[AuthPolicy](o, func(v AuthPolicy) pulumix.Output[string] { return v.ResourceIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
func (o AuthPolicyOutput) State() pulumix.Output[*string] {
	value := pulumix.Apply[AuthPolicy](o, func(v AuthPolicy) pulumix.Output[*string] { return v.State })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(AuthPolicyOutput{})
}
