// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acmpca

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage an AWS Certificate Manager Private Certificate Authorities Permission.
// Currently, this is only required in order to allow the ACM service to automatically renew certificates issued by a PCA.
type Permission struct {
	pulumi.CustomResourceState

	// Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
	Actions pulumix.ArrayOutput[string] `pulumi:"actions"`
	// ARN of the CA that grants the permissions.
	CertificateAuthorityArn pulumix.Output[string] `pulumi:"certificateAuthorityArn"`
	// IAM policy that is associated with the permission.
	Policy pulumix.Output[string] `pulumi:"policy"`
	// AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
	Principal pulumix.Output[string] `pulumi:"principal"`
	// ID of the calling account
	SourceAccount pulumix.Output[string] `pulumi:"sourceAccount"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOption) (*Permission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.CertificateAuthorityArn == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityArn'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Permission
	err := ctx.RegisterResource("aws:acmpca/permission:Permission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionState, opts ...pulumi.ResourceOption) (*Permission, error) {
	var resource Permission
	err := ctx.ReadResource("aws:acmpca/permission:Permission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permission resources.
type permissionState struct {
	// Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
	Actions []string `pulumi:"actions"`
	// ARN of the CA that grants the permissions.
	CertificateAuthorityArn *string `pulumi:"certificateAuthorityArn"`
	// IAM policy that is associated with the permission.
	Policy *string `pulumi:"policy"`
	// AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
	Principal *string `pulumi:"principal"`
	// ID of the calling account
	SourceAccount *string `pulumi:"sourceAccount"`
}

type PermissionState struct {
	// Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
	Actions pulumix.Input[[]string]
	// ARN of the CA that grants the permissions.
	CertificateAuthorityArn pulumix.Input[*string]
	// IAM policy that is associated with the permission.
	Policy pulumix.Input[*string]
	// AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
	Principal pulumix.Input[*string]
	// ID of the calling account
	SourceAccount pulumix.Input[*string]
}

func (PermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionState)(nil)).Elem()
}

type permissionArgs struct {
	// Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
	Actions []string `pulumi:"actions"`
	// ARN of the CA that grants the permissions.
	CertificateAuthorityArn string `pulumi:"certificateAuthorityArn"`
	// AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
	Principal string `pulumi:"principal"`
	// ID of the calling account
	SourceAccount *string `pulumi:"sourceAccount"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
	Actions pulumix.Input[[]string]
	// ARN of the CA that grants the permissions.
	CertificateAuthorityArn pulumix.Input[string]
	// AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
	Principal pulumix.Input[string]
	// ID of the calling account
	SourceAccount pulumix.Input[*string]
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionArgs)(nil)).Elem()
}

type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

func (o PermissionOutput) ToOutput(ctx context.Context) pulumix.Output[Permission] {
	return pulumix.Output[Permission]{
		OutputState: o.OutputState,
	}
}

// Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
func (o PermissionOutput) Actions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Permission](o, func(v Permission) pulumix.ArrayOutput[string] { return v.Actions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// ARN of the CA that grants the permissions.
func (o PermissionOutput) CertificateAuthorityArn() pulumix.Output[string] {
	value := pulumix.Apply[Permission](o, func(v Permission) pulumix.Output[string] { return v.CertificateAuthorityArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// IAM policy that is associated with the permission.
func (o PermissionOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[Permission](o, func(v Permission) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
func (o PermissionOutput) Principal() pulumix.Output[string] {
	value := pulumix.Apply[Permission](o, func(v Permission) pulumix.Output[string] { return v.Principal })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the calling account
func (o PermissionOutput) SourceAccount() pulumix.Output[string] {
	value := pulumix.Apply[Permission](o, func(v Permission) pulumix.Output[string] { return v.SourceAccount })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PermissionOutput{})
}
