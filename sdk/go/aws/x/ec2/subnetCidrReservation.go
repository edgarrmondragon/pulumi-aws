// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a subnet CIDR reservation resource.
type SubnetCidrReservation struct {
	pulumi.CustomResourceState

	// The CIDR block for the reservation.
	CidrBlock pulumix.Output[string] `pulumi:"cidrBlock"`
	// A brief description of the reservation.
	Description pulumix.Output[*string] `pulumi:"description"`
	// ID of the AWS account that owns this CIDR reservation.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// The type of reservation to create. Valid values: `explicit`, `prefix`
	ReservationType pulumix.Output[string] `pulumi:"reservationType"`
	// The ID of the subnet to create the reservation for.
	SubnetId pulumix.Output[string] `pulumi:"subnetId"`
}

// NewSubnetCidrReservation registers a new resource with the given unique name, arguments, and options.
func NewSubnetCidrReservation(ctx *pulumi.Context,
	name string, args *SubnetCidrReservationArgs, opts ...pulumi.ResourceOption) (*SubnetCidrReservation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.ReservationType == nil {
		return nil, errors.New("invalid value for required argument 'ReservationType'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubnetCidrReservation
	err := ctx.RegisterResource("aws:ec2/subnetCidrReservation:SubnetCidrReservation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetCidrReservation gets an existing SubnetCidrReservation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetCidrReservation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetCidrReservationState, opts ...pulumi.ResourceOption) (*SubnetCidrReservation, error) {
	var resource SubnetCidrReservation
	err := ctx.ReadResource("aws:ec2/subnetCidrReservation:SubnetCidrReservation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetCidrReservation resources.
type subnetCidrReservationState struct {
	// The CIDR block for the reservation.
	CidrBlock *string `pulumi:"cidrBlock"`
	// A brief description of the reservation.
	Description *string `pulumi:"description"`
	// ID of the AWS account that owns this CIDR reservation.
	OwnerId *string `pulumi:"ownerId"`
	// The type of reservation to create. Valid values: `explicit`, `prefix`
	ReservationType *string `pulumi:"reservationType"`
	// The ID of the subnet to create the reservation for.
	SubnetId *string `pulumi:"subnetId"`
}

type SubnetCidrReservationState struct {
	// The CIDR block for the reservation.
	CidrBlock pulumix.Input[*string]
	// A brief description of the reservation.
	Description pulumix.Input[*string]
	// ID of the AWS account that owns this CIDR reservation.
	OwnerId pulumix.Input[*string]
	// The type of reservation to create. Valid values: `explicit`, `prefix`
	ReservationType pulumix.Input[*string]
	// The ID of the subnet to create the reservation for.
	SubnetId pulumix.Input[*string]
}

func (SubnetCidrReservationState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetCidrReservationState)(nil)).Elem()
}

type subnetCidrReservationArgs struct {
	// The CIDR block for the reservation.
	CidrBlock string `pulumi:"cidrBlock"`
	// A brief description of the reservation.
	Description *string `pulumi:"description"`
	// The type of reservation to create. Valid values: `explicit`, `prefix`
	ReservationType string `pulumi:"reservationType"`
	// The ID of the subnet to create the reservation for.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a SubnetCidrReservation resource.
type SubnetCidrReservationArgs struct {
	// The CIDR block for the reservation.
	CidrBlock pulumix.Input[string]
	// A brief description of the reservation.
	Description pulumix.Input[*string]
	// The type of reservation to create. Valid values: `explicit`, `prefix`
	ReservationType pulumix.Input[string]
	// The ID of the subnet to create the reservation for.
	SubnetId pulumix.Input[string]
}

func (SubnetCidrReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetCidrReservationArgs)(nil)).Elem()
}

type SubnetCidrReservationOutput struct{ *pulumi.OutputState }

func (SubnetCidrReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetCidrReservation)(nil)).Elem()
}

func (o SubnetCidrReservationOutput) ToSubnetCidrReservationOutput() SubnetCidrReservationOutput {
	return o
}

func (o SubnetCidrReservationOutput) ToSubnetCidrReservationOutputWithContext(ctx context.Context) SubnetCidrReservationOutput {
	return o
}

func (o SubnetCidrReservationOutput) ToOutput(ctx context.Context) pulumix.Output[SubnetCidrReservation] {
	return pulumix.Output[SubnetCidrReservation]{
		OutputState: o.OutputState,
	}
}

// The CIDR block for the reservation.
func (o SubnetCidrReservationOutput) CidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[SubnetCidrReservation](o, func(v SubnetCidrReservation) pulumix.Output[string] { return v.CidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A brief description of the reservation.
func (o SubnetCidrReservationOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[SubnetCidrReservation](o, func(v SubnetCidrReservation) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ID of the AWS account that owns this CIDR reservation.
func (o SubnetCidrReservationOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[SubnetCidrReservation](o, func(v SubnetCidrReservation) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of reservation to create. Valid values: `explicit`, `prefix`
func (o SubnetCidrReservationOutput) ReservationType() pulumix.Output[string] {
	value := pulumix.Apply[SubnetCidrReservation](o, func(v SubnetCidrReservation) pulumix.Output[string] { return v.ReservationType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the subnet to create the reservation for.
func (o SubnetCidrReservationOutput) SubnetId() pulumix.Output[string] {
	value := pulumix.Apply[SubnetCidrReservation](o, func(v SubnetCidrReservation) pulumix.Output[string] { return v.SubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SubnetCidrReservationOutput{})
}
