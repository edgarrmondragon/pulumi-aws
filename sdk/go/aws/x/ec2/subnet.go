// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an VPC subnet resource.
//
// > **NOTE:** Due to [AWS Lambda improved VPC networking changes that began deploying in September 2019](https://aws.amazon.com/blogs/compute/announcing-improved-vpc-networking-for-aws-lambda-functions/), subnets associated with Lambda Functions can take up to 45 minutes to successfully delete.
type Subnet struct {
	pulumi.CustomResourceState

	// The ARN of the subnet.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Specify true to indicate
	// that network interfaces created in the specified subnet should be
	// assigned an IPv6 address. Default is `false`
	AssignIpv6AddressOnCreation pulumix.Output[*bool] `pulumi:"assignIpv6AddressOnCreation"`
	// AZ for the subnet.
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	// AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use `availabilityZone` instead.
	AvailabilityZoneId pulumix.Output[string] `pulumi:"availabilityZoneId"`
	// The IPv4 CIDR block for the subnet.
	CidrBlock pulumix.Output[*string] `pulumi:"cidrBlock"`
	// The customer owned IPv4 address pool. Typically used with the `mapCustomerOwnedIpOnLaunch` argument. The `outpostArn` argument must be specified when configured.
	CustomerOwnedIpv4Pool pulumix.Output[*string] `pulumi:"customerOwnedIpv4Pool"`
	// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `false`.
	EnableDns64 pulumix.Output[*bool] `pulumi:"enableDns64"`
	// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
	EnableLniAtDeviceIndex pulumix.Output[*int] `pulumi:"enableLniAtDeviceIndex"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`.
	EnableResourceNameDnsARecordOnLaunch pulumix.Output[*bool] `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `false`.
	EnableResourceNameDnsAaaaRecordOnLaunch pulumix.Output[*bool] `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	// The IPv6 network range for the subnet,
	// in CIDR notation. The subnet size must use a /64 prefix length.
	Ipv6CidrBlock pulumix.Output[*string] `pulumi:"ipv6CidrBlock"`
	// The association ID for the IPv6 CIDR block.
	Ipv6CidrBlockAssociationId pulumix.Output[string] `pulumi:"ipv6CidrBlockAssociationId"`
	// Indicates whether to create an IPv6-only subnet. Default: `false`.
	Ipv6Native pulumix.Output[*bool] `pulumi:"ipv6Native"`
	// Specify `true` to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customerOwnedIpv4Pool` and `outpostArn` arguments must be specified when set to `true`. Default is `false`.
	MapCustomerOwnedIpOnLaunch pulumix.Output[*bool] `pulumi:"mapCustomerOwnedIpOnLaunch"`
	// Specify true to indicate
	// that instances launched into the subnet should be assigned
	// a public IP address. Default is `false`.
	MapPublicIpOnLaunch pulumix.Output[*bool] `pulumi:"mapPublicIpOnLaunch"`
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn pulumix.Output[*string] `pulumi:"outpostArn"`
	// The ID of the AWS account that owns the subnet.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`.
	PrivateDnsHostnameTypeOnLaunch pulumix.Output[string] `pulumi:"privateDnsHostnameTypeOnLaunch"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The VPC ID.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("aws:ec2/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("aws:ec2/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// The ARN of the subnet.
	Arn *string `pulumi:"arn"`
	// Specify true to indicate
	// that network interfaces created in the specified subnet should be
	// assigned an IPv6 address. Default is `false`
	AssignIpv6AddressOnCreation *bool `pulumi:"assignIpv6AddressOnCreation"`
	// AZ for the subnet.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use `availabilityZone` instead.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// The IPv4 CIDR block for the subnet.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The customer owned IPv4 address pool. Typically used with the `mapCustomerOwnedIpOnLaunch` argument. The `outpostArn` argument must be specified when configured.
	CustomerOwnedIpv4Pool *string `pulumi:"customerOwnedIpv4Pool"`
	// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `false`.
	EnableDns64 *bool `pulumi:"enableDns64"`
	// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
	EnableLniAtDeviceIndex *int `pulumi:"enableLniAtDeviceIndex"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`.
	EnableResourceNameDnsARecordOnLaunch *bool `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `false`.
	EnableResourceNameDnsAaaaRecordOnLaunch *bool `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	// The IPv6 network range for the subnet,
	// in CIDR notation. The subnet size must use a /64 prefix length.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The association ID for the IPv6 CIDR block.
	Ipv6CidrBlockAssociationId *string `pulumi:"ipv6CidrBlockAssociationId"`
	// Indicates whether to create an IPv6-only subnet. Default: `false`.
	Ipv6Native *bool `pulumi:"ipv6Native"`
	// Specify `true` to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customerOwnedIpv4Pool` and `outpostArn` arguments must be specified when set to `true`. Default is `false`.
	MapCustomerOwnedIpOnLaunch *bool `pulumi:"mapCustomerOwnedIpOnLaunch"`
	// Specify true to indicate
	// that instances launched into the subnet should be assigned
	// a public IP address. Default is `false`.
	MapPublicIpOnLaunch *bool `pulumi:"mapPublicIpOnLaunch"`
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn *string `pulumi:"outpostArn"`
	// The ID of the AWS account that owns the subnet.
	OwnerId *string `pulumi:"ownerId"`
	// The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`.
	PrivateDnsHostnameTypeOnLaunch *string `pulumi:"privateDnsHostnameTypeOnLaunch"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The VPC ID.
	VpcId *string `pulumi:"vpcId"`
}

type SubnetState struct {
	// The ARN of the subnet.
	Arn pulumix.Input[*string]
	// Specify true to indicate
	// that network interfaces created in the specified subnet should be
	// assigned an IPv6 address. Default is `false`
	AssignIpv6AddressOnCreation pulumix.Input[*bool]
	// AZ for the subnet.
	AvailabilityZone pulumix.Input[*string]
	// AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use `availabilityZone` instead.
	AvailabilityZoneId pulumix.Input[*string]
	// The IPv4 CIDR block for the subnet.
	CidrBlock pulumix.Input[*string]
	// The customer owned IPv4 address pool. Typically used with the `mapCustomerOwnedIpOnLaunch` argument. The `outpostArn` argument must be specified when configured.
	CustomerOwnedIpv4Pool pulumix.Input[*string]
	// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `false`.
	EnableDns64 pulumix.Input[*bool]
	// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
	EnableLniAtDeviceIndex pulumix.Input[*int]
	// Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`.
	EnableResourceNameDnsARecordOnLaunch pulumix.Input[*bool]
	// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `false`.
	EnableResourceNameDnsAaaaRecordOnLaunch pulumix.Input[*bool]
	// The IPv6 network range for the subnet,
	// in CIDR notation. The subnet size must use a /64 prefix length.
	Ipv6CidrBlock pulumix.Input[*string]
	// The association ID for the IPv6 CIDR block.
	Ipv6CidrBlockAssociationId pulumix.Input[*string]
	// Indicates whether to create an IPv6-only subnet. Default: `false`.
	Ipv6Native pulumix.Input[*bool]
	// Specify `true` to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customerOwnedIpv4Pool` and `outpostArn` arguments must be specified when set to `true`. Default is `false`.
	MapCustomerOwnedIpOnLaunch pulumix.Input[*bool]
	// Specify true to indicate
	// that instances launched into the subnet should be assigned
	// a public IP address. Default is `false`.
	MapPublicIpOnLaunch pulumix.Input[*bool]
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn pulumix.Input[*string]
	// The ID of the AWS account that owns the subnet.
	OwnerId pulumix.Input[*string]
	// The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`.
	PrivateDnsHostnameTypeOnLaunch pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The VPC ID.
	VpcId pulumix.Input[*string]
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// Specify true to indicate
	// that network interfaces created in the specified subnet should be
	// assigned an IPv6 address. Default is `false`
	AssignIpv6AddressOnCreation *bool `pulumi:"assignIpv6AddressOnCreation"`
	// AZ for the subnet.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use `availabilityZone` instead.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// The IPv4 CIDR block for the subnet.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The customer owned IPv4 address pool. Typically used with the `mapCustomerOwnedIpOnLaunch` argument. The `outpostArn` argument must be specified when configured.
	CustomerOwnedIpv4Pool *string `pulumi:"customerOwnedIpv4Pool"`
	// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `false`.
	EnableDns64 *bool `pulumi:"enableDns64"`
	// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
	EnableLniAtDeviceIndex *int `pulumi:"enableLniAtDeviceIndex"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`.
	EnableResourceNameDnsARecordOnLaunch *bool `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `false`.
	EnableResourceNameDnsAaaaRecordOnLaunch *bool `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	// The IPv6 network range for the subnet,
	// in CIDR notation. The subnet size must use a /64 prefix length.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// Indicates whether to create an IPv6-only subnet. Default: `false`.
	Ipv6Native *bool `pulumi:"ipv6Native"`
	// Specify `true` to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customerOwnedIpv4Pool` and `outpostArn` arguments must be specified when set to `true`. Default is `false`.
	MapCustomerOwnedIpOnLaunch *bool `pulumi:"mapCustomerOwnedIpOnLaunch"`
	// Specify true to indicate
	// that instances launched into the subnet should be assigned
	// a public IP address. Default is `false`.
	MapPublicIpOnLaunch *bool `pulumi:"mapPublicIpOnLaunch"`
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn *string `pulumi:"outpostArn"`
	// The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`.
	PrivateDnsHostnameTypeOnLaunch *string `pulumi:"privateDnsHostnameTypeOnLaunch"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The VPC ID.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// Specify true to indicate
	// that network interfaces created in the specified subnet should be
	// assigned an IPv6 address. Default is `false`
	AssignIpv6AddressOnCreation pulumix.Input[*bool]
	// AZ for the subnet.
	AvailabilityZone pulumix.Input[*string]
	// AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use `availabilityZone` instead.
	AvailabilityZoneId pulumix.Input[*string]
	// The IPv4 CIDR block for the subnet.
	CidrBlock pulumix.Input[*string]
	// The customer owned IPv4 address pool. Typically used with the `mapCustomerOwnedIpOnLaunch` argument. The `outpostArn` argument must be specified when configured.
	CustomerOwnedIpv4Pool pulumix.Input[*string]
	// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `false`.
	EnableDns64 pulumix.Input[*bool]
	// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
	EnableLniAtDeviceIndex pulumix.Input[*int]
	// Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`.
	EnableResourceNameDnsARecordOnLaunch pulumix.Input[*bool]
	// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `false`.
	EnableResourceNameDnsAaaaRecordOnLaunch pulumix.Input[*bool]
	// The IPv6 network range for the subnet,
	// in CIDR notation. The subnet size must use a /64 prefix length.
	Ipv6CidrBlock pulumix.Input[*string]
	// Indicates whether to create an IPv6-only subnet. Default: `false`.
	Ipv6Native pulumix.Input[*bool]
	// Specify `true` to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customerOwnedIpv4Pool` and `outpostArn` arguments must be specified when set to `true`. Default is `false`.
	MapCustomerOwnedIpOnLaunch pulumix.Input[*bool]
	// Specify true to indicate
	// that instances launched into the subnet should be assigned
	// a public IP address. Default is `false`.
	MapPublicIpOnLaunch pulumix.Input[*bool]
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn pulumix.Input[*string]
	// The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`.
	PrivateDnsHostnameTypeOnLaunch pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The VPC ID.
	VpcId pulumix.Input[string]
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

func (o SubnetOutput) ToOutput(ctx context.Context) pulumix.Output[Subnet] {
	return pulumix.Output[Subnet]{
		OutputState: o.OutputState,
	}
}

// The ARN of the subnet.
func (o SubnetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specify true to indicate
// that network interfaces created in the specified subnet should be
// assigned an IPv6 address. Default is `false`
func (o SubnetOutput) AssignIpv6AddressOnCreation() pulumix.Output[*bool] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*bool] { return v.AssignIpv6AddressOnCreation })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// AZ for the subnet.
func (o SubnetOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use `availabilityZone` instead.
func (o SubnetOutput) AvailabilityZoneId() pulumix.Output[string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[string] { return v.AvailabilityZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR block for the subnet.
func (o SubnetOutput) CidrBlock() pulumix.Output[*string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*string] { return v.CidrBlock })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The customer owned IPv4 address pool. Typically used with the `mapCustomerOwnedIpOnLaunch` argument. The `outpostArn` argument must be specified when configured.
func (o SubnetOutput) CustomerOwnedIpv4Pool() pulumix.Output[*string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*string] { return v.CustomerOwnedIpv4Pool })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `false`.
func (o SubnetOutput) EnableDns64() pulumix.Output[*bool] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*bool] { return v.EnableDns64 })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
func (o SubnetOutput) EnableLniAtDeviceIndex() pulumix.Output[*int] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*int] { return v.EnableLniAtDeviceIndex })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`.
func (o SubnetOutput) EnableResourceNameDnsARecordOnLaunch() pulumix.Output[*bool] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*bool] { return v.EnableResourceNameDnsARecordOnLaunch })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `false`.
func (o SubnetOutput) EnableResourceNameDnsAaaaRecordOnLaunch() pulumix.Output[*bool] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*bool] { return v.EnableResourceNameDnsAaaaRecordOnLaunch })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The IPv6 network range for the subnet,
// in CIDR notation. The subnet size must use a /64 prefix length.
func (o SubnetOutput) Ipv6CidrBlock() pulumix.Output[*string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*string] { return v.Ipv6CidrBlock })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The association ID for the IPv6 CIDR block.
func (o SubnetOutput) Ipv6CidrBlockAssociationId() pulumix.Output[string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[string] { return v.Ipv6CidrBlockAssociationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether to create an IPv6-only subnet. Default: `false`.
func (o SubnetOutput) Ipv6Native() pulumix.Output[*bool] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*bool] { return v.Ipv6Native })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Specify `true` to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customerOwnedIpv4Pool` and `outpostArn` arguments must be specified when set to `true`. Default is `false`.
func (o SubnetOutput) MapCustomerOwnedIpOnLaunch() pulumix.Output[*bool] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*bool] { return v.MapCustomerOwnedIpOnLaunch })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Specify true to indicate
// that instances launched into the subnet should be assigned
// a public IP address. Default is `false`.
func (o SubnetOutput) MapPublicIpOnLaunch() pulumix.Output[*bool] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*bool] { return v.MapPublicIpOnLaunch })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The Amazon Resource Name (ARN) of the Outpost.
func (o SubnetOutput) OutpostArn() pulumix.Output[*string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[*string] { return v.OutpostArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the AWS account that owns the subnet.
func (o SubnetOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`.
func (o SubnetOutput) PrivateDnsHostnameTypeOnLaunch() pulumix.Output[string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[string] { return v.PrivateDnsHostnameTypeOnLaunch })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SubnetOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SubnetOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The VPC ID.
func (o SubnetOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[Subnet](o, func(v Subnet) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SubnetOutput{})
}
