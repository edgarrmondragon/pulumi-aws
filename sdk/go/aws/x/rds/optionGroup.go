// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an RDS DB option group resource. Documentation of the available options for various RDS engines can be found at:
//
// * [MariaDB Options](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.MariaDB.Options.html)
// * [Microsoft SQL Server Options](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.SQLServer.Options.html)
// * [MySQL Options](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.MySQL.Options.html)
// * [Oracle Options](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.Options.html)
type OptionGroup struct {
	pulumi.CustomResourceState

	// The ARN of the db option group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Specifies the name of the engine that this option group should be associated with.
	EngineName pulumix.Output[string] `pulumi:"engineName"`
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion pulumix.Output[string] `pulumi:"majorEngineVersion"`
	// The Name of the setting.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// The description of the option group. Defaults to "Managed by Pulumi".
	OptionGroupDescription pulumix.Output[string] `pulumi:"optionGroupDescription"`
	// A list of Options to apply.
	Options pulumix.GArrayOutput[OptionGroupOption, OptionGroupOptionOutput] `pulumi:"options"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewOptionGroup registers a new resource with the given unique name, arguments, and options.
func NewOptionGroup(ctx *pulumi.Context,
	name string, args *OptionGroupArgs, opts ...pulumi.ResourceOption) (*OptionGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineName == nil {
		return nil, errors.New("invalid value for required argument 'EngineName'")
	}
	if args.MajorEngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'MajorEngineVersion'")
	}
	if args.OptionGroupDescription == nil {
		args.OptionGroupDescription = pulumix.Ptr("Managed by Pulumi")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OptionGroup
	err := ctx.RegisterResource("aws:rds/optionGroup:OptionGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOptionGroup gets an existing OptionGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOptionGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OptionGroupState, opts ...pulumi.ResourceOption) (*OptionGroup, error) {
	var resource OptionGroup
	err := ctx.ReadResource("aws:rds/optionGroup:OptionGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OptionGroup resources.
type optionGroupState struct {
	// The ARN of the db option group.
	Arn *string `pulumi:"arn"`
	// Specifies the name of the engine that this option group should be associated with.
	EngineName *string `pulumi:"engineName"`
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion *string `pulumi:"majorEngineVersion"`
	// The Name of the setting.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
	NamePrefix *string `pulumi:"namePrefix"`
	// The description of the option group. Defaults to "Managed by Pulumi".
	OptionGroupDescription *string `pulumi:"optionGroupDescription"`
	// A list of Options to apply.
	Options []OptionGroupOption `pulumi:"options"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type OptionGroupState struct {
	// The ARN of the db option group.
	Arn pulumix.Input[*string]
	// Specifies the name of the engine that this option group should be associated with.
	EngineName pulumix.Input[*string]
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion pulumix.Input[*string]
	// The Name of the setting.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
	NamePrefix pulumix.Input[*string]
	// The description of the option group. Defaults to "Managed by Pulumi".
	OptionGroupDescription pulumix.Input[*string]
	// A list of Options to apply.
	Options pulumix.Input[[]*OptionGroupOptionArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (OptionGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*optionGroupState)(nil)).Elem()
}

type optionGroupArgs struct {
	// Specifies the name of the engine that this option group should be associated with.
	EngineName string `pulumi:"engineName"`
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion string `pulumi:"majorEngineVersion"`
	// The Name of the setting.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
	NamePrefix *string `pulumi:"namePrefix"`
	// The description of the option group. Defaults to "Managed by Pulumi".
	OptionGroupDescription *string `pulumi:"optionGroupDescription"`
	// A list of Options to apply.
	Options []OptionGroupOption `pulumi:"options"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a OptionGroup resource.
type OptionGroupArgs struct {
	// Specifies the name of the engine that this option group should be associated with.
	EngineName pulumix.Input[string]
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion pulumix.Input[string]
	// The Name of the setting.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
	NamePrefix pulumix.Input[*string]
	// The description of the option group. Defaults to "Managed by Pulumi".
	OptionGroupDescription pulumix.Input[*string]
	// A list of Options to apply.
	Options pulumix.Input[[]*OptionGroupOptionArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (OptionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*optionGroupArgs)(nil)).Elem()
}

type OptionGroupOutput struct{ *pulumi.OutputState }

func (OptionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroup)(nil)).Elem()
}

func (o OptionGroupOutput) ToOptionGroupOutput() OptionGroupOutput {
	return o
}

func (o OptionGroupOutput) ToOptionGroupOutputWithContext(ctx context.Context) OptionGroupOutput {
	return o
}

func (o OptionGroupOutput) ToOutput(ctx context.Context) pulumix.Output[OptionGroup] {
	return pulumix.Output[OptionGroup]{
		OutputState: o.OutputState,
	}
}

// The ARN of the db option group.
func (o OptionGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[OptionGroup](o, func(v OptionGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the name of the engine that this option group should be associated with.
func (o OptionGroupOutput) EngineName() pulumix.Output[string] {
	value := pulumix.Apply[OptionGroup](o, func(v OptionGroup) pulumix.Output[string] { return v.EngineName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the major version of the engine that this option group should be associated with.
func (o OptionGroupOutput) MajorEngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[OptionGroup](o, func(v OptionGroup) pulumix.Output[string] { return v.MajorEngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Name of the setting.
func (o OptionGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[OptionGroup](o, func(v OptionGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
func (o OptionGroupOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[OptionGroup](o, func(v OptionGroup) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description of the option group. Defaults to "Managed by Pulumi".
func (o OptionGroupOutput) OptionGroupDescription() pulumix.Output[string] {
	value := pulumix.Apply[OptionGroup](o, func(v OptionGroup) pulumix.Output[string] { return v.OptionGroupDescription })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of Options to apply.
func (o OptionGroupOutput) Options() pulumix.GArrayOutput[OptionGroupOption, OptionGroupOptionOutput] {
	value := pulumix.Apply[OptionGroup](o, func(v OptionGroup) pulumix.GArrayOutput[OptionGroupOption, OptionGroupOptionOutput] { return v.Options })
	unwrapped := pulumix.Flatten[[]OptionGroupOption, pulumix.GArrayOutput[OptionGroupOption, OptionGroupOptionOutput]](value)
	return pulumix.GArrayOutput[OptionGroupOption, OptionGroupOptionOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o OptionGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[OptionGroup](o, func(v OptionGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o OptionGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[OptionGroup](o, func(v OptionGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(OptionGroupOutput{})
}
