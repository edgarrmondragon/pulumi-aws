// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Adds the specified user to the specified group.
type UserInGroup struct {
	pulumi.CustomResourceState

	// The name of the group to which the user is to be added.
	GroupName pulumix.Output[string] `pulumi:"groupName"`
	// The user pool ID of the user and group.
	UserPoolId pulumix.Output[string] `pulumi:"userPoolId"`
	// The username of the user to be added to the group.
	Username pulumix.Output[string] `pulumi:"username"`
}

// NewUserInGroup registers a new resource with the given unique name, arguments, and options.
func NewUserInGroup(ctx *pulumi.Context,
	name string, args *UserInGroupArgs, opts ...pulumi.ResourceOption) (*UserInGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserInGroup
	err := ctx.RegisterResource("aws:cognito/userInGroup:UserInGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserInGroup gets an existing UserInGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserInGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserInGroupState, opts ...pulumi.ResourceOption) (*UserInGroup, error) {
	var resource UserInGroup
	err := ctx.ReadResource("aws:cognito/userInGroup:UserInGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserInGroup resources.
type userInGroupState struct {
	// The name of the group to which the user is to be added.
	GroupName *string `pulumi:"groupName"`
	// The user pool ID of the user and group.
	UserPoolId *string `pulumi:"userPoolId"`
	// The username of the user to be added to the group.
	Username *string `pulumi:"username"`
}

type UserInGroupState struct {
	// The name of the group to which the user is to be added.
	GroupName pulumix.Input[*string]
	// The user pool ID of the user and group.
	UserPoolId pulumix.Input[*string]
	// The username of the user to be added to the group.
	Username pulumix.Input[*string]
}

func (UserInGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*userInGroupState)(nil)).Elem()
}

type userInGroupArgs struct {
	// The name of the group to which the user is to be added.
	GroupName string `pulumi:"groupName"`
	// The user pool ID of the user and group.
	UserPoolId string `pulumi:"userPoolId"`
	// The username of the user to be added to the group.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a UserInGroup resource.
type UserInGroupArgs struct {
	// The name of the group to which the user is to be added.
	GroupName pulumix.Input[string]
	// The user pool ID of the user and group.
	UserPoolId pulumix.Input[string]
	// The username of the user to be added to the group.
	Username pulumix.Input[string]
}

func (UserInGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userInGroupArgs)(nil)).Elem()
}

type UserInGroupOutput struct{ *pulumi.OutputState }

func (UserInGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInGroup)(nil)).Elem()
}

func (o UserInGroupOutput) ToUserInGroupOutput() UserInGroupOutput {
	return o
}

func (o UserInGroupOutput) ToUserInGroupOutputWithContext(ctx context.Context) UserInGroupOutput {
	return o
}

func (o UserInGroupOutput) ToOutput(ctx context.Context) pulumix.Output[UserInGroup] {
	return pulumix.Output[UserInGroup]{
		OutputState: o.OutputState,
	}
}

// The name of the group to which the user is to be added.
func (o UserInGroupOutput) GroupName() pulumix.Output[string] {
	value := pulumix.Apply[UserInGroup](o, func(v UserInGroup) pulumix.Output[string] { return v.GroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The user pool ID of the user and group.
func (o UserInGroupOutput) UserPoolId() pulumix.Output[string] {
	value := pulumix.Apply[UserInGroup](o, func(v UserInGroup) pulumix.Output[string] { return v.UserPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The username of the user to be added to the group.
func (o UserInGroupOutput) Username() pulumix.Output[string] {
	value := pulumix.Apply[UserInGroup](o, func(v UserInGroup) pulumix.Output[string] { return v.Username })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserInGroupOutput{})
}
