// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a revision of an ECS task definition to be used in `ecs.Service`.
type TaskDefinition struct {
	pulumi.CustomResourceState

	// Full ARN of the Task Definition (including both `family` and `revision`).
	Arn pulumix.Output[string] `pulumi:"arn"`
	// ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
	ArnWithoutRevision pulumix.Output[string] `pulumi:"arnWithoutRevision"`
	// A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
	ContainerDefinitions pulumix.Output[string] `pulumi:"containerDefinitions"`
	// Number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Cpu pulumix.Output[*string] `pulumi:"cpu"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage pulumix.GPtrOutput[TaskDefinitionEphemeralStorage, TaskDefinitionEphemeralStorageOutput] `pulumi:"ephemeralStorage"`
	// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
	ExecutionRoleArn pulumix.Output[*string] `pulumi:"executionRoleArn"`
	// A unique name for your task definition.
	//
	// The following arguments are optional:
	Family pulumix.Output[string] `pulumi:"family"`
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators pulumix.GArrayOutput[TaskDefinitionInferenceAccelerator, TaskDefinitionInferenceAcceleratorOutput] `pulumi:"inferenceAccelerators"`
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode pulumix.Output[*string] `pulumi:"ipcMode"`
	// Amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Memory pulumix.Output[*string] `pulumi:"memory"`
	// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode pulumix.Output[string] `pulumi:"networkMode"`
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode pulumix.Output[*string] `pulumi:"pidMode"`
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`. Detailed below.
	PlacementConstraints pulumix.GArrayOutput[TaskDefinitionPlacementConstraint, TaskDefinitionPlacementConstraintOutput] `pulumi:"placementConstraints"`
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration pulumix.GPtrOutput[TaskDefinitionProxyConfiguration, TaskDefinitionProxyConfigurationOutput] `pulumi:"proxyConfiguration"`
	// Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
	RequiresCompatibilities pulumix.ArrayOutput[string] `pulumi:"requiresCompatibilities"`
	// Revision of the task in a particular family.
	Revision pulumix.Output[int] `pulumi:"revision"`
	// Configuration block for runtimePlatform that containers in your task may use.
	RuntimePlatform pulumix.GPtrOutput[TaskDefinitionRuntimePlatform, TaskDefinitionRuntimePlatformOutput] `pulumi:"runtimePlatform"`
	// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
	SkipDestroy pulumix.Output[*bool] `pulumi:"skipDestroy"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	TaskRoleArn pulumix.Output[*string] `pulumi:"taskRoleArn"`
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes pulumix.GArrayOutput[TaskDefinitionVolume, TaskDefinitionVolumeOutput] `pulumi:"volumes"`
}

// NewTaskDefinition registers a new resource with the given unique name, arguments, and options.
func NewTaskDefinition(ctx *pulumi.Context,
	name string, args *TaskDefinitionArgs, opts ...pulumi.ResourceOption) (*TaskDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'ContainerDefinitions'")
	}
	if args.Family == nil {
		return nil, errors.New("invalid value for required argument 'Family'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TaskDefinition
	err := ctx.RegisterResource("aws:ecs/taskDefinition:TaskDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaskDefinition gets an existing TaskDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaskDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskDefinitionState, opts ...pulumi.ResourceOption) (*TaskDefinition, error) {
	var resource TaskDefinition
	err := ctx.ReadResource("aws:ecs/taskDefinition:TaskDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaskDefinition resources.
type taskDefinitionState struct {
	// Full ARN of the Task Definition (including both `family` and `revision`).
	Arn *string `pulumi:"arn"`
	// ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
	ArnWithoutRevision *string `pulumi:"arnWithoutRevision"`
	// A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
	ContainerDefinitions *string `pulumi:"containerDefinitions"`
	// Number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Cpu *string `pulumi:"cpu"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage *TaskDefinitionEphemeralStorage `pulumi:"ephemeralStorage"`
	// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// A unique name for your task definition.
	//
	// The following arguments are optional:
	Family *string `pulumi:"family"`
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators []TaskDefinitionInferenceAccelerator `pulumi:"inferenceAccelerators"`
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode *string `pulumi:"ipcMode"`
	// Amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Memory *string `pulumi:"memory"`
	// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode *string `pulumi:"networkMode"`
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode *string `pulumi:"pidMode"`
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`. Detailed below.
	PlacementConstraints []TaskDefinitionPlacementConstraint `pulumi:"placementConstraints"`
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration *TaskDefinitionProxyConfiguration `pulumi:"proxyConfiguration"`
	// Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
	RequiresCompatibilities []string `pulumi:"requiresCompatibilities"`
	// Revision of the task in a particular family.
	Revision *int `pulumi:"revision"`
	// Configuration block for runtimePlatform that containers in your task may use.
	RuntimePlatform *TaskDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	TaskRoleArn *string `pulumi:"taskRoleArn"`
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes []TaskDefinitionVolume `pulumi:"volumes"`
}

type TaskDefinitionState struct {
	// Full ARN of the Task Definition (including both `family` and `revision`).
	Arn pulumix.Input[*string]
	// ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
	ArnWithoutRevision pulumix.Input[*string]
	// A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
	ContainerDefinitions pulumix.Input[*string]
	// Number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Cpu pulumix.Input[*string]
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage pulumix.Input[*TaskDefinitionEphemeralStorageArgs]
	// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
	ExecutionRoleArn pulumix.Input[*string]
	// A unique name for your task definition.
	//
	// The following arguments are optional:
	Family pulumix.Input[*string]
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators pulumix.Input[[]*TaskDefinitionInferenceAcceleratorArgs]
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode pulumix.Input[*string]
	// Amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Memory pulumix.Input[*string]
	// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode pulumix.Input[*string]
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode pulumix.Input[*string]
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`. Detailed below.
	PlacementConstraints pulumix.Input[[]*TaskDefinitionPlacementConstraintArgs]
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration pulumix.Input[*TaskDefinitionProxyConfigurationArgs]
	// Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
	RequiresCompatibilities pulumix.Input[[]string]
	// Revision of the task in a particular family.
	Revision pulumix.Input[*int]
	// Configuration block for runtimePlatform that containers in your task may use.
	RuntimePlatform pulumix.Input[*TaskDefinitionRuntimePlatformArgs]
	// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
	SkipDestroy pulumix.Input[*bool]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	TaskRoleArn pulumix.Input[*string]
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes pulumix.Input[[]*TaskDefinitionVolumeArgs]
}

func (TaskDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskDefinitionState)(nil)).Elem()
}

type taskDefinitionArgs struct {
	// A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
	ContainerDefinitions string `pulumi:"containerDefinitions"`
	// Number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Cpu *string `pulumi:"cpu"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage *TaskDefinitionEphemeralStorage `pulumi:"ephemeralStorage"`
	// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// A unique name for your task definition.
	//
	// The following arguments are optional:
	Family string `pulumi:"family"`
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators []TaskDefinitionInferenceAccelerator `pulumi:"inferenceAccelerators"`
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode *string `pulumi:"ipcMode"`
	// Amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Memory *string `pulumi:"memory"`
	// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode *string `pulumi:"networkMode"`
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode *string `pulumi:"pidMode"`
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`. Detailed below.
	PlacementConstraints []TaskDefinitionPlacementConstraint `pulumi:"placementConstraints"`
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration *TaskDefinitionProxyConfiguration `pulumi:"proxyConfiguration"`
	// Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
	RequiresCompatibilities []string `pulumi:"requiresCompatibilities"`
	// Configuration block for runtimePlatform that containers in your task may use.
	RuntimePlatform *TaskDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	TaskRoleArn *string `pulumi:"taskRoleArn"`
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes []TaskDefinitionVolume `pulumi:"volumes"`
}

// The set of arguments for constructing a TaskDefinition resource.
type TaskDefinitionArgs struct {
	// A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
	ContainerDefinitions pulumix.Input[string]
	// Number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Cpu pulumix.Input[*string]
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage pulumix.Input[*TaskDefinitionEphemeralStorageArgs]
	// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
	ExecutionRoleArn pulumix.Input[*string]
	// A unique name for your task definition.
	//
	// The following arguments are optional:
	Family pulumix.Input[string]
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators pulumix.Input[[]*TaskDefinitionInferenceAcceleratorArgs]
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode pulumix.Input[*string]
	// Amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Memory pulumix.Input[*string]
	// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode pulumix.Input[*string]
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode pulumix.Input[*string]
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`. Detailed below.
	PlacementConstraints pulumix.Input[[]*TaskDefinitionPlacementConstraintArgs]
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration pulumix.Input[*TaskDefinitionProxyConfigurationArgs]
	// Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
	RequiresCompatibilities pulumix.Input[[]string]
	// Configuration block for runtimePlatform that containers in your task may use.
	RuntimePlatform pulumix.Input[*TaskDefinitionRuntimePlatformArgs]
	// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
	SkipDestroy pulumix.Input[*bool]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	TaskRoleArn pulumix.Input[*string]
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes pulumix.Input[[]*TaskDefinitionVolumeArgs]
}

func (TaskDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskDefinitionArgs)(nil)).Elem()
}

type TaskDefinitionOutput struct{ *pulumi.OutputState }

func (TaskDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinition)(nil)).Elem()
}

func (o TaskDefinitionOutput) ToTaskDefinitionOutput() TaskDefinitionOutput {
	return o
}

func (o TaskDefinitionOutput) ToTaskDefinitionOutputWithContext(ctx context.Context) TaskDefinitionOutput {
	return o
}

func (o TaskDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinition] {
	return pulumix.Output[TaskDefinition]{
		OutputState: o.OutputState,
	}
}

// Full ARN of the Task Definition (including both `family` and `revision`).
func (o TaskDefinitionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
func (o TaskDefinitionOutput) ArnWithoutRevision() pulumix.Output[string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[string] { return v.ArnWithoutRevision })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
func (o TaskDefinitionOutput) ContainerDefinitions() pulumix.Output[string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[string] { return v.ContainerDefinitions })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
func (o TaskDefinitionOutput) Cpu() pulumix.Output[*string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[*string] { return v.Cpu })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
func (o TaskDefinitionOutput) EphemeralStorage() pulumix.GPtrOutput[TaskDefinitionEphemeralStorage, TaskDefinitionEphemeralStorageOutput] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.GPtrOutput[TaskDefinitionEphemeralStorage, TaskDefinitionEphemeralStorageOutput] {
		return v.EphemeralStorage
	})
	unwrapped := pulumix.Flatten[*TaskDefinitionEphemeralStorage, pulumix.GPtrOutput[TaskDefinitionEphemeralStorage, TaskDefinitionEphemeralStorageOutput]](value)
	return pulumix.GPtrOutput[TaskDefinitionEphemeralStorage, TaskDefinitionEphemeralStorageOutput]{OutputState: unwrapped.OutputState}
}

// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
func (o TaskDefinitionOutput) ExecutionRoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[*string] { return v.ExecutionRoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A unique name for your task definition.
//
// The following arguments are optional:
func (o TaskDefinitionOutput) Family() pulumix.Output[string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[string] { return v.Family })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block(s) with Inference Accelerators settings. Detailed below.
func (o TaskDefinitionOutput) InferenceAccelerators() pulumix.GArrayOutput[TaskDefinitionInferenceAccelerator, TaskDefinitionInferenceAcceleratorOutput] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.GArrayOutput[TaskDefinitionInferenceAccelerator, TaskDefinitionInferenceAcceleratorOutput] {
		return v.InferenceAccelerators
	})
	unwrapped := pulumix.Flatten[[]TaskDefinitionInferenceAccelerator, pulumix.GArrayOutput[TaskDefinitionInferenceAccelerator, TaskDefinitionInferenceAcceleratorOutput]](value)
	return pulumix.GArrayOutput[TaskDefinitionInferenceAccelerator, TaskDefinitionInferenceAcceleratorOutput]{OutputState: unwrapped.OutputState}
}

// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
func (o TaskDefinitionOutput) IpcMode() pulumix.Output[*string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[*string] { return v.IpcMode })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
func (o TaskDefinitionOutput) Memory() pulumix.Output[*string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[*string] { return v.Memory })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
func (o TaskDefinitionOutput) NetworkMode() pulumix.Output[string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[string] { return v.NetworkMode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
func (o TaskDefinitionOutput) PidMode() pulumix.Output[*string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[*string] { return v.PidMode })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`. Detailed below.
func (o TaskDefinitionOutput) PlacementConstraints() pulumix.GArrayOutput[TaskDefinitionPlacementConstraint, TaskDefinitionPlacementConstraintOutput] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.GArrayOutput[TaskDefinitionPlacementConstraint, TaskDefinitionPlacementConstraintOutput] {
		return v.PlacementConstraints
	})
	unwrapped := pulumix.Flatten[[]TaskDefinitionPlacementConstraint, pulumix.GArrayOutput[TaskDefinitionPlacementConstraint, TaskDefinitionPlacementConstraintOutput]](value)
	return pulumix.GArrayOutput[TaskDefinitionPlacementConstraint, TaskDefinitionPlacementConstraintOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for the App Mesh proxy. Detailed below.
func (o TaskDefinitionOutput) ProxyConfiguration() pulumix.GPtrOutput[TaskDefinitionProxyConfiguration, TaskDefinitionProxyConfigurationOutput] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.GPtrOutput[TaskDefinitionProxyConfiguration, TaskDefinitionProxyConfigurationOutput] {
		return v.ProxyConfiguration
	})
	unwrapped := pulumix.Flatten[*TaskDefinitionProxyConfiguration, pulumix.GPtrOutput[TaskDefinitionProxyConfiguration, TaskDefinitionProxyConfigurationOutput]](value)
	return pulumix.GPtrOutput[TaskDefinitionProxyConfiguration, TaskDefinitionProxyConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
func (o TaskDefinitionOutput) RequiresCompatibilities() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.ArrayOutput[string] { return v.RequiresCompatibilities })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Revision of the task in a particular family.
func (o TaskDefinitionOutput) Revision() pulumix.Output[int] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[int] { return v.Revision })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Configuration block for runtimePlatform that containers in your task may use.
func (o TaskDefinitionOutput) RuntimePlatform() pulumix.GPtrOutput[TaskDefinitionRuntimePlatform, TaskDefinitionRuntimePlatformOutput] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.GPtrOutput[TaskDefinitionRuntimePlatform, TaskDefinitionRuntimePlatformOutput] {
		return v.RuntimePlatform
	})
	unwrapped := pulumix.Flatten[*TaskDefinitionRuntimePlatform, pulumix.GPtrOutput[TaskDefinitionRuntimePlatform, TaskDefinitionRuntimePlatformOutput]](value)
	return pulumix.GPtrOutput[TaskDefinitionRuntimePlatform, TaskDefinitionRuntimePlatformOutput]{OutputState: unwrapped.OutputState}
}

// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
func (o TaskDefinitionOutput) SkipDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[*bool] { return v.SkipDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TaskDefinitionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TaskDefinitionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
func (o TaskDefinitionOutput) TaskRoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.Output[*string] { return v.TaskRoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration block for volumes that containers in your task may use. Detailed below.
func (o TaskDefinitionOutput) Volumes() pulumix.GArrayOutput[TaskDefinitionVolume, TaskDefinitionVolumeOutput] {
	value := pulumix.Apply[TaskDefinition](o, func(v TaskDefinition) pulumix.GArrayOutput[TaskDefinitionVolume, TaskDefinitionVolumeOutput] {
		return v.Volumes
	})
	unwrapped := pulumix.Flatten[[]TaskDefinitionVolume, pulumix.GArrayOutput[TaskDefinitionVolume, TaskDefinitionVolumeOutput]](value)
	return pulumix.GArrayOutput[TaskDefinitionVolume, TaskDefinitionVolumeOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TaskDefinitionOutput{})
}
