// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about an EKS Cluster.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("aws:eks/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// Name of the cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and underscores (`^[0-9A-Za-z][A-Za-z0-9\-_]+$`).
	Name string `pulumi:"name"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// ARN of the cluster.
	Arn string `pulumi:"arn"`
	// Nested attribute containing `certificate-authority-data` for your cluster.
	CertificateAuthorities []GetClusterCertificateAuthority `pulumi:"certificateAuthorities"`
	// The ID of your local Amazon EKS cluster on the AWS Outpost. This attribute isn't available for an AWS EKS cluster on AWS cloud.
	ClusterId string `pulumi:"clusterId"`
	// Unix epoch time stamp in seconds for when the cluster was created.
	CreatedAt string `pulumi:"createdAt"`
	// The enabled control plane logs.
	EnabledClusterLogTypes []string `pulumi:"enabledClusterLogTypes"`
	// Endpoint for your Kubernetes API server.
	Endpoint string `pulumi:"endpoint"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Nested attribute containing identity provider information for your cluster. Only available on Kubernetes version 1.13 and 1.14 clusters created or upgraded on or after September 3, 2019. For an example using this information to enable IAM Roles for Service Accounts, see the `eks.Cluster` resource documentation.
	Identities []GetClusterIdentity `pulumi:"identities"`
	// Nested list containing Kubernetes Network Configuration.
	KubernetesNetworkConfigs []GetClusterKubernetesNetworkConfig `pulumi:"kubernetesNetworkConfigs"`
	Name                     string                              `pulumi:"name"`
	// Contains Outpost Configuration.
	OutpostConfigs []GetClusterOutpostConfig `pulumi:"outpostConfigs"`
	// Platform version for the cluster.
	PlatformVersion string `pulumi:"platformVersion"`
	// ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf.
	RoleArn string `pulumi:"roleArn"`
	// Status of the EKS cluster. One of `CREATING`, `ACTIVE`, `DELETING`, `FAILED`.
	Status string `pulumi:"status"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Kubernetes server version for the cluster.
	Version string `pulumi:"version"`
	// Nested list containing VPC configuration for the cluster.
	VpcConfig GetClusterVpcConfig `pulumi:"vpcConfig"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	outputResult := pulumix.ApplyErr[*LookupClusterArgs](args.ToOutput(), func(plainArgs *LookupClusterArgs) (*LookupClusterResult, error) {
		return LookupCluster(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupClusterResultOutput, *LookupClusterResult](outputResult)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// Name of the cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and underscores (`^[0-9A-Za-z][A-Za-z0-9\-_]+$`).
	Name pulumix.Input[string] `pulumi:"name"`
	// Key-value map of resource tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupClusterOutputArgs) ToOutput() pulumix.Output[*LookupClusterArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupClusterArgs {
		return &LookupClusterArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToOutput(context.Context) pulumix.Output[*LookupClusterResult] {
	return pulumix.Output[*LookupClusterResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupClusterResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Arn })
}

func (o LookupClusterResultOutput) CertificateAuthorities() pulumix.GArrayOutput[GetClusterCertificateAuthority, GetClusterCertificateAuthorityOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterCertificateAuthority { return v.CertificateAuthorities })
	return pulumix.GArrayOutput[GetClusterCertificateAuthority, GetClusterCertificateAuthorityOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) ClusterId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterId })
}

func (o LookupClusterResultOutput) CreatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.CreatedAt })
}

func (o LookupClusterResultOutput) EnabledClusterLogTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.EnabledClusterLogTypes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Endpoint })
}

func (o LookupClusterResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Id })
}

func (o LookupClusterResultOutput) Identities() pulumix.GArrayOutput[GetClusterIdentity, GetClusterIdentityOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterIdentity { return v.Identities })
	return pulumix.GArrayOutput[GetClusterIdentity, GetClusterIdentityOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) KubernetesNetworkConfigs() pulumix.GArrayOutput[GetClusterKubernetesNetworkConfig, GetClusterKubernetesNetworkConfigOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterKubernetesNetworkConfig { return v.KubernetesNetworkConfigs })
	return pulumix.GArrayOutput[GetClusterKubernetesNetworkConfig, GetClusterKubernetesNetworkConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Name })
}

func (o LookupClusterResultOutput) OutpostConfigs() pulumix.GArrayOutput[GetClusterOutpostConfig, GetClusterOutpostConfigOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterOutpostConfig { return v.OutpostConfigs })
	return pulumix.GArrayOutput[GetClusterOutpostConfig, GetClusterOutpostConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) PlatformVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.PlatformVersion })
}

func (o LookupClusterResultOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.RoleArn })
}

func (o LookupClusterResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Status })
}

func (o LookupClusterResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Version })
}

func (o LookupClusterResultOutput) VpcConfig() pulumix.GPtrOutput[GetClusterVpcConfig, GetClusterVpcConfigOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) GetClusterVpcConfig { return v.VpcConfig })
	return pulumix.GPtrOutput[GetClusterVpcConfig, GetClusterVpcConfigOutput]{
		OutputState: value.OutputState,
	}
}
