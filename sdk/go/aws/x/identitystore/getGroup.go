// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitystore

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get an Identity Store Group.
func LookupGroup(ctx *pulumi.Context, args *LookupGroupArgs, opts ...pulumi.InvokeOption) (*LookupGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGroupResult
	err := ctx.Invoke("aws:identitystore/getGroup:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroup.
type LookupGroupArgs struct {
	// A unique identifier for the group that is not the primary identifier. Conflicts with `groupId`. Detailed below.
	AlternateIdentifier *GetGroupAlternateIdentifier `pulumi:"alternateIdentifier"`
	// The identifier for a group in the Identity Store.
	//
	// > Exactly one of the above arguments must be provided.
	GroupId *string `pulumi:"groupId"`
	// Identity Store ID associated with the Single Sign-On Instance.
	//
	// The following arguments are optional:
	IdentityStoreId string `pulumi:"identityStoreId"`
}

// A collection of values returned by getGroup.
type LookupGroupResult struct {
	AlternateIdentifier *GetGroupAlternateIdentifier `pulumi:"alternateIdentifier"`
	// Description of the specified group.
	Description string `pulumi:"description"`
	// Group's display name value.
	DisplayName string `pulumi:"displayName"`
	// List of identifiers issued to this resource by an external identity provider.
	ExternalIds []GetGroupExternalId `pulumi:"externalIds"`
	GroupId     string               `pulumi:"groupId"`
	// The provider-assigned unique ID for this managed resource.
	Id              string `pulumi:"id"`
	IdentityStoreId string `pulumi:"identityStoreId"`
}

func LookupGroupOutput(ctx *pulumi.Context, args LookupGroupOutputArgs, opts ...pulumi.InvokeOption) LookupGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupGroupArgs](args.ToOutput(), func(plainArgs *LookupGroupArgs) (*LookupGroupResult, error) {
		return LookupGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupGroupResultOutput, *LookupGroupResult](outputResult)
}

// A collection of arguments for invoking getGroup.
type LookupGroupOutputArgs struct {
	// A unique identifier for the group that is not the primary identifier. Conflicts with `groupId`. Detailed below.
	AlternateIdentifier pulumix.Input[*GetGroupAlternateIdentifierArgs] `pulumi:"alternateIdentifier"`
	// The identifier for a group in the Identity Store.
	//
	// > Exactly one of the above arguments must be provided.
	GroupId pulumix.Input[*string] `pulumi:"groupId"`
	// Identity Store ID associated with the Single Sign-On Instance.
	//
	// The following arguments are optional:
	IdentityStoreId pulumix.Input[string] `pulumi:"identityStoreId"`
}

func (args LookupGroupOutputArgs) ToOutput() pulumix.Output[*LookupGroupArgs] {
	allArgs := pulumix.All(
		args.AlternateIdentifier.ToOutput(context.Background()).AsAny(),
		args.GroupId.ToOutput(context.Background()).AsAny(),
		args.IdentityStoreId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupGroupArgs {
		return &LookupGroupArgs{
			AlternateIdentifier: resolvedArgs[0].(*GetGroupAlternateIdentifier),
			GroupId:             resolvedArgs[1].(*string),
			IdentityStoreId:     resolvedArgs[2].(string),
		}
	})
}

type LookupGroupResultOutput struct{ *pulumi.OutputState }

func (LookupGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupResult)(nil)).Elem()
}

func (o LookupGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupGroupResult] {
	return pulumix.Output[*LookupGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupGroupResultOutput) AlternateIdentifier() pulumix.GPtrOutput[GetGroupAlternateIdentifier, GetGroupAlternateIdentifierOutput] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) *GetGroupAlternateIdentifier { return v.AlternateIdentifier })
	return pulumix.GPtrOutput[GetGroupAlternateIdentifier, GetGroupAlternateIdentifierOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Description })
}

func (o LookupGroupResultOutput) DisplayName() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.DisplayName })
}

func (o LookupGroupResultOutput) ExternalIds() pulumix.GArrayOutput[GetGroupExternalId, GetGroupExternalIdOutput] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []GetGroupExternalId { return v.ExternalIds })
	return pulumix.GArrayOutput[GetGroupExternalId, GetGroupExternalIdOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) GroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.GroupId })
}

func (o LookupGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Id })
}

func (o LookupGroupResultOutput) IdentityStoreId() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.IdentityStoreId })
}
