// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a DB Cluster Snapshot for use when provisioning DB clusters.
//
// > **NOTE:** This data source does not apply to snapshots created on DB Instances.
// See the `rds.Snapshot` data source for DB Instance snapshots.
func LookupClusterSnapshot(ctx *pulumi.Context, args *LookupClusterSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupClusterSnapshotResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterSnapshotResult
	err := ctx.Invoke("aws:rds/getClusterSnapshot:getClusterSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusterSnapshot.
type LookupClusterSnapshotArgs struct {
	// Returns the list of snapshots created by the specific db_cluster
	DbClusterIdentifier *string `pulumi:"dbClusterIdentifier"`
	// Returns information on a specific snapshot_id.
	DbClusterSnapshotIdentifier *string `pulumi:"dbClusterSnapshotIdentifier"`
	// Set this value to true to include manual DB Cluster Snapshots that are public and can be
	// copied or restored by any AWS account, otherwise set this value to false. The default is `false`.
	IncludePublic *bool `pulumi:"includePublic"`
	// Set this value to true to include shared manual DB Cluster Snapshots from other
	// AWS accounts that this AWS account has been given permission to copy or restore, otherwise set this value to false.
	// The default is `false`.
	IncludeShared *bool `pulumi:"includeShared"`
	// If more than one result is returned, use the most recent Snapshot.
	MostRecent *bool `pulumi:"mostRecent"`
	// Type of snapshots to be returned. If you don't specify a SnapshotType
	// value, then both automated and manual DB cluster snapshots are returned. Shared and public DB Cluster Snapshots are not
	// included in the returned results by default. Possible values are, `automated`, `manual`, `shared`, `public` and `awsbackup`.
	SnapshotType *string `pulumi:"snapshotType"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the desired DB cluster snapshot.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getClusterSnapshot.
type LookupClusterSnapshotResult struct {
	// Allocated storage size in gigabytes (GB).
	AllocatedStorage int `pulumi:"allocatedStorage"`
	// List of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.
	DbClusterIdentifier *string `pulumi:"dbClusterIdentifier"`
	// The ARN for the DB Cluster Snapshot.
	DbClusterSnapshotArn        string  `pulumi:"dbClusterSnapshotArn"`
	DbClusterSnapshotIdentifier *string `pulumi:"dbClusterSnapshotIdentifier"`
	// Name of the database engine.
	Engine string `pulumi:"engine"`
	// Version of the database engine for this DB cluster snapshot.
	EngineVersion string `pulumi:"engineVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id            string `pulumi:"id"`
	IncludePublic *bool  `pulumi:"includePublic"`
	IncludeShared *bool  `pulumi:"includeShared"`
	// If storageEncrypted is true, the AWS KMS key identifier for the encrypted DB cluster snapshot.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// License model information for the restored DB cluster.
	LicenseModel string `pulumi:"licenseModel"`
	MostRecent   *bool  `pulumi:"mostRecent"`
	// Port that the DB cluster was listening on at the time of the snapshot.
	Port int `pulumi:"port"`
	// Time when the snapshot was taken, in Universal Coordinated Time (UTC).
	SnapshotCreateTime         string  `pulumi:"snapshotCreateTime"`
	SnapshotType               *string `pulumi:"snapshotType"`
	SourceDbClusterSnapshotArn string  `pulumi:"sourceDbClusterSnapshotArn"`
	// Status of this DB Cluster Snapshot.
	Status string `pulumi:"status"`
	// Whether the DB cluster snapshot is encrypted.
	StorageEncrypted bool `pulumi:"storageEncrypted"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
	// VPC ID associated with the DB cluster snapshot.
	VpcId string `pulumi:"vpcId"`
}

func LookupClusterSnapshotOutput(ctx *pulumi.Context, args LookupClusterSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupClusterSnapshotResultOutput {
	outputResult := pulumix.ApplyErr[*LookupClusterSnapshotArgs](args.ToOutput(), func(plainArgs *LookupClusterSnapshotArgs) (*LookupClusterSnapshotResult, error) {
		return LookupClusterSnapshot(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupClusterSnapshotResultOutput, *LookupClusterSnapshotResult](outputResult)
}

// A collection of arguments for invoking getClusterSnapshot.
type LookupClusterSnapshotOutputArgs struct {
	// Returns the list of snapshots created by the specific db_cluster
	DbClusterIdentifier pulumix.Input[*string] `pulumi:"dbClusterIdentifier"`
	// Returns information on a specific snapshot_id.
	DbClusterSnapshotIdentifier pulumix.Input[*string] `pulumi:"dbClusterSnapshotIdentifier"`
	// Set this value to true to include manual DB Cluster Snapshots that are public and can be
	// copied or restored by any AWS account, otherwise set this value to false. The default is `false`.
	IncludePublic pulumix.Input[*bool] `pulumi:"includePublic"`
	// Set this value to true to include shared manual DB Cluster Snapshots from other
	// AWS accounts that this AWS account has been given permission to copy or restore, otherwise set this value to false.
	// The default is `false`.
	IncludeShared pulumix.Input[*bool] `pulumi:"includeShared"`
	// If more than one result is returned, use the most recent Snapshot.
	MostRecent pulumix.Input[*bool] `pulumi:"mostRecent"`
	// Type of snapshots to be returned. If you don't specify a SnapshotType
	// value, then both automated and manual DB cluster snapshots are returned. Shared and public DB Cluster Snapshots are not
	// included in the returned results by default. Possible values are, `automated`, `manual`, `shared`, `public` and `awsbackup`.
	SnapshotType pulumix.Input[*string] `pulumi:"snapshotType"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the desired DB cluster snapshot.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupClusterSnapshotOutputArgs) ToOutput() pulumix.Output[*LookupClusterSnapshotArgs] {
	allArgs := pulumix.All(
		args.DbClusterIdentifier.ToOutput(context.Background()).AsAny(),
		args.DbClusterSnapshotIdentifier.ToOutput(context.Background()).AsAny(),
		args.IncludePublic.ToOutput(context.Background()).AsAny(),
		args.IncludeShared.ToOutput(context.Background()).AsAny(),
		args.MostRecent.ToOutput(context.Background()).AsAny(),
		args.SnapshotType.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupClusterSnapshotArgs {
		return &LookupClusterSnapshotArgs{
			DbClusterIdentifier:         resolvedArgs[0].(*string),
			DbClusterSnapshotIdentifier: resolvedArgs[1].(*string),
			IncludePublic:               resolvedArgs[2].(*bool),
			IncludeShared:               resolvedArgs[3].(*bool),
			MostRecent:                  resolvedArgs[4].(*bool),
			SnapshotType:                resolvedArgs[5].(*string),
			Tags:                        resolvedArgs[6].(map[string]string),
		}
	})
}

type LookupClusterSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupClusterSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterSnapshotResult)(nil)).Elem()
}

func (o LookupClusterSnapshotResultOutput) ToOutput(context.Context) pulumix.Output[*LookupClusterSnapshotResult] {
	return pulumix.Output[*LookupClusterSnapshotResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupClusterSnapshotResultOutput) AllocatedStorage() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) int { return v.AllocatedStorage })
}

func (o LookupClusterSnapshotResultOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterSnapshotResultOutput) DbClusterIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) *string { return v.DbClusterIdentifier })
}

func (o LookupClusterSnapshotResultOutput) DbClusterSnapshotArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) string { return v.DbClusterSnapshotArn })
}

func (o LookupClusterSnapshotResultOutput) DbClusterSnapshotIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) *string { return v.DbClusterSnapshotIdentifier })
}

func (o LookupClusterSnapshotResultOutput) Engine() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) string { return v.Engine })
}

func (o LookupClusterSnapshotResultOutput) EngineVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) string { return v.EngineVersion })
}

func (o LookupClusterSnapshotResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) string { return v.Id })
}

func (o LookupClusterSnapshotResultOutput) IncludePublic() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) *bool { return v.IncludePublic })
}

func (o LookupClusterSnapshotResultOutput) IncludeShared() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) *bool { return v.IncludeShared })
}

func (o LookupClusterSnapshotResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) string { return v.KmsKeyId })
}

func (o LookupClusterSnapshotResultOutput) LicenseModel() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) string { return v.LicenseModel })
}

func (o LookupClusterSnapshotResultOutput) MostRecent() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) *bool { return v.MostRecent })
}

func (o LookupClusterSnapshotResultOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) int { return v.Port })
}

func (o LookupClusterSnapshotResultOutput) SnapshotCreateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) string { return v.SnapshotCreateTime })
}

func (o LookupClusterSnapshotResultOutput) SnapshotType() pulumix.Output[*string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) *string { return v.SnapshotType })
}

func (o LookupClusterSnapshotResultOutput) SourceDbClusterSnapshotArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) string { return v.SourceDbClusterSnapshotArn })
}

func (o LookupClusterSnapshotResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) string { return v.Status })
}

func (o LookupClusterSnapshotResultOutput) StorageEncrypted() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) bool { return v.StorageEncrypted })
}

func (o LookupClusterSnapshotResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterSnapshotResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterSnapshotResult](o, func(v *LookupClusterSnapshotResult) string { return v.VpcId })
}
