// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS OpenSearch Serverless Security Policy. See AWS documentation for [encryption policies](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html#serverless-encryption-policies) and [network policies](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-network.html#serverless-network-policies).
type ServerlessSecurityPolicy struct {
	pulumi.CustomResourceState

	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Name of the policy.
	Name pulumix.Output[string] `pulumi:"name"`
	// JSON policy document to use as the content for the new policy
	Policy pulumix.Output[string] `pulumi:"policy"`
	// Version of the policy.
	PolicyVersion pulumix.Output[string] `pulumi:"policyVersion"`
	// Type of security policy. One of `encryption` or `network`.
	//
	// The following arguments are optional:
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewServerlessSecurityPolicy registers a new resource with the given unique name, arguments, and options.
func NewServerlessSecurityPolicy(ctx *pulumi.Context,
	name string, args *ServerlessSecurityPolicyArgs, opts ...pulumi.ResourceOption) (*ServerlessSecurityPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessSecurityPolicy
	err := ctx.RegisterResource("aws:opensearch/serverlessSecurityPolicy:ServerlessSecurityPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessSecurityPolicy gets an existing ServerlessSecurityPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessSecurityPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessSecurityPolicyState, opts ...pulumi.ResourceOption) (*ServerlessSecurityPolicy, error) {
	var resource ServerlessSecurityPolicy
	err := ctx.ReadResource("aws:opensearch/serverlessSecurityPolicy:ServerlessSecurityPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessSecurityPolicy resources.
type serverlessSecurityPolicyState struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description *string `pulumi:"description"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// JSON policy document to use as the content for the new policy
	Policy *string `pulumi:"policy"`
	// Version of the policy.
	PolicyVersion *string `pulumi:"policyVersion"`
	// Type of security policy. One of `encryption` or `network`.
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
}

type ServerlessSecurityPolicyState struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description pulumix.Input[*string]
	// Name of the policy.
	Name pulumix.Input[*string]
	// JSON policy document to use as the content for the new policy
	Policy pulumix.Input[*string]
	// Version of the policy.
	PolicyVersion pulumix.Input[*string]
	// Type of security policy. One of `encryption` or `network`.
	//
	// The following arguments are optional:
	Type pulumix.Input[*string]
}

func (ServerlessSecurityPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessSecurityPolicyState)(nil)).Elem()
}

type serverlessSecurityPolicyArgs struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description *string `pulumi:"description"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// JSON policy document to use as the content for the new policy
	Policy string `pulumi:"policy"`
	// Type of security policy. One of `encryption` or `network`.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ServerlessSecurityPolicy resource.
type ServerlessSecurityPolicyArgs struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description pulumix.Input[*string]
	// Name of the policy.
	Name pulumix.Input[*string]
	// JSON policy document to use as the content for the new policy
	Policy pulumix.Input[string]
	// Type of security policy. One of `encryption` or `network`.
	//
	// The following arguments are optional:
	Type pulumix.Input[string]
}

func (ServerlessSecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessSecurityPolicyArgs)(nil)).Elem()
}

type ServerlessSecurityPolicyOutput struct{ *pulumi.OutputState }

func (ServerlessSecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessSecurityPolicy)(nil)).Elem()
}

func (o ServerlessSecurityPolicyOutput) ToServerlessSecurityPolicyOutput() ServerlessSecurityPolicyOutput {
	return o
}

func (o ServerlessSecurityPolicyOutput) ToServerlessSecurityPolicyOutputWithContext(ctx context.Context) ServerlessSecurityPolicyOutput {
	return o
}

func (o ServerlessSecurityPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessSecurityPolicy] {
	return pulumix.Output[ServerlessSecurityPolicy]{
		OutputState: o.OutputState,
	}
}

// Description of the policy. Typically used to store information about the permissions defined in the policy.
func (o ServerlessSecurityPolicyOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ServerlessSecurityPolicy](o, func(v ServerlessSecurityPolicy) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the policy.
func (o ServerlessSecurityPolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessSecurityPolicy](o, func(v ServerlessSecurityPolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// JSON policy document to use as the content for the new policy
func (o ServerlessSecurityPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessSecurityPolicy](o, func(v ServerlessSecurityPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Version of the policy.
func (o ServerlessSecurityPolicyOutput) PolicyVersion() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessSecurityPolicy](o, func(v ServerlessSecurityPolicy) pulumix.Output[string] { return v.PolicyVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of security policy. One of `encryption` or `network`.
//
// The following arguments are optional:
func (o ServerlessSecurityPolicyOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessSecurityPolicy](o, func(v ServerlessSecurityPolicy) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ServerlessSecurityPolicyOutput{})
}
