// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an SES domain identity resource
type DomainIdentity struct {
	pulumi.CustomResourceState

	// The ARN of the domain identity.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The domain name to assign to SES
	Domain pulumix.Output[string] `pulumi:"domain"`
	// A code which when added to the domain as a TXT record
	// will signal to SES that the owner of the domain has authorised SES to act on
	// their behalf. The domain identity will be in state "verification pending"
	// until this is done. See the With Route53 Record example
	// for how this might be achieved when the domain is hosted in Route 53 and
	// managed by this provider.  Find out more about verifying domains in Amazon
	// SES in the [AWS SES
	// docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html).
	VerificationToken pulumix.Output[string] `pulumi:"verificationToken"`
}

// NewDomainIdentity registers a new resource with the given unique name, arguments, and options.
func NewDomainIdentity(ctx *pulumi.Context,
	name string, args *DomainIdentityArgs, opts ...pulumi.ResourceOption) (*DomainIdentity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainIdentity
	err := ctx.RegisterResource("aws:ses/domainIdentity:DomainIdentity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainIdentity gets an existing DomainIdentity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainIdentity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainIdentityState, opts ...pulumi.ResourceOption) (*DomainIdentity, error) {
	var resource DomainIdentity
	err := ctx.ReadResource("aws:ses/domainIdentity:DomainIdentity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainIdentity resources.
type domainIdentityState struct {
	// The ARN of the domain identity.
	Arn *string `pulumi:"arn"`
	// The domain name to assign to SES
	Domain *string `pulumi:"domain"`
	// A code which when added to the domain as a TXT record
	// will signal to SES that the owner of the domain has authorised SES to act on
	// their behalf. The domain identity will be in state "verification pending"
	// until this is done. See the With Route53 Record example
	// for how this might be achieved when the domain is hosted in Route 53 and
	// managed by this provider.  Find out more about verifying domains in Amazon
	// SES in the [AWS SES
	// docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html).
	VerificationToken *string `pulumi:"verificationToken"`
}

type DomainIdentityState struct {
	// The ARN of the domain identity.
	Arn pulumix.Input[*string]
	// The domain name to assign to SES
	Domain pulumix.Input[*string]
	// A code which when added to the domain as a TXT record
	// will signal to SES that the owner of the domain has authorised SES to act on
	// their behalf. The domain identity will be in state "verification pending"
	// until this is done. See the With Route53 Record example
	// for how this might be achieved when the domain is hosted in Route 53 and
	// managed by this provider.  Find out more about verifying domains in Amazon
	// SES in the [AWS SES
	// docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html).
	VerificationToken pulumix.Input[*string]
}

func (DomainIdentityState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainIdentityState)(nil)).Elem()
}

type domainIdentityArgs struct {
	// The domain name to assign to SES
	Domain string `pulumi:"domain"`
}

// The set of arguments for constructing a DomainIdentity resource.
type DomainIdentityArgs struct {
	// The domain name to assign to SES
	Domain pulumix.Input[string]
}

func (DomainIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainIdentityArgs)(nil)).Elem()
}

type DomainIdentityOutput struct{ *pulumi.OutputState }

func (DomainIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainIdentity)(nil)).Elem()
}

func (o DomainIdentityOutput) ToDomainIdentityOutput() DomainIdentityOutput {
	return o
}

func (o DomainIdentityOutput) ToDomainIdentityOutputWithContext(ctx context.Context) DomainIdentityOutput {
	return o
}

func (o DomainIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[DomainIdentity] {
	return pulumix.Output[DomainIdentity]{
		OutputState: o.OutputState,
	}
}

// The ARN of the domain identity.
func (o DomainIdentityOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DomainIdentity](o, func(v DomainIdentity) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The domain name to assign to SES
func (o DomainIdentityOutput) Domain() pulumix.Output[string] {
	value := pulumix.Apply[DomainIdentity](o, func(v DomainIdentity) pulumix.Output[string] { return v.Domain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A code which when added to the domain as a TXT record
// will signal to SES that the owner of the domain has authorised SES to act on
// their behalf. The domain identity will be in state "verification pending"
// until this is done. See the With Route53 Record example
// for how this might be achieved when the domain is hosted in Route 53 and
// managed by this provider.  Find out more about verifying domains in Amazon
// SES in the [AWS SES
// docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html).
func (o DomainIdentityOutput) VerificationToken() pulumix.Output[string] {
	value := pulumix.Apply[DomainIdentity](o, func(v DomainIdentity) pulumix.Output[string] { return v.VerificationToken })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DomainIdentityOutput{})
}
