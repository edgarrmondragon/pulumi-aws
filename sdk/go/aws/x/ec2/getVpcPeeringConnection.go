// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The VPC Peering Connection data source provides details about
// a specific VPC peering connection.
func LookupVpcPeeringConnection(ctx *pulumi.Context, args *LookupVpcPeeringConnectionArgs, opts ...pulumi.InvokeOption) (*LookupVpcPeeringConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcPeeringConnectionResult
	err := ctx.Invoke("aws:ec2/getVpcPeeringConnection:getVpcPeeringConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcPeeringConnection.
type LookupVpcPeeringConnectionArgs struct {
	// Primary CIDR block of the requester VPC of the specific VPC Peering Connection to retrieve.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Custom filter block as described below.
	Filters []GetVpcPeeringConnectionFilter `pulumi:"filters"`
	// ID of the specific VPC Peering Connection to retrieve.
	Id *string `pulumi:"id"`
	// AWS account ID of the owner of the requester VPC of the specific VPC Peering Connection to retrieve.
	OwnerId *string `pulumi:"ownerId"`
	// Primary CIDR block of the accepter VPC of the specific VPC Peering Connection to retrieve.
	PeerCidrBlock *string `pulumi:"peerCidrBlock"`
	// AWS account ID of the owner of the accepter VPC of the specific VPC Peering Connection to retrieve.
	PeerOwnerId *string `pulumi:"peerOwnerId"`
	// Region of the accepter VPC of the specific VPC Peering Connection to retrieve.
	PeerRegion *string `pulumi:"peerRegion"`
	// ID of the accepter VPC of the specific VPC Peering Connection to retrieve.
	PeerVpcId *string `pulumi:"peerVpcId"`
	// Region of the requester VPC of the specific VPC Peering Connection to retrieve.
	Region *string `pulumi:"region"`
	// Status of the specific VPC Peering Connection to retrieve.
	Status *string `pulumi:"status"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired VPC Peering Connection.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags map[string]string `pulumi:"tags"`
	// ID of the requester VPC of the specific VPC Peering Connection to retrieve.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getVpcPeeringConnection.
type LookupVpcPeeringConnectionResult struct {
	// Configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter map[string]bool `pulumi:"accepter"`
	// CIDR block associated to the VPC of the specific VPC Peering Connection.
	CidrBlock string `pulumi:"cidrBlock"`
	// List of objects with CIDR blocks of the requester VPC.
	CidrBlockSets []GetVpcPeeringConnectionCidrBlockSet `pulumi:"cidrBlockSets"`
	Filters       []GetVpcPeeringConnectionFilter       `pulumi:"filters"`
	Id            string                                `pulumi:"id"`
	OwnerId       string                                `pulumi:"ownerId"`
	PeerCidrBlock string                                `pulumi:"peerCidrBlock"`
	// List of objects with CIDR blocks of the accepter VPC.
	PeerCidrBlockSets []GetVpcPeeringConnectionPeerCidrBlockSet `pulumi:"peerCidrBlockSets"`
	PeerOwnerId       string                                    `pulumi:"peerOwnerId"`
	PeerRegion        string                                    `pulumi:"peerRegion"`
	PeerVpcId         string                                    `pulumi:"peerVpcId"`
	Region            string                                    `pulumi:"region"`
	// Configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester map[string]bool   `pulumi:"requester"`
	Status    string            `pulumi:"status"`
	Tags      map[string]string `pulumi:"tags"`
	VpcId     string            `pulumi:"vpcId"`
}

func LookupVpcPeeringConnectionOutput(ctx *pulumi.Context, args LookupVpcPeeringConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupVpcPeeringConnectionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVpcPeeringConnectionArgs](args.ToOutput(), func(plainArgs *LookupVpcPeeringConnectionArgs) (*LookupVpcPeeringConnectionResult, error) {
		return LookupVpcPeeringConnection(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVpcPeeringConnectionResultOutput, *LookupVpcPeeringConnectionResult](outputResult)
}

// A collection of arguments for invoking getVpcPeeringConnection.
type LookupVpcPeeringConnectionOutputArgs struct {
	// Primary CIDR block of the requester VPC of the specific VPC Peering Connection to retrieve.
	CidrBlock pulumix.Input[*string] `pulumi:"cidrBlock"`
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetVpcPeeringConnectionFilterArgs] `pulumi:"filters"`
	// ID of the specific VPC Peering Connection to retrieve.
	Id pulumix.Input[*string] `pulumi:"id"`
	// AWS account ID of the owner of the requester VPC of the specific VPC Peering Connection to retrieve.
	OwnerId pulumix.Input[*string] `pulumi:"ownerId"`
	// Primary CIDR block of the accepter VPC of the specific VPC Peering Connection to retrieve.
	PeerCidrBlock pulumix.Input[*string] `pulumi:"peerCidrBlock"`
	// AWS account ID of the owner of the accepter VPC of the specific VPC Peering Connection to retrieve.
	PeerOwnerId pulumix.Input[*string] `pulumi:"peerOwnerId"`
	// Region of the accepter VPC of the specific VPC Peering Connection to retrieve.
	PeerRegion pulumix.Input[*string] `pulumi:"peerRegion"`
	// ID of the accepter VPC of the specific VPC Peering Connection to retrieve.
	PeerVpcId pulumix.Input[*string] `pulumi:"peerVpcId"`
	// Region of the requester VPC of the specific VPC Peering Connection to retrieve.
	Region pulumix.Input[*string] `pulumi:"region"`
	// Status of the specific VPC Peering Connection to retrieve.
	Status pulumix.Input[*string] `pulumi:"status"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired VPC Peering Connection.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// ID of the requester VPC of the specific VPC Peering Connection to retrieve.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (args LookupVpcPeeringConnectionOutputArgs) ToOutput() pulumix.Output[*LookupVpcPeeringConnectionArgs] {
	allArgs := pulumix.All(
		args.CidrBlock.ToOutput(context.Background()).AsAny(),
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.OwnerId.ToOutput(context.Background()).AsAny(),
		args.PeerCidrBlock.ToOutput(context.Background()).AsAny(),
		args.PeerOwnerId.ToOutput(context.Background()).AsAny(),
		args.PeerRegion.ToOutput(context.Background()).AsAny(),
		args.PeerVpcId.ToOutput(context.Background()).AsAny(),
		args.Region.ToOutput(context.Background()).AsAny(),
		args.Status.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VpcId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVpcPeeringConnectionArgs {
		return &LookupVpcPeeringConnectionArgs{
			CidrBlock:     resolvedArgs[0].(*string),
			Filters:       resolvedArgs[1].([]GetVpcPeeringConnectionFilter),
			Id:            resolvedArgs[2].(*string),
			OwnerId:       resolvedArgs[3].(*string),
			PeerCidrBlock: resolvedArgs[4].(*string),
			PeerOwnerId:   resolvedArgs[5].(*string),
			PeerRegion:    resolvedArgs[6].(*string),
			PeerVpcId:     resolvedArgs[7].(*string),
			Region:        resolvedArgs[8].(*string),
			Status:        resolvedArgs[9].(*string),
			Tags:          resolvedArgs[10].(map[string]string),
			VpcId:         resolvedArgs[11].(*string),
		}
	})
}

type LookupVpcPeeringConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupVpcPeeringConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcPeeringConnectionResult)(nil)).Elem()
}

func (o LookupVpcPeeringConnectionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVpcPeeringConnectionResult] {
	return pulumix.Output[*LookupVpcPeeringConnectionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVpcPeeringConnectionResultOutput) Accepter() pulumix.MapOutput[bool] {
	value := pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) map[string]bool { return v.Accepter })
	return pulumix.MapOutput[bool]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcPeeringConnectionResultOutput) CidrBlock() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) string { return v.CidrBlock })
}

func (o LookupVpcPeeringConnectionResultOutput) CidrBlockSets() pulumix.GArrayOutput[GetVpcPeeringConnectionCidrBlockSet, GetVpcPeeringConnectionCidrBlockSetOutput] {
	value := pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) []GetVpcPeeringConnectionCidrBlockSet {
		return v.CidrBlockSets
	})
	return pulumix.GArrayOutput[GetVpcPeeringConnectionCidrBlockSet, GetVpcPeeringConnectionCidrBlockSetOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcPeeringConnectionResultOutput) Filters() pulumix.GArrayOutput[GetVpcPeeringConnectionFilter, GetVpcPeeringConnectionFilterOutput] {
	value := pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) []GetVpcPeeringConnectionFilter { return v.Filters })
	return pulumix.GArrayOutput[GetVpcPeeringConnectionFilter, GetVpcPeeringConnectionFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcPeeringConnectionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) string { return v.Id })
}

func (o LookupVpcPeeringConnectionResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) string { return v.OwnerId })
}

func (o LookupVpcPeeringConnectionResultOutput) PeerCidrBlock() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) string { return v.PeerCidrBlock })
}

func (o LookupVpcPeeringConnectionResultOutput) PeerCidrBlockSets() pulumix.GArrayOutput[GetVpcPeeringConnectionPeerCidrBlockSet, GetVpcPeeringConnectionPeerCidrBlockSetOutput] {
	value := pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) []GetVpcPeeringConnectionPeerCidrBlockSet {
		return v.PeerCidrBlockSets
	})
	return pulumix.GArrayOutput[GetVpcPeeringConnectionPeerCidrBlockSet, GetVpcPeeringConnectionPeerCidrBlockSetOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcPeeringConnectionResultOutput) PeerOwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) string { return v.PeerOwnerId })
}

func (o LookupVpcPeeringConnectionResultOutput) PeerRegion() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) string { return v.PeerRegion })
}

func (o LookupVpcPeeringConnectionResultOutput) PeerVpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) string { return v.PeerVpcId })
}

func (o LookupVpcPeeringConnectionResultOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) string { return v.Region })
}

func (o LookupVpcPeeringConnectionResultOutput) Requester() pulumix.MapOutput[bool] {
	value := pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) map[string]bool { return v.Requester })
	return pulumix.MapOutput[bool]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcPeeringConnectionResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) string { return v.Status })
}

func (o LookupVpcPeeringConnectionResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcPeeringConnectionResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcPeeringConnectionResult](o, func(v *LookupVpcPeeringConnectionResult) string { return v.VpcId })
}
