// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the id of a Resource in API Gateway.
// To fetch the Resource, you must provide the REST API id as well as the full path.
func LookupResource(ctx *pulumi.Context, args *LookupResourceArgs, opts ...pulumi.InvokeOption) (*LookupResourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResourceResult
	err := ctx.Invoke("aws:apigateway/getResource:getResource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResource.
type LookupResourceArgs struct {
	// Full path of the resource.  If no path is found, an error will be returned.
	Path string `pulumi:"path"`
	// REST API id that owns the resource. If no REST API is found, an error will be returned.
	RestApiId string `pulumi:"restApiId"`
}

// A collection of values returned by getResource.
type LookupResourceResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set to the ID of the parent Resource.
	ParentId string `pulumi:"parentId"`
	Path     string `pulumi:"path"`
	// Set to the path relative to the parent Resource.
	PathPart  string `pulumi:"pathPart"`
	RestApiId string `pulumi:"restApiId"`
}

func LookupResourceOutput(ctx *pulumi.Context, args LookupResourceOutputArgs, opts ...pulumi.InvokeOption) LookupResourceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupResourceArgs](args.ToOutput(), func(plainArgs *LookupResourceArgs) (*LookupResourceResult, error) {
		return LookupResource(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupResourceResultOutput, *LookupResourceResult](outputResult)
}

// A collection of arguments for invoking getResource.
type LookupResourceOutputArgs struct {
	// Full path of the resource.  If no path is found, an error will be returned.
	Path pulumix.Input[string] `pulumi:"path"`
	// REST API id that owns the resource. If no REST API is found, an error will be returned.
	RestApiId pulumix.Input[string] `pulumi:"restApiId"`
}

func (args LookupResourceOutputArgs) ToOutput() pulumix.Output[*LookupResourceArgs] {
	allArgs := pulumix.All(
		args.Path.ToOutput(context.Background()).AsAny(),
		args.RestApiId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupResourceArgs {
		return &LookupResourceArgs{
			Path:      resolvedArgs[0].(string),
			RestApiId: resolvedArgs[1].(string),
		}
	})
}

type LookupResourceResultOutput struct{ *pulumi.OutputState }

func (LookupResourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourceResult)(nil)).Elem()
}

func (o LookupResourceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupResourceResult] {
	return pulumix.Output[*LookupResourceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupResourceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceResult](o, func(v *LookupResourceResult) string { return v.Id })
}

func (o LookupResourceResultOutput) ParentId() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceResult](o, func(v *LookupResourceResult) string { return v.ParentId })
}

func (o LookupResourceResultOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceResult](o, func(v *LookupResourceResult) string { return v.Path })
}

func (o LookupResourceResultOutput) PathPart() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceResult](o, func(v *LookupResourceResult) string { return v.PathPart })
}

func (o LookupResourceResultOutput) RestApiId() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceResult](o, func(v *LookupResourceResult) string { return v.RestApiId })
}
