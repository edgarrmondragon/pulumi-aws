// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an RDS database instance snapshot copy. For managing RDS database cluster snapshots, see the `rds.ClusterSnapshot` resource.
type SnapshotCopy struct {
	pulumi.CustomResourceState

	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage pulumix.Output[int] `pulumi:"allocatedStorage"`
	// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	// Whether to copy existing tags. Defaults to `false`.
	CopyTags pulumix.Output[*bool] `pulumi:"copyTags"`
	// The Amazon Resource Name (ARN) for the DB snapshot.
	DbSnapshotArn pulumix.Output[string] `pulumi:"dbSnapshotArn"`
	// The Destination region to place snapshot copy.
	DestinationRegion pulumix.Output[*string] `pulumi:"destinationRegion"`
	// Specifies whether the DB snapshot is encrypted.
	Encrypted pulumix.Output[bool] `pulumi:"encrypted"`
	// Specifies the name of the database engine.
	Engine pulumix.Output[string] `pulumi:"engine"`
	// Specifies the version of the database engine.
	EngineVersion pulumix.Output[string] `pulumi:"engineVersion"`
	// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
	Iops pulumix.Output[int] `pulumi:"iops"`
	// KMS key ID.
	KmsKeyId pulumix.Output[*string] `pulumi:"kmsKeyId"`
	// License model information for the restored DB instance.
	LicenseModel pulumix.Output[string] `pulumi:"licenseModel"`
	// The name of an option group to associate with the copy of the snapshot.
	OptionGroupName pulumix.Output[string] `pulumi:"optionGroupName"`
	Port            pulumix.Output[int]    `pulumi:"port"`
	// he URL that contains a Signature Version 4 signed request.
	PresignedUrl pulumix.Output[*string] `pulumi:"presignedUrl"`
	SnapshotType pulumix.Output[string]  `pulumi:"snapshotType"`
	// Snapshot identifier of the source snapshot.
	SourceDbSnapshotIdentifier pulumix.Output[string] `pulumi:"sourceDbSnapshotIdentifier"`
	// The region that the DB snapshot was created in or copied from.
	SourceRegion pulumix.Output[string] `pulumi:"sourceRegion"`
	// Specifies the storage type associated with DB snapshot.
	StorageType pulumix.Output[string] `pulumi:"storageType"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The external custom Availability Zone.
	TargetCustomAvailabilityZone pulumix.Output[*string] `pulumi:"targetCustomAvailabilityZone"`
	// The Identifier for the snapshot.
	TargetDbSnapshotIdentifier pulumix.Output[string] `pulumi:"targetDbSnapshotIdentifier"`
	// Provides the VPC ID associated with the DB snapshot.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewSnapshotCopy registers a new resource with the given unique name, arguments, and options.
func NewSnapshotCopy(ctx *pulumi.Context,
	name string, args *SnapshotCopyArgs, opts ...pulumi.ResourceOption) (*SnapshotCopy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceDbSnapshotIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'SourceDbSnapshotIdentifier'")
	}
	if args.TargetDbSnapshotIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'TargetDbSnapshotIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnapshotCopy
	err := ctx.RegisterResource("aws:rds/snapshotCopy:SnapshotCopy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotCopy gets an existing SnapshotCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotCopyState, opts ...pulumi.ResourceOption) (*SnapshotCopy, error) {
	var resource SnapshotCopy
	err := ctx.ReadResource("aws:rds/snapshotCopy:SnapshotCopy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotCopy resources.
type snapshotCopyState struct {
	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage *int `pulumi:"allocatedStorage"`
	// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Whether to copy existing tags. Defaults to `false`.
	CopyTags *bool `pulumi:"copyTags"`
	// The Amazon Resource Name (ARN) for the DB snapshot.
	DbSnapshotArn *string `pulumi:"dbSnapshotArn"`
	// The Destination region to place snapshot copy.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// Specifies whether the DB snapshot is encrypted.
	Encrypted *bool `pulumi:"encrypted"`
	// Specifies the name of the database engine.
	Engine *string `pulumi:"engine"`
	// Specifies the version of the database engine.
	EngineVersion *string `pulumi:"engineVersion"`
	// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
	Iops *int `pulumi:"iops"`
	// KMS key ID.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// License model information for the restored DB instance.
	LicenseModel *string `pulumi:"licenseModel"`
	// The name of an option group to associate with the copy of the snapshot.
	OptionGroupName *string `pulumi:"optionGroupName"`
	Port            *int    `pulumi:"port"`
	// he URL that contains a Signature Version 4 signed request.
	PresignedUrl *string `pulumi:"presignedUrl"`
	SnapshotType *string `pulumi:"snapshotType"`
	// Snapshot identifier of the source snapshot.
	SourceDbSnapshotIdentifier *string `pulumi:"sourceDbSnapshotIdentifier"`
	// The region that the DB snapshot was created in or copied from.
	SourceRegion *string `pulumi:"sourceRegion"`
	// Specifies the storage type associated with DB snapshot.
	StorageType *string `pulumi:"storageType"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The external custom Availability Zone.
	TargetCustomAvailabilityZone *string `pulumi:"targetCustomAvailabilityZone"`
	// The Identifier for the snapshot.
	TargetDbSnapshotIdentifier *string `pulumi:"targetDbSnapshotIdentifier"`
	// Provides the VPC ID associated with the DB snapshot.
	VpcId *string `pulumi:"vpcId"`
}

type SnapshotCopyState struct {
	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage pulumix.Input[*int]
	// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
	AvailabilityZone pulumix.Input[*string]
	// Whether to copy existing tags. Defaults to `false`.
	CopyTags pulumix.Input[*bool]
	// The Amazon Resource Name (ARN) for the DB snapshot.
	DbSnapshotArn pulumix.Input[*string]
	// The Destination region to place snapshot copy.
	DestinationRegion pulumix.Input[*string]
	// Specifies whether the DB snapshot is encrypted.
	Encrypted pulumix.Input[*bool]
	// Specifies the name of the database engine.
	Engine pulumix.Input[*string]
	// Specifies the version of the database engine.
	EngineVersion pulumix.Input[*string]
	// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
	Iops pulumix.Input[*int]
	// KMS key ID.
	KmsKeyId pulumix.Input[*string]
	// License model information for the restored DB instance.
	LicenseModel pulumix.Input[*string]
	// The name of an option group to associate with the copy of the snapshot.
	OptionGroupName pulumix.Input[*string]
	Port            pulumix.Input[*int]
	// he URL that contains a Signature Version 4 signed request.
	PresignedUrl pulumix.Input[*string]
	SnapshotType pulumix.Input[*string]
	// Snapshot identifier of the source snapshot.
	SourceDbSnapshotIdentifier pulumix.Input[*string]
	// The region that the DB snapshot was created in or copied from.
	SourceRegion pulumix.Input[*string]
	// Specifies the storage type associated with DB snapshot.
	StorageType pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The external custom Availability Zone.
	TargetCustomAvailabilityZone pulumix.Input[*string]
	// The Identifier for the snapshot.
	TargetDbSnapshotIdentifier pulumix.Input[*string]
	// Provides the VPC ID associated with the DB snapshot.
	VpcId pulumix.Input[*string]
}

func (SnapshotCopyState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotCopyState)(nil)).Elem()
}

type snapshotCopyArgs struct {
	// Whether to copy existing tags. Defaults to `false`.
	CopyTags *bool `pulumi:"copyTags"`
	// The Destination region to place snapshot copy.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// KMS key ID.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The name of an option group to associate with the copy of the snapshot.
	OptionGroupName *string `pulumi:"optionGroupName"`
	// he URL that contains a Signature Version 4 signed request.
	PresignedUrl *string `pulumi:"presignedUrl"`
	// Snapshot identifier of the source snapshot.
	SourceDbSnapshotIdentifier string `pulumi:"sourceDbSnapshotIdentifier"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The external custom Availability Zone.
	TargetCustomAvailabilityZone *string `pulumi:"targetCustomAvailabilityZone"`
	// The Identifier for the snapshot.
	TargetDbSnapshotIdentifier string `pulumi:"targetDbSnapshotIdentifier"`
}

// The set of arguments for constructing a SnapshotCopy resource.
type SnapshotCopyArgs struct {
	// Whether to copy existing tags. Defaults to `false`.
	CopyTags pulumix.Input[*bool]
	// The Destination region to place snapshot copy.
	DestinationRegion pulumix.Input[*string]
	// KMS key ID.
	KmsKeyId pulumix.Input[*string]
	// The name of an option group to associate with the copy of the snapshot.
	OptionGroupName pulumix.Input[*string]
	// he URL that contains a Signature Version 4 signed request.
	PresignedUrl pulumix.Input[*string]
	// Snapshot identifier of the source snapshot.
	SourceDbSnapshotIdentifier pulumix.Input[string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The external custom Availability Zone.
	TargetCustomAvailabilityZone pulumix.Input[*string]
	// The Identifier for the snapshot.
	TargetDbSnapshotIdentifier pulumix.Input[string]
}

func (SnapshotCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotCopyArgs)(nil)).Elem()
}

type SnapshotCopyOutput struct{ *pulumi.OutputState }

func (SnapshotCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotCopy)(nil)).Elem()
}

func (o SnapshotCopyOutput) ToSnapshotCopyOutput() SnapshotCopyOutput {
	return o
}

func (o SnapshotCopyOutput) ToSnapshotCopyOutputWithContext(ctx context.Context) SnapshotCopyOutput {
	return o
}

func (o SnapshotCopyOutput) ToOutput(ctx context.Context) pulumix.Output[SnapshotCopy] {
	return pulumix.Output[SnapshotCopy]{
		OutputState: o.OutputState,
	}
}

// Specifies the allocated storage size in gigabytes (GB).
func (o SnapshotCopyOutput) AllocatedStorage() pulumix.Output[int] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[int] { return v.AllocatedStorage })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
func (o SnapshotCopyOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to copy existing tags. Defaults to `false`.
func (o SnapshotCopyOutput) CopyTags() pulumix.Output[*bool] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[*bool] { return v.CopyTags })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The Amazon Resource Name (ARN) for the DB snapshot.
func (o SnapshotCopyOutput) DbSnapshotArn() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.DbSnapshotArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Destination region to place snapshot copy.
func (o SnapshotCopyOutput) DestinationRegion() pulumix.Output[*string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[*string] { return v.DestinationRegion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies whether the DB snapshot is encrypted.
func (o SnapshotCopyOutput) Encrypted() pulumix.Output[bool] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[bool] { return v.Encrypted })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Specifies the name of the database engine.
func (o SnapshotCopyOutput) Engine() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.Engine })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the version of the database engine.
func (o SnapshotCopyOutput) EngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.EngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
func (o SnapshotCopyOutput) Iops() pulumix.Output[int] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[int] { return v.Iops })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// KMS key ID.
func (o SnapshotCopyOutput) KmsKeyId() pulumix.Output[*string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[*string] { return v.KmsKeyId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// License model information for the restored DB instance.
func (o SnapshotCopyOutput) LicenseModel() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.LicenseModel })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of an option group to associate with the copy of the snapshot.
func (o SnapshotCopyOutput) OptionGroupName() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.OptionGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o SnapshotCopyOutput) Port() pulumix.Output[int] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[int] { return v.Port })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// he URL that contains a Signature Version 4 signed request.
func (o SnapshotCopyOutput) PresignedUrl() pulumix.Output[*string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[*string] { return v.PresignedUrl })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o SnapshotCopyOutput) SnapshotType() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.SnapshotType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Snapshot identifier of the source snapshot.
func (o SnapshotCopyOutput) SourceDbSnapshotIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.SourceDbSnapshotIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The region that the DB snapshot was created in or copied from.
func (o SnapshotCopyOutput) SourceRegion() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.SourceRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the storage type associated with DB snapshot.
func (o SnapshotCopyOutput) StorageType() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.StorageType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SnapshotCopyOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SnapshotCopyOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The external custom Availability Zone.
func (o SnapshotCopyOutput) TargetCustomAvailabilityZone() pulumix.Output[*string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[*string] { return v.TargetCustomAvailabilityZone })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Identifier for the snapshot.
func (o SnapshotCopyOutput) TargetDbSnapshotIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.TargetDbSnapshotIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Provides the VPC ID associated with the DB snapshot.
func (o SnapshotCopyOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[SnapshotCopy](o, func(v SnapshotCopy) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SnapshotCopyOutput{})
}
