// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a Lambda function URL.
func LookupFunctionUrl(ctx *pulumi.Context, args *LookupFunctionUrlArgs, opts ...pulumi.InvokeOption) (*LookupFunctionUrlResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFunctionUrlResult
	err := ctx.Invoke("aws:lambda/getFunctionUrl:getFunctionUrl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFunctionUrl.
type LookupFunctionUrlArgs struct {
	// he name (or ARN) of the Lambda function.
	FunctionName string `pulumi:"functionName"`
	// Alias name or `"$LATEST"`.
	Qualifier *string `pulumi:"qualifier"`
}

// A collection of values returned by getFunctionUrl.
type LookupFunctionUrlResult struct {
	// Type of authentication that the function URL uses.
	AuthorizationType string `pulumi:"authorizationType"`
	// The [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) settings for the function URL. See the `lambda.FunctionUrl` resource documentation for more details.
	Cors []GetFunctionUrlCor `pulumi:"cors"`
	// When the function URL was created, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime).
	CreationTime string `pulumi:"creationTime"`
	// ARN of the function.
	FunctionArn  string `pulumi:"functionArn"`
	FunctionName string `pulumi:"functionName"`
	// HTTP URL endpoint for the function in the format `https://<url_id>.lambda-url.<region>.on.aws`.
	FunctionUrl string `pulumi:"functionUrl"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the Lambda function responds in `BUFFERED` or `RESPONSE_STREAM` mode.
	InvokeMode string `pulumi:"invokeMode"`
	// When the function URL configuration was last updated, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime).
	LastModifiedTime string  `pulumi:"lastModifiedTime"`
	Qualifier        *string `pulumi:"qualifier"`
	// Generated ID for the endpoint.
	UrlId string `pulumi:"urlId"`
}

func LookupFunctionUrlOutput(ctx *pulumi.Context, args LookupFunctionUrlOutputArgs, opts ...pulumi.InvokeOption) LookupFunctionUrlResultOutput {
	outputResult := pulumix.ApplyErr[*LookupFunctionUrlArgs](args.ToOutput(), func(plainArgs *LookupFunctionUrlArgs) (*LookupFunctionUrlResult, error) {
		return LookupFunctionUrl(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupFunctionUrlResultOutput, *LookupFunctionUrlResult](outputResult)
}

// A collection of arguments for invoking getFunctionUrl.
type LookupFunctionUrlOutputArgs struct {
	// he name (or ARN) of the Lambda function.
	FunctionName pulumix.Input[string] `pulumi:"functionName"`
	// Alias name or `"$LATEST"`.
	Qualifier pulumix.Input[*string] `pulumi:"qualifier"`
}

func (args LookupFunctionUrlOutputArgs) ToOutput() pulumix.Output[*LookupFunctionUrlArgs] {
	allArgs := pulumix.All(
		args.FunctionName.ToOutput(context.Background()).AsAny(),
		args.Qualifier.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupFunctionUrlArgs {
		return &LookupFunctionUrlArgs{
			FunctionName: resolvedArgs[0].(string),
			Qualifier:    resolvedArgs[1].(*string),
		}
	})
}

type LookupFunctionUrlResultOutput struct{ *pulumi.OutputState }

func (LookupFunctionUrlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFunctionUrlResult)(nil)).Elem()
}

func (o LookupFunctionUrlResultOutput) ToOutput(context.Context) pulumix.Output[*LookupFunctionUrlResult] {
	return pulumix.Output[*LookupFunctionUrlResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupFunctionUrlResultOutput) AuthorizationType() pulumix.Output[string] {
	return pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) string { return v.AuthorizationType })
}

func (o LookupFunctionUrlResultOutput) Cors() pulumix.GArrayOutput[GetFunctionUrlCor, GetFunctionUrlCorOutput] {
	value := pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) []GetFunctionUrlCor { return v.Cors })
	return pulumix.GArrayOutput[GetFunctionUrlCor, GetFunctionUrlCorOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupFunctionUrlResultOutput) CreationTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) string { return v.CreationTime })
}

func (o LookupFunctionUrlResultOutput) FunctionArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) string { return v.FunctionArn })
}

func (o LookupFunctionUrlResultOutput) FunctionName() pulumix.Output[string] {
	return pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) string { return v.FunctionName })
}

func (o LookupFunctionUrlResultOutput) FunctionUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) string { return v.FunctionUrl })
}

func (o LookupFunctionUrlResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) string { return v.Id })
}

func (o LookupFunctionUrlResultOutput) InvokeMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) string { return v.InvokeMode })
}

func (o LookupFunctionUrlResultOutput) LastModifiedTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) string { return v.LastModifiedTime })
}

func (o LookupFunctionUrlResultOutput) Qualifier() pulumix.Output[*string] {
	return pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) *string { return v.Qualifier })
}

func (o LookupFunctionUrlResultOutput) UrlId() pulumix.Output[string] {
	return pulumix.Apply[*LookupFunctionUrlResult](o, func(v *LookupFunctionUrlResult) string { return v.UrlId })
}
