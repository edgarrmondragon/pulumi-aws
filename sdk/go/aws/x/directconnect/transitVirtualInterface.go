// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Direct Connect transit virtual interface resource.
// A transit virtual interface is a VLAN that transports traffic from a Direct Connect gateway to one or more transit gateways.
type TransitVirtualInterface struct {
	pulumi.CustomResourceState

	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Output[string] `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumix.Output[string] `pulumi:"amazonAddress"`
	AmazonSideAsn pulumix.Output[string] `pulumi:"amazonSideAsn"`
	// The ARN of the virtual interface.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice pulumix.Output[string] `pulumi:"awsDevice"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Output[int] `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Output[string] `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumix.Output[string] `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumix.Output[string] `pulumi:"customerAddress"`
	// The ID of the Direct Connect gateway to which to connect the virtual interface.
	DxGatewayId pulumix.Output[string] `pulumi:"dxGatewayId"`
	// Indicates whether jumbo frames (8500 MTU) are supported.
	JumboFrameCapable pulumix.Output[bool] `pulumi:"jumboFrameCapable"`
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
	// The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
	Mtu pulumix.Output[*int] `pulumi:"mtu"`
	// The name for the virtual interface.
	Name pulumix.Output[string] `pulumi:"name"`
	// Indicates whether to enable or disable SiteLink.
	SitelinkEnabled pulumix.Output[*bool] `pulumi:"sitelinkEnabled"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The VLAN ID.
	Vlan pulumix.Output[int] `pulumi:"vlan"`
}

// NewTransitVirtualInterface registers a new resource with the given unique name, arguments, and options.
func NewTransitVirtualInterface(ctx *pulumi.Context,
	name string, args *TransitVirtualInterfaceArgs, opts ...pulumi.ResourceOption) (*TransitVirtualInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'AddressFamily'")
	}
	if args.BgpAsn == nil {
		return nil, errors.New("invalid value for required argument 'BgpAsn'")
	}
	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.DxGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'DxGatewayId'")
	}
	if args.Vlan == nil {
		return nil, errors.New("invalid value for required argument 'Vlan'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransitVirtualInterface
	err := ctx.RegisterResource("aws:directconnect/transitVirtualInterface:TransitVirtualInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitVirtualInterface gets an existing TransitVirtualInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitVirtualInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitVirtualInterfaceState, opts ...pulumi.ResourceOption) (*TransitVirtualInterface, error) {
	var resource TransitVirtualInterface
	err := ctx.ReadResource("aws:directconnect/transitVirtualInterface:TransitVirtualInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitVirtualInterface resources.
type transitVirtualInterfaceState struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily *string `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress *string `pulumi:"amazonAddress"`
	AmazonSideAsn *string `pulumi:"amazonSideAsn"`
	// The ARN of the virtual interface.
	Arn *string `pulumi:"arn"`
	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice *string `pulumi:"awsDevice"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn *int `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey *string `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId *string `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress *string `pulumi:"customerAddress"`
	// The ID of the Direct Connect gateway to which to connect the virtual interface.
	DxGatewayId *string `pulumi:"dxGatewayId"`
	// Indicates whether jumbo frames (8500 MTU) are supported.
	JumboFrameCapable *bool `pulumi:"jumboFrameCapable"`
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
	// The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
	Mtu *int `pulumi:"mtu"`
	// The name for the virtual interface.
	Name *string `pulumi:"name"`
	// Indicates whether to enable or disable SiteLink.
	SitelinkEnabled *bool `pulumi:"sitelinkEnabled"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The VLAN ID.
	Vlan *int `pulumi:"vlan"`
}

type TransitVirtualInterfaceState struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Input[*string]
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumix.Input[*string]
	AmazonSideAsn pulumix.Input[*string]
	// The ARN of the virtual interface.
	Arn pulumix.Input[*string]
	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice pulumix.Input[*string]
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Input[*int]
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Input[*string]
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumix.Input[*string]
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumix.Input[*string]
	// The ID of the Direct Connect gateway to which to connect the virtual interface.
	DxGatewayId pulumix.Input[*string]
	// Indicates whether jumbo frames (8500 MTU) are supported.
	JumboFrameCapable pulumix.Input[*bool]
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
	// The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
	Mtu pulumix.Input[*int]
	// The name for the virtual interface.
	Name pulumix.Input[*string]
	// Indicates whether to enable or disable SiteLink.
	SitelinkEnabled pulumix.Input[*bool]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The VLAN ID.
	Vlan pulumix.Input[*int]
}

func (TransitVirtualInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitVirtualInterfaceState)(nil)).Elem()
}

type transitVirtualInterfaceArgs struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily string `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress *string `pulumi:"amazonAddress"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn int `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey *string `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId string `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress *string `pulumi:"customerAddress"`
	// The ID of the Direct Connect gateway to which to connect the virtual interface.
	DxGatewayId string `pulumi:"dxGatewayId"`
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
	// The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
	Mtu *int `pulumi:"mtu"`
	// The name for the virtual interface.
	Name *string `pulumi:"name"`
	// Indicates whether to enable or disable SiteLink.
	SitelinkEnabled *bool `pulumi:"sitelinkEnabled"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The VLAN ID.
	Vlan int `pulumi:"vlan"`
}

// The set of arguments for constructing a TransitVirtualInterface resource.
type TransitVirtualInterfaceArgs struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Input[string]
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumix.Input[*string]
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Input[int]
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Input[*string]
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumix.Input[string]
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumix.Input[*string]
	// The ID of the Direct Connect gateway to which to connect the virtual interface.
	DxGatewayId pulumix.Input[string]
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
	// The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
	Mtu pulumix.Input[*int]
	// The name for the virtual interface.
	Name pulumix.Input[*string]
	// Indicates whether to enable or disable SiteLink.
	SitelinkEnabled pulumix.Input[*bool]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The VLAN ID.
	Vlan pulumix.Input[int]
}

func (TransitVirtualInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitVirtualInterfaceArgs)(nil)).Elem()
}

type TransitVirtualInterfaceOutput struct{ *pulumi.OutputState }

func (TransitVirtualInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitVirtualInterface)(nil)).Elem()
}

func (o TransitVirtualInterfaceOutput) ToTransitVirtualInterfaceOutput() TransitVirtualInterfaceOutput {
	return o
}

func (o TransitVirtualInterfaceOutput) ToTransitVirtualInterfaceOutputWithContext(ctx context.Context) TransitVirtualInterfaceOutput {
	return o
}

func (o TransitVirtualInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[TransitVirtualInterface] {
	return pulumix.Output[TransitVirtualInterface]{
		OutputState: o.OutputState,
	}
}

// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
func (o TransitVirtualInterfaceOutput) AddressFamily() pulumix.Output[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[string] { return v.AddressFamily })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
func (o TransitVirtualInterfaceOutput) AmazonAddress() pulumix.Output[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[string] { return v.AmazonAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o TransitVirtualInterfaceOutput) AmazonSideAsn() pulumix.Output[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[string] { return v.AmazonSideAsn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the virtual interface.
func (o TransitVirtualInterfaceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Direct Connect endpoint on which the virtual interface terminates.
func (o TransitVirtualInterfaceOutput) AwsDevice() pulumix.Output[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[string] { return v.AwsDevice })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
func (o TransitVirtualInterfaceOutput) BgpAsn() pulumix.Output[int] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[int] { return v.BgpAsn })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The authentication key for BGP configuration.
func (o TransitVirtualInterfaceOutput) BgpAuthKey() pulumix.Output[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[string] { return v.BgpAuthKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
func (o TransitVirtualInterfaceOutput) ConnectionId() pulumix.Output[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[string] { return v.ConnectionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
func (o TransitVirtualInterfaceOutput) CustomerAddress() pulumix.Output[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[string] { return v.CustomerAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Direct Connect gateway to which to connect the virtual interface.
func (o TransitVirtualInterfaceOutput) DxGatewayId() pulumix.Output[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[string] { return v.DxGatewayId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether jumbo frames (8500 MTU) are supported.
func (o TransitVirtualInterfaceOutput) JumboFrameCapable() pulumix.Output[bool] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[bool] { return v.JumboFrameCapable })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
// The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
func (o TransitVirtualInterfaceOutput) Mtu() pulumix.Output[*int] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[*int] { return v.Mtu })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The name for the virtual interface.
func (o TransitVirtualInterfaceOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether to enable or disable SiteLink.
func (o TransitVirtualInterfaceOutput) SitelinkEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[*bool] { return v.SitelinkEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TransitVirtualInterfaceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TransitVirtualInterfaceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The VLAN ID.
func (o TransitVirtualInterfaceOutput) Vlan() pulumix.Output[int] {
	value := pulumix.Apply[TransitVirtualInterface](o, func(v TransitVirtualInterface) pulumix.Output[int] { return v.Vlan })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(TransitVirtualInterfaceOutput{})
}
