// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Accepts a License Manager grant. This allows for sharing licenses with other aws accounts.
type LicenseGrantAccepter struct {
	pulumi.CustomResourceState

	// A list of the allowed operations for the grant.
	AllowedOperations pulumix.ArrayOutput[string] `pulumi:"allowedOperations"`
	// The ARN of the grant to accept.
	GrantArn pulumix.Output[string] `pulumi:"grantArn"`
	// The home region for the license.
	HomeRegion pulumix.Output[string] `pulumi:"homeRegion"`
	// The ARN of the license for the grant.
	LicenseArn pulumix.Output[string] `pulumi:"licenseArn"`
	// The Name of the grant.
	Name pulumix.Output[string] `pulumi:"name"`
	// The parent ARN.
	ParentArn pulumix.Output[string] `pulumi:"parentArn"`
	// The target account for the grant.
	Principal pulumix.Output[string] `pulumi:"principal"`
	// The grant status.
	Status pulumix.Output[string] `pulumi:"status"`
	// The grant version.
	Version pulumix.Output[string] `pulumi:"version"`
}

// NewLicenseGrantAccepter registers a new resource with the given unique name, arguments, and options.
func NewLicenseGrantAccepter(ctx *pulumi.Context,
	name string, args *LicenseGrantAccepterArgs, opts ...pulumi.ResourceOption) (*LicenseGrantAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GrantArn == nil {
		return nil, errors.New("invalid value for required argument 'GrantArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseGrantAccepter
	err := ctx.RegisterResource("aws:licensemanager/licenseGrantAccepter:LicenseGrantAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseGrantAccepter gets an existing LicenseGrantAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseGrantAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseGrantAccepterState, opts ...pulumi.ResourceOption) (*LicenseGrantAccepter, error) {
	var resource LicenseGrantAccepter
	err := ctx.ReadResource("aws:licensemanager/licenseGrantAccepter:LicenseGrantAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseGrantAccepter resources.
type licenseGrantAccepterState struct {
	// A list of the allowed operations for the grant.
	AllowedOperations []string `pulumi:"allowedOperations"`
	// The ARN of the grant to accept.
	GrantArn *string `pulumi:"grantArn"`
	// The home region for the license.
	HomeRegion *string `pulumi:"homeRegion"`
	// The ARN of the license for the grant.
	LicenseArn *string `pulumi:"licenseArn"`
	// The Name of the grant.
	Name *string `pulumi:"name"`
	// The parent ARN.
	ParentArn *string `pulumi:"parentArn"`
	// The target account for the grant.
	Principal *string `pulumi:"principal"`
	// The grant status.
	Status *string `pulumi:"status"`
	// The grant version.
	Version *string `pulumi:"version"`
}

type LicenseGrantAccepterState struct {
	// A list of the allowed operations for the grant.
	AllowedOperations pulumix.Input[[]string]
	// The ARN of the grant to accept.
	GrantArn pulumix.Input[*string]
	// The home region for the license.
	HomeRegion pulumix.Input[*string]
	// The ARN of the license for the grant.
	LicenseArn pulumix.Input[*string]
	// The Name of the grant.
	Name pulumix.Input[*string]
	// The parent ARN.
	ParentArn pulumix.Input[*string]
	// The target account for the grant.
	Principal pulumix.Input[*string]
	// The grant status.
	Status pulumix.Input[*string]
	// The grant version.
	Version pulumix.Input[*string]
}

func (LicenseGrantAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseGrantAccepterState)(nil)).Elem()
}

type licenseGrantAccepterArgs struct {
	// The ARN of the grant to accept.
	GrantArn string `pulumi:"grantArn"`
}

// The set of arguments for constructing a LicenseGrantAccepter resource.
type LicenseGrantAccepterArgs struct {
	// The ARN of the grant to accept.
	GrantArn pulumix.Input[string]
}

func (LicenseGrantAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseGrantAccepterArgs)(nil)).Elem()
}

type LicenseGrantAccepterOutput struct{ *pulumi.OutputState }

func (LicenseGrantAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseGrantAccepter)(nil)).Elem()
}

func (o LicenseGrantAccepterOutput) ToLicenseGrantAccepterOutput() LicenseGrantAccepterOutput {
	return o
}

func (o LicenseGrantAccepterOutput) ToLicenseGrantAccepterOutputWithContext(ctx context.Context) LicenseGrantAccepterOutput {
	return o
}

func (o LicenseGrantAccepterOutput) ToOutput(ctx context.Context) pulumix.Output[LicenseGrantAccepter] {
	return pulumix.Output[LicenseGrantAccepter]{
		OutputState: o.OutputState,
	}
}

// A list of the allowed operations for the grant.
func (o LicenseGrantAccepterOutput) AllowedOperations() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LicenseGrantAccepter](o, func(v LicenseGrantAccepter) pulumix.ArrayOutput[string] { return v.AllowedOperations })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ARN of the grant to accept.
func (o LicenseGrantAccepterOutput) GrantArn() pulumix.Output[string] {
	value := pulumix.Apply[LicenseGrantAccepter](o, func(v LicenseGrantAccepter) pulumix.Output[string] { return v.GrantArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The home region for the license.
func (o LicenseGrantAccepterOutput) HomeRegion() pulumix.Output[string] {
	value := pulumix.Apply[LicenseGrantAccepter](o, func(v LicenseGrantAccepter) pulumix.Output[string] { return v.HomeRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the license for the grant.
func (o LicenseGrantAccepterOutput) LicenseArn() pulumix.Output[string] {
	value := pulumix.Apply[LicenseGrantAccepter](o, func(v LicenseGrantAccepter) pulumix.Output[string] { return v.LicenseArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Name of the grant.
func (o LicenseGrantAccepterOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LicenseGrantAccepter](o, func(v LicenseGrantAccepter) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The parent ARN.
func (o LicenseGrantAccepterOutput) ParentArn() pulumix.Output[string] {
	value := pulumix.Apply[LicenseGrantAccepter](o, func(v LicenseGrantAccepter) pulumix.Output[string] { return v.ParentArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The target account for the grant.
func (o LicenseGrantAccepterOutput) Principal() pulumix.Output[string] {
	value := pulumix.Apply[LicenseGrantAccepter](o, func(v LicenseGrantAccepter) pulumix.Output[string] { return v.Principal })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The grant status.
func (o LicenseGrantAccepterOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[LicenseGrantAccepter](o, func(v LicenseGrantAccepter) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The grant version.
func (o LicenseGrantAccepterOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[LicenseGrantAccepter](o, func(v LicenseGrantAccepter) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LicenseGrantAccepterOutput{})
}
