// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an EC2 Transit Gateway Connect Peer.
func LookupConnectPeer(ctx *pulumi.Context, args *LookupConnectPeerArgs, opts ...pulumi.InvokeOption) (*LookupConnectPeerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectPeerResult
	err := ctx.Invoke("aws:ec2transitgateway/getConnectPeer:getConnectPeer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectPeer.
type LookupConnectPeerArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters []GetConnectPeerFilter `pulumi:"filters"`
	// Key-value tags for the EC2 Transit Gateway Connect Peer
	Tags map[string]string `pulumi:"tags"`
	// Identifier of the EC2 Transit Gateway Connect Peer.
	TransitGatewayConnectPeerId *string `pulumi:"transitGatewayConnectPeerId"`
}

// A collection of values returned by getConnectPeer.
type LookupConnectPeerResult struct {
	// EC2 Transit Gateway Connect Peer ARN
	Arn string `pulumi:"arn"`
	// BGP ASN number assigned customer device
	BgpAsn string `pulumi:"bgpAsn"`
	// The IP address assigned to customer device, which is used as BGP IP address.
	BgpPeerAddress string `pulumi:"bgpPeerAddress"`
	// The IP addresses assigned to Transit Gateway, which are used as BGP IP addresses.
	BgpTransitGatewayAddresses []string               `pulumi:"bgpTransitGatewayAddresses"`
	Filters                    []GetConnectPeerFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// CIDR blocks that will be used for addressing within the tunnel.
	InsideCidrBlocks []string `pulumi:"insideCidrBlocks"`
	// IP addressed assigned to customer device, which is used as tunnel endpoint
	PeerAddress string `pulumi:"peerAddress"`
	// Key-value tags for the EC2 Transit Gateway Connect Peer
	Tags map[string]string `pulumi:"tags"`
	// The IP address assigned to Transit Gateway, which is used as tunnel endpoint.
	TransitGatewayAddress string `pulumi:"transitGatewayAddress"`
	// The Transit Gateway Connect
	TransitGatewayAttachmentId  string `pulumi:"transitGatewayAttachmentId"`
	TransitGatewayConnectPeerId string `pulumi:"transitGatewayConnectPeerId"`
}

func LookupConnectPeerOutput(ctx *pulumi.Context, args LookupConnectPeerOutputArgs, opts ...pulumi.InvokeOption) LookupConnectPeerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupConnectPeerArgs](args.ToOutput(), func(plainArgs *LookupConnectPeerArgs) (*LookupConnectPeerResult, error) {
		return LookupConnectPeer(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupConnectPeerResultOutput, *LookupConnectPeerResult](outputResult)
}

// A collection of arguments for invoking getConnectPeer.
type LookupConnectPeerOutputArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters pulumix.Input[[]*GetConnectPeerFilterArgs] `pulumi:"filters"`
	// Key-value tags for the EC2 Transit Gateway Connect Peer
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Identifier of the EC2 Transit Gateway Connect Peer.
	TransitGatewayConnectPeerId pulumix.Input[*string] `pulumi:"transitGatewayConnectPeerId"`
}

func (args LookupConnectPeerOutputArgs) ToOutput() pulumix.Output[*LookupConnectPeerArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.TransitGatewayConnectPeerId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupConnectPeerArgs {
		return &LookupConnectPeerArgs{
			Filters:                     resolvedArgs[0].([]GetConnectPeerFilter),
			Tags:                        resolvedArgs[1].(map[string]string),
			TransitGatewayConnectPeerId: resolvedArgs[2].(*string),
		}
	})
}

type LookupConnectPeerResultOutput struct{ *pulumi.OutputState }

func (LookupConnectPeerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectPeerResult)(nil)).Elem()
}

func (o LookupConnectPeerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupConnectPeerResult] {
	return pulumix.Output[*LookupConnectPeerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupConnectPeerResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) string { return v.Arn })
}

func (o LookupConnectPeerResultOutput) BgpAsn() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) string { return v.BgpAsn })
}

func (o LookupConnectPeerResultOutput) BgpPeerAddress() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) string { return v.BgpPeerAddress })
}

func (o LookupConnectPeerResultOutput) BgpTransitGatewayAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) []string { return v.BgpTransitGatewayAddresses })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupConnectPeerResultOutput) Filters() pulumix.GArrayOutput[GetConnectPeerFilter, GetConnectPeerFilterOutput] {
	value := pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) []GetConnectPeerFilter { return v.Filters })
	return pulumix.GArrayOutput[GetConnectPeerFilter, GetConnectPeerFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupConnectPeerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) string { return v.Id })
}

func (o LookupConnectPeerResultOutput) InsideCidrBlocks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) []string { return v.InsideCidrBlocks })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupConnectPeerResultOutput) PeerAddress() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) string { return v.PeerAddress })
}

func (o LookupConnectPeerResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupConnectPeerResultOutput) TransitGatewayAddress() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) string { return v.TransitGatewayAddress })
}

func (o LookupConnectPeerResultOutput) TransitGatewayAttachmentId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) string { return v.TransitGatewayAttachmentId })
}

func (o LookupConnectPeerResultOutput) TransitGatewayConnectPeerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectPeerResult](o, func(v *LookupConnectPeerResult) string { return v.TransitGatewayConnectPeerId })
}
