// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about an Image Builder Component.
func LookupComponent(ctx *pulumi.Context, args *LookupComponentArgs, opts ...pulumi.InvokeOption) (*LookupComponentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupComponentResult
	err := ctx.Invoke("aws:imagebuilder/getComponent:getComponent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getComponent.
type LookupComponentArgs struct {
	// ARN of the component.
	Arn string `pulumi:"arn"`
	// Key-value map of resource tags for the component.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getComponent.
type LookupComponentResult struct {
	Arn string `pulumi:"arn"`
	// Change description of the component.
	ChangeDescription string `pulumi:"changeDescription"`
	// Data of the component.
	Data string `pulumi:"data"`
	// Date the component was created.
	DateCreated string `pulumi:"dateCreated"`
	// Description of the component.
	Description string `pulumi:"description"`
	// Encryption status of the component.
	Encrypted bool `pulumi:"encrypted"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN of the Key Management Service (KMS) Key used to encrypt the component.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// Name of the component.
	Name string `pulumi:"name"`
	// Owner of the component.
	Owner string `pulumi:"owner"`
	// Platform of the component.
	Platform string `pulumi:"platform"`
	// Operating Systems (OSes) supported by the component.
	SupportedOsVersions []string `pulumi:"supportedOsVersions"`
	// Key-value map of resource tags for the component.
	Tags map[string]string `pulumi:"tags"`
	// Type of the component.
	Type string `pulumi:"type"`
	// Version of the component.
	Version string `pulumi:"version"`
}

func LookupComponentOutput(ctx *pulumi.Context, args LookupComponentOutputArgs, opts ...pulumi.InvokeOption) LookupComponentResultOutput {
	outputResult := pulumix.ApplyErr[*LookupComponentArgs](args.ToOutput(), func(plainArgs *LookupComponentArgs) (*LookupComponentResult, error) {
		return LookupComponent(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupComponentResultOutput, *LookupComponentResult](outputResult)
}

// A collection of arguments for invoking getComponent.
type LookupComponentOutputArgs struct {
	// ARN of the component.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Key-value map of resource tags for the component.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupComponentOutputArgs) ToOutput() pulumix.Output[*LookupComponentArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupComponentArgs {
		return &LookupComponentArgs{
			Arn:  resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupComponentResultOutput struct{ *pulumi.OutputState }

func (LookupComponentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComponentResult)(nil)).Elem()
}

func (o LookupComponentResultOutput) ToOutput(context.Context) pulumix.Output[*LookupComponentResult] {
	return pulumix.Output[*LookupComponentResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupComponentResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.Arn })
}

func (o LookupComponentResultOutput) ChangeDescription() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.ChangeDescription })
}

func (o LookupComponentResultOutput) Data() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.Data })
}

func (o LookupComponentResultOutput) DateCreated() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.DateCreated })
}

func (o LookupComponentResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.Description })
}

func (o LookupComponentResultOutput) Encrypted() pulumix.Output[bool] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) bool { return v.Encrypted })
}

func (o LookupComponentResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.Id })
}

func (o LookupComponentResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.KmsKeyId })
}

func (o LookupComponentResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.Name })
}

func (o LookupComponentResultOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.Owner })
}

func (o LookupComponentResultOutput) Platform() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.Platform })
}

func (o LookupComponentResultOutput) SupportedOsVersions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) []string { return v.SupportedOsVersions })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupComponentResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupComponentResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.Type })
}

func (o LookupComponentResultOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[*LookupComponentResult](o, func(v *LookupComponentResult) string { return v.Version })
}
