// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a replicated Region and directory for Multi-Region replication.
// Multi-Region replication is only supported for the Enterprise Edition of AWS Managed Microsoft AD.
type ServiceRegion struct {
	pulumi.CustomResourceState

	// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
	DesiredNumberOfDomainControllers pulumix.Output[int] `pulumi:"desiredNumberOfDomainControllers"`
	// The identifier of the directory to which you want to add Region replication.
	DirectoryId pulumix.Output[string] `pulumi:"directoryId"`
	// The name of the Region where you want to add domain controllers for replication.
	RegionName pulumix.Output[string] `pulumi:"regionName"`
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// VPC information in the replicated Region. Detailed below.
	VpcSettings pulumix.GPtrOutput[ServiceRegionVpcSettings, ServiceRegionVpcSettingsOutput] `pulumi:"vpcSettings"`
}

// NewServiceRegion registers a new resource with the given unique name, arguments, and options.
func NewServiceRegion(ctx *pulumi.Context,
	name string, args *ServiceRegionArgs, opts ...pulumi.ResourceOption) (*ServiceRegion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.RegionName == nil {
		return nil, errors.New("invalid value for required argument 'RegionName'")
	}
	if args.VpcSettings == nil {
		return nil, errors.New("invalid value for required argument 'VpcSettings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceRegion
	err := ctx.RegisterResource("aws:directoryservice/serviceRegion:ServiceRegion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceRegion gets an existing ServiceRegion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceRegion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceRegionState, opts ...pulumi.ResourceOption) (*ServiceRegion, error) {
	var resource ServiceRegion
	err := ctx.ReadResource("aws:directoryservice/serviceRegion:ServiceRegion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceRegion resources.
type serviceRegionState struct {
	// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
	DesiredNumberOfDomainControllers *int `pulumi:"desiredNumberOfDomainControllers"`
	// The identifier of the directory to which you want to add Region replication.
	DirectoryId *string `pulumi:"directoryId"`
	// The name of the Region where you want to add domain controllers for replication.
	RegionName *string `pulumi:"regionName"`
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// VPC information in the replicated Region. Detailed below.
	VpcSettings *ServiceRegionVpcSettings `pulumi:"vpcSettings"`
}

type ServiceRegionState struct {
	// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
	DesiredNumberOfDomainControllers pulumix.Input[*int]
	// The identifier of the directory to which you want to add Region replication.
	DirectoryId pulumix.Input[*string]
	// The name of the Region where you want to add domain controllers for replication.
	RegionName pulumix.Input[*string]
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// VPC information in the replicated Region. Detailed below.
	VpcSettings pulumix.Input[*ServiceRegionVpcSettingsArgs]
}

func (ServiceRegionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceRegionState)(nil)).Elem()
}

type serviceRegionArgs struct {
	// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
	DesiredNumberOfDomainControllers *int `pulumi:"desiredNumberOfDomainControllers"`
	// The identifier of the directory to which you want to add Region replication.
	DirectoryId string `pulumi:"directoryId"`
	// The name of the Region where you want to add domain controllers for replication.
	RegionName string `pulumi:"regionName"`
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// VPC information in the replicated Region. Detailed below.
	VpcSettings ServiceRegionVpcSettings `pulumi:"vpcSettings"`
}

// The set of arguments for constructing a ServiceRegion resource.
type ServiceRegionArgs struct {
	// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
	DesiredNumberOfDomainControllers pulumix.Input[*int]
	// The identifier of the directory to which you want to add Region replication.
	DirectoryId pulumix.Input[string]
	// The name of the Region where you want to add domain controllers for replication.
	RegionName pulumix.Input[string]
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// VPC information in the replicated Region. Detailed below.
	VpcSettings pulumix.Input[*ServiceRegionVpcSettingsArgs]
}

func (ServiceRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceRegionArgs)(nil)).Elem()
}

type ServiceRegionOutput struct{ *pulumi.OutputState }

func (ServiceRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRegion)(nil)).Elem()
}

func (o ServiceRegionOutput) ToServiceRegionOutput() ServiceRegionOutput {
	return o
}

func (o ServiceRegionOutput) ToServiceRegionOutputWithContext(ctx context.Context) ServiceRegionOutput {
	return o
}

func (o ServiceRegionOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceRegion] {
	return pulumix.Output[ServiceRegion]{
		OutputState: o.OutputState,
	}
}

// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
func (o ServiceRegionOutput) DesiredNumberOfDomainControllers() pulumix.Output[int] {
	value := pulumix.Apply[ServiceRegion](o, func(v ServiceRegion) pulumix.Output[int] { return v.DesiredNumberOfDomainControllers })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The identifier of the directory to which you want to add Region replication.
func (o ServiceRegionOutput) DirectoryId() pulumix.Output[string] {
	value := pulumix.Apply[ServiceRegion](o, func(v ServiceRegion) pulumix.Output[string] { return v.DirectoryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Region where you want to add domain controllers for replication.
func (o ServiceRegionOutput) RegionName() pulumix.Output[string] {
	value := pulumix.Apply[ServiceRegion](o, func(v ServiceRegion) pulumix.Output[string] { return v.RegionName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ServiceRegionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServiceRegion](o, func(v ServiceRegion) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ServiceRegionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServiceRegion](o, func(v ServiceRegion) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// VPC information in the replicated Region. Detailed below.
func (o ServiceRegionOutput) VpcSettings() pulumix.GPtrOutput[ServiceRegionVpcSettings, ServiceRegionVpcSettingsOutput] {
	value := pulumix.Apply[ServiceRegion](o, func(v ServiceRegion) pulumix.GPtrOutput[ServiceRegionVpcSettings, ServiceRegionVpcSettingsOutput] {
		return v.VpcSettings
	})
	unwrapped := pulumix.Flatten[*ServiceRegionVpcSettings, pulumix.GPtrOutput[ServiceRegionVpcSettings, ServiceRegionVpcSettingsOutput]](value)
	return pulumix.GPtrOutput[ServiceRegionVpcSettings, ServiceRegionVpcSettingsOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ServiceRegionOutput{})
}
