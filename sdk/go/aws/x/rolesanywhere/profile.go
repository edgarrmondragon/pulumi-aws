// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rolesanywhere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing a Roles Anywhere Profile.
type Profile struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Profile
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The number of seconds the vended session credentials are valid for. Defaults to 3600.
	DurationSeconds pulumix.Output[int] `pulumi:"durationSeconds"`
	// Whether or not the Profile is enabled.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// A list of managed policy ARNs that apply to the vended session credentials.
	ManagedPolicyArns pulumix.ArrayOutput[string] `pulumi:"managedPolicyArns"`
	// The name of the Profile.
	Name pulumix.Output[string] `pulumi:"name"`
	// Specifies whether instance properties are required in [CreateSession](https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html) requests with this profile.
	RequireInstanceProperties pulumix.Output[*bool] `pulumi:"requireInstanceProperties"`
	// A list of IAM roles that this profile can assume
	RoleArns pulumix.ArrayOutput[string] `pulumi:"roleArns"`
	// A session policy that applies to the trust boundary of the vended session credentials.
	SessionPolicy pulumix.Output[*string] `pulumi:"sessionPolicy"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArns == nil {
		return nil, errors.New("invalid value for required argument 'RoleArns'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Profile
	err := ctx.RegisterResource("aws:rolesanywhere/profile:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("aws:rolesanywhere/profile:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
	// Amazon Resource Name (ARN) of the Profile
	Arn *string `pulumi:"arn"`
	// The number of seconds the vended session credentials are valid for. Defaults to 3600.
	DurationSeconds *int `pulumi:"durationSeconds"`
	// Whether or not the Profile is enabled.
	Enabled *bool `pulumi:"enabled"`
	// A list of managed policy ARNs that apply to the vended session credentials.
	ManagedPolicyArns []string `pulumi:"managedPolicyArns"`
	// The name of the Profile.
	Name *string `pulumi:"name"`
	// Specifies whether instance properties are required in [CreateSession](https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html) requests with this profile.
	RequireInstanceProperties *bool `pulumi:"requireInstanceProperties"`
	// A list of IAM roles that this profile can assume
	RoleArns []string `pulumi:"roleArns"`
	// A session policy that applies to the trust boundary of the vended session credentials.
	SessionPolicy *string `pulumi:"sessionPolicy"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ProfileState struct {
	// Amazon Resource Name (ARN) of the Profile
	Arn pulumix.Input[*string]
	// The number of seconds the vended session credentials are valid for. Defaults to 3600.
	DurationSeconds pulumix.Input[*int]
	// Whether or not the Profile is enabled.
	Enabled pulumix.Input[*bool]
	// A list of managed policy ARNs that apply to the vended session credentials.
	ManagedPolicyArns pulumix.Input[[]string]
	// The name of the Profile.
	Name pulumix.Input[*string]
	// Specifies whether instance properties are required in [CreateSession](https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html) requests with this profile.
	RequireInstanceProperties pulumix.Input[*bool]
	// A list of IAM roles that this profile can assume
	RoleArns pulumix.Input[[]string]
	// A session policy that applies to the trust boundary of the vended session credentials.
	SessionPolicy pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	// The number of seconds the vended session credentials are valid for. Defaults to 3600.
	DurationSeconds *int `pulumi:"durationSeconds"`
	// Whether or not the Profile is enabled.
	Enabled *bool `pulumi:"enabled"`
	// A list of managed policy ARNs that apply to the vended session credentials.
	ManagedPolicyArns []string `pulumi:"managedPolicyArns"`
	// The name of the Profile.
	Name *string `pulumi:"name"`
	// Specifies whether instance properties are required in [CreateSession](https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html) requests with this profile.
	RequireInstanceProperties *bool `pulumi:"requireInstanceProperties"`
	// A list of IAM roles that this profile can assume
	RoleArns []string `pulumi:"roleArns"`
	// A session policy that applies to the trust boundary of the vended session credentials.
	SessionPolicy *string `pulumi:"sessionPolicy"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	// The number of seconds the vended session credentials are valid for. Defaults to 3600.
	DurationSeconds pulumix.Input[*int]
	// Whether or not the Profile is enabled.
	Enabled pulumix.Input[*bool]
	// A list of managed policy ARNs that apply to the vended session credentials.
	ManagedPolicyArns pulumix.Input[[]string]
	// The name of the Profile.
	Name pulumix.Input[*string]
	// Specifies whether instance properties are required in [CreateSession](https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html) requests with this profile.
	RequireInstanceProperties pulumix.Input[*bool]
	// A list of IAM roles that this profile can assume
	RoleArns pulumix.Input[[]string]
	// A session policy that applies to the trust boundary of the vended session credentials.
	SessionPolicy pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

func (o ProfileOutput) ToOutput(ctx context.Context) pulumix.Output[Profile] {
	return pulumix.Output[Profile]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Profile
func (o ProfileOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of seconds the vended session credentials are valid for. Defaults to 3600.
func (o ProfileOutput) DurationSeconds() pulumix.Output[int] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.Output[int] { return v.DurationSeconds })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Whether or not the Profile is enabled.
func (o ProfileOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A list of managed policy ARNs that apply to the vended session credentials.
func (o ProfileOutput) ManagedPolicyArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.ArrayOutput[string] { return v.ManagedPolicyArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of the Profile.
func (o ProfileOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether instance properties are required in [CreateSession](https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html) requests with this profile.
func (o ProfileOutput) RequireInstanceProperties() pulumix.Output[*bool] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.Output[*bool] { return v.RequireInstanceProperties })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A list of IAM roles that this profile can assume
func (o ProfileOutput) RoleArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.ArrayOutput[string] { return v.RoleArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A session policy that applies to the trust boundary of the vended session credentials.
func (o ProfileOutput) SessionPolicy() pulumix.Output[*string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.Output[*string] { return v.SessionPolicy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ProfileOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ProfileOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ProfileOutput{})
}
